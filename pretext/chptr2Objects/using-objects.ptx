<section xml:id="using-objects">
  <title>Using <c>String</c> Objects</title>
  <introduction>
    <p>
      As we know, a Java program is a collection of interacting objects,
      where each object encapsulates a portion of the program's attributes and actions.
      Objects belong to classes,
      which serve as templates or blueprints for creating objects.
    </p>
    <p>
      Think again of the cookie cutter analogy.
      Just as a cookie cutter is used to shape and create individual cookies,
      a class definition is used to shape and create individual objects.
    </p>
    <p>
      Programming in Java is primarily a matter of designing and defining class definitions,
      which are then used to construct objects.
      The objects perform the program's desired actions.
    </p>
    <p>
      To push the cookie cutter analogy a little further,
      designing and defining a class is like building the cookie cutter.
      Obviously, very few of us would bake cookies if we first had to design and build the cookie cutters.
      We'd be better off using a pre-built cookie cutter.
      By the same token, rather than designing our own classes,
      it will be easier to get into
      <q>baking</q>
      programs if we begin by using some predefined Java classes.
    </p>
    <p>
      The Java library contains many pre-defined classes that we will use in our programs.
      So let's begin our study of programming by using two of these classes,
      the <c>String</c> and <c>Graphics</c> classes.
    </p>
  </introduction>
  <subsection xml:id="fig-strclass">
    <title>Creating and Combining Strings</title>
    <p>
      Strings are very useful objects in Java and in all computer programs.
      They are used for inputting and outputting all types of data.
      Therefore, it essential that we learn how to create and use String objects.
    </p>
    <p>
      <figure xml:id="fig_stringuml">
      <caption>A partial representation of the <c>String</c> class.</caption>
      <image width="35%" source="chptr02/stringuml.png"/> 
      </figure>
    </p>
    <p>
      <xref ref="fig_stringuml"> Figure </xref> provides an overview of a very small part of Java's <c>String</c> class.
      In addition to the two <c>String()</c> constructor methods,
      which are used to create strings,
      it lists several useful instance methods that can be used to manipulate strings.
    </p>
    <p>
      The <c>String</c> class also has two instance variables: <c>value</c>, which contains the string's
      characters, such as <q>Hello98</q>, and  <c>count</c>, which records the number of characters 
      in the string.
    </p>
    <p>
      Recall from Chapter<nbsp/>1 that in order to get things done in a program we send messages to objects,
      which is a matter of calling one of its instance methods.
      In effect, we use an object's methods to get the object to perform certain actions for us.
    </p>
    <p>
      For example,
      if we have a <c>String</c>, named <c>str</c> and we want to find out how many characters it contains,
      we can call its <c>length()</c> method,
      using the expression <c>str.length()</c>. If we want to print its length,
      we can embed this expression in a print statement:
    </p>
    <program language="java">
    <input>
    System.out.println(str.length()); // Print str's length
	</input>
    </program> 
    <p>
      In general, to use an object's instance method,
      we refer to the method in dot notation by first naming the object and then the method:
    </p>
    <p>
      <em>objectName.methodName()</em> ; 
    </p>
    <p>
      The <em>objectName</em> refers to a particular object,
      and the <c>methodName()</c> refers to one of its instance methods.
    </p>
    <p>
      Because instance methods belong to objects,
      to use one of the <c>String</c> methods in a program,
      we must first create a <c>String</c> object.
      To create a <c>String</c> object,
      we first declare a <c>String</c> variable.
    </p>
    <program language="java">
    <input>
    String str; // Declare a String variable named str
	</input>
    </program> 
    <p>
      We then create a <c>String</c> object by using 
      the <c>new</c> keyword in conjunction with one of the <c>String()</c> constructors
      and assign the new object to the variable we declared:
    </p>
    <program language="java">
    <input>
	    str = new String("Hello"); // Create a String containing the word "hello"
	</input>
    </program> 
    <p>
      This example will create a <c>String</c> that contains,
      as its value,
      the word "Hello" that is passed in by the constructor.
      The <c>String</c> object that this creates is shown in <xref ref="hellostr">Figure</xref>.
    </p>    
    <figure xml:id="hellostr">
     <caption>A <c>String</c> object stores a sequence of characters and a <c>count</c> giving the number of characters.</caption>
     <image width="25%" source="chptr02/hello.png"/>
     </figure>
    
    <p>
      We can also use a constructor with an empty parameter list.
      And note that we can combine the
      <em>variable declaration</em>
      and the <em>object creation</em> into one statement:
    </p>
    <program language="java">
    <input>
    	String str2 = new String(); // Create a String
	</input>
    </program> 
    <p>
      This example will create a <c>String</c> object that contains the empty string as its value.
      The <term>empty string</term> has the literal value "" <mdash/> that is,
      a pair of double quotes that contain no characters.
      Because the empty string has no characters,
      the <c>count</c> variable stores a zero (<xref ref="fig_emptystr">Figure</xref>).
    </p>
      <figure xml:id="fig_emptystr">
       <caption>The empty string has a value of "" and a its length is 0.</caption>
       <image width="25%" source="chptr02/emptystr.png"/> 
      </figure>

      <p>Try running the program below.</p>

<activity label="str1">
<statement><p>Run the following code. Add another string that is the empty string 
  and print out its length.</p></statement>
<program language="java" interactive="activecode"><input>
public class StringEx 
{                                   
   public static void main(String[] args)
   {
      String str = new String("Hello"); // Declare and create a String containing the word "hello"
      System.out.println("String " + str + " has the length " + str.length() );
   }
}          
</input></program></activity>    

</subsection>
<subsection>
<title>Default Values</title>
    <p>
       To summarize, in Java, we must use the keyword <c>new</c> and a constructor to assign an 
       initial value to a <c>String</c> variable <mdash/>
       or to any other type of object variable.
    </p>
    <p>   
      This differs from how we assign an initial value to variables of primitive type, such as <c>int</c> and
      <c>boolean</c> variables. Because primitive types are not objects in Java, we can assign them values with a 
      simple assignment statement:
    </p>
    <program language="java">
    <input>
    int num = 5;
	</input>
    </program> 
    <p> 
      This difference relates to the way Java treats these two types of variables in the computer's memory.
      A variable of a primitive type is a name for the memory locations where a value of that type is stored.
    </p>
    <p> 
      By contrast, a <c>String</c> variable (and a variable for any other type of object) stores a <term>reference</term>
      to an object of that type. (A reference is also called a <term>pointer</term>
      because it points to the memory address where the object itself is stored.) The object's constructor creates an object 
      of that type somewhere in memory and supplies a reference to it that is stored in the variable. 
      <xref ref="fig-varmemory">Figure</xref>
      illustrates this difference with a simple example.
    </p>
    <figure xml:id="fig-varmemory">
    <caption>The difference between primitive variables and object variables.</caption>
    <program language="java">
    <input>
      int num = 5;
      boolean boo = true;
      String s = new String("hello");
	</input>
    </program> 
    <image width="80%" source="chptr02/primitive-vs-reference.png"/>
    </figure>
    <p>
      The main reason for this difference is that primitive types have a fixed size. But objects do not. An <c>int</c>
      in Java is always 32 bits. But a <c>String</c> or a <c>Riddle</c> object can vary in size. 
    </p>
    <p> 
      There is another important difference between primitive and object variables.
      As soon as a primitive variable is declared, it is assigned a
      <term>default value</term> of the appropriate type. For example, 
      the default value for an <c>int</c> variable is <m>0</m> and the default value for a <c>boolean</c> 
      variable is <c>false</c>.
    </p>
    <p>   
      By contrast, if an object variable is declared, and not assigned an object, its default value is <c>null</c>,
      which indicates that it points to nothing. It has no object to point to (<xref ref="fig-defaults">Figure</xref>).
    </p> 
    <figure xml:id="fig-defaults">
    <caption>Default values for primitive variables and object variables.</caption>
    <program language="java">
    <input>
      int num;      // num has the value 0
      boolean boo;  // boo has the value false
      String s;     // s has the value null
	</input>
    </program> 
    <image width="70%" source="chptr02/default-values.png"/>
    </figure>  
<!--      It is possible to check whether or not a reference variable contains a reference to an actual object by checking 
      whether or not it contains this
      <term>null pointer</term>.
-->
</subsection>
<subsection>
<title>String Concatenation</title>
    <p>
      Once you have constructed a <c>String</c> object,
      you can use any of the methods shown in <xref ref="fig_stringuml">Figure</xref> on it.
<!--      
      As we already saw, we use dot notation to call one of the methods.
      Thus, we first mention the name of the object followed by a period (dot),
      followed by the name of the method.
      For example,
      the following statements print the lengths of our two strings:
    </p>
    <program language="java">
    <input>
    System.out.println(str.length());
    System.out.println(str2.length());
	</input>
    </program>
    <p>
-->    
      One of the most useful <c>String</c> method is the <c>concat(String)</c> method,
      which can be used to <em>concatenate</em> two strings.
      This method takes a <c>String</c> argument.
      And it returns a <c>String</c> that combines a <c>String</c> argument to the <c>String</c> that the method is called on.
      For example:
    </p>
    <program language="java">
    <input>
		String s1 = new String("George ");
		String s2 = new String("Washington");
		System.out.println(s1.concat(s2));
	</input>
    </program>
    <p>
      In this case,
      the <c>concat()</c> method adds the <c>String</c><em>s2</em>
      to the end of the <c>String</c><em>s1</em>.
      The result will be the <c>String</c>"George Washington".
    </p>
    <p>
      Because strings are so important, Java allows a number of shortcuts to be used when creating and concatenating strings.
      For example,
      you don't have to use <c>new String()</c> when creating a new string object.
      The following code will also work:
    </p>
    <program language="java">
    <input>
		String s1 = "George ";
		String s2 = "Washington";
	</input>
    </program>
    <p>
      Similarly, an easier way to concatenate two <c>String</c> objects is to use the plus sign (+), which serves as a
      <em>concatenation operator</em> in Java:
    </p>
    <program language="java">
    <input>
		System.out.println(s1 + s2);
	</input>
    </program>
</subsection>
<subsection>
<title>String Equality</title>
    <p>
      Another useful <c>String</c> method is the <c>equals()</c> method.
      This is a <c>boolean</c> method,
      which is used to compare two <c>String</c> objects.
      If both have the same characters,
      in the same order, it will return true.
      Otherwise it will return false.
      For example, consider the following code segment:
    </p>
    <program language="java">
    <input>
		String s1 = "Hello";
		String s2 = "Hello";
		String s3 = "hello";
	</input>
    </program>
    <p>
      In this case,
      the expression <c>s1.equals(s2)</c> will be true,
      but <c>s1.equals(s3)</c> will be false.
    </p>
    <p>
      It is important to note that the empty string is not the same as a
<c>String</c> variable that contains <c>null</c>. Executing the statements:
    </p>
    <program language="java">
    <input>
		String s1;                          // null
		String s2 = "";                     // empty string
		System.out.println(s1.equals(s2));  // System crash
    </input>
    </program>
    <p>
      will not only not print out <c>true</c>, it will cause the program to crash <mdash/> to terminate abnormally.
    </p>
    <p>  
      It is an error to use the method of a <c>String</c> variable,
      or any other object variable whose value is <c>null</c>.
      When the above code is executed,
      it will report a <term>null pointer exception</term>,
      one of the most common runtime errors.
      When you see that error message,
      it means that you were trying to use a <c>null</c> <mdash/> one that does not refer to any object.
     </p>
     <p>
      On the other hand,
      the empty string is a perfectly good <c>String</c> object which just happens to contain zero characters.
    </p>
    <p>
      <xref ref="fig-sillystr">Figure</xref>
      shows a program that uses string
      concatenation to create some silly sentences.
      The programs declares a number of string variables,
      named <c>s</c>, <c>s1</c>, and so on,
      and it instantiates a <c>String</c> object for each variable to refer to.
      It then prints out a top-five list using the concatenation operator to combine strings.
      Can you figure out what it prints without running it?
    </p>
        <listing xml:id="fig-sillystr">
      <caption>A program that prints silly string puns.</caption>
    <program language="java">
    <input>
public class StringPuns {
	public static void main(String args[]) {
		String s = new String("string");
		String s1 = s.concat(" puns.");
		System.out.println("Here are the top 5 " + s1);
		String s2 = "5. Hey baby, wanna ";
		String s3 = s + " along with me.";
		System.out.println(s2 + s3);
		System.out.println("4. I've got the world on a " + s + ".");
		String s4 = new String("two");
		String s5 = ". You have more class than a ";
		System.out.print(s4.length());
		System.out.println(s5 + s + " of pearls.");
		System.out.print("2. It is ");
		System.out.print(s.equals("string"));
		System.out.println(" that I am no " + s + " bean.");
		String s6 = " quintet.";
		System.out.println("1. These puns form a " + s + s6);
	} // main()
} //  StringPuns class
    </input>
    </program>
    </listing>


<p>Try running the program below.</p>

<activity label="stringPuns">
<statement><p>Run the following code. 
    Click on the "Show Code Lens" button and then the Next button to step through the code.</p></statement>
<program language="java" interactive="activecode"><input>
  public class StringPuns {
    public static void main(String args[]) {
      String s = new String("string");
      String s1 = s.concat(" puns.");
      System.out.println("Here are the top 5 " + s1);
      String s2 = "5. Hey baby, wanna ";
      String s3 = s + " along with me.";
      System.out.println(s2 + s3);
      System.out.println("4. I've got the world on a " + s + ".");
      String s4 = new String("two");
      String s5 = ". You have more class than a ";
      System.out.print(s4.length());
      System.out.println(s5 + s + " of pearls.");
      System.out.print("2. It is ");
      System.out.print(s.equals("string"));
      System.out.println(" that I am no " + s + " bean.");
      String s6 = " quintet.";
      System.out.println("1. These puns form a " + s + s6);
    } // main()
  } //  StringPuns class     
</input></program></activity>

<exercises>
<title>Self-Study Exercises</title>

  <exercise label="concatEx">
        <title>Fill-In, Concatenation</title>
  
        <statement>
          <p>
            When the following Java code fragment is executed, the output would be: <var/>
    <program language="java">
    <input>
    String s = "ing";
    System.out.println("s" + s + s + " k" + s + ".");
     </input>
    </program>
          </p>        
        </statement>
        <setup>
              <var>
                    <condition string="singing king.">
                          <feedback>
                                <p>Correct.</p>
                          </feedback>
                    </condition>
                    <condition string=".*">
                          <feedback>
                                <p>Incorrect. Did you forget the period?</p>
                          </feedback>
                    </condition>
              </var>
        </setup>
  </exercise>
  <solution>
    <p>singing king.</p>
  </solution>
</exercises>

</subsection>
</section>