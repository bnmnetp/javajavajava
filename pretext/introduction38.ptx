<section xml:id="ds-intro">
  <title>Introduction</title>
  <p>
    A <term>data structure</term>
        <idx><h>data structure</h></idx>
    is used to organize information that a computer can access and process easily and efficiently.
    You are already familiar with one type of data structure<mdash/>arrays,
    which we discussed in Chapter<nbsp/>9.
    If you remember,
    an array is an example of a data structure in which all of the data are of the same type or class and in which individual elements are accessed by their position
    (index or subscript).
    An array is an example of a <term>static structure</term>,
        <idx><h>static structure</h></idx>
    because its size is fixed for the duration of the program's execution.
    (This is a different meaning of <em>static</em>
    than the Java keyword <c>static</c>.)
  </p>
  <p>
    The <c>Vector</c>
        <idx><h>vector</h></idx>
    class from Chapter<nbsp/>9 is another example of a data structure.
    Like an array,
    individual vector elements are accessed by their position.
    However, unlike arrays, a vector is an example of a
    <term>dynamic structure</term>
        <idx><h>dynamic structure</h></idx>
    <mdash/>that is,
    one that can grow and shrink during a program's execution.
  </p>
  <p>
    These are only two of the many data structures developed by computer scientists.
    For more advanced problems,
    it is often necessary to develop specialized structures to store and manipulate information.
    Some of these structures<mdash/>linked lists,
    stacks, queues, binary trees,
    hash tables<mdash/>have become classic objects of study in computer science.
  </p>
  <p>
    This chapter describes how to implement a linked list and how to use inheritance to extend the list to implement the stack and queue structures.
    Then the Java Collections Framework implementation of numerous data structures in the <c>java.util</c> package will be described.
    The data structure classes in this library make use of a new Java construct,
    called <em>generic types</em>.
    Finally, the binary tree data structure that is used in the Java Collections Framework will be studied briefly.
  </p>
</section>