<section xml:id="loop-summary">
  <title>Principles of Loop Design</title>
  <subsection><title>Loop Summary</title>
  <p>
    Before moving on, it will be useful to summarize the main principles
        <idx><h>loop design principles</h></idx>
    involved in correctly constructing a loop.
    <ul>
      <li>
        <p>
          A   <idx><h>counting loop</h></idx> <term>counting    
          loop   </term> can be used whenever you know in advance exactly how many iterations are needed.
          Java's    <term>for statement   </term> is an appropriate structure for coding a counting loop.
        </p>
      </li>
      <li>
        <p>
          A    <term>while structure   </term>
            <idx><h>while structure</h></idx>
          should be used when the problem suggests that the loop body may be skipped entirely.
          Java's    <term>while statement   </term>
          is specially designed for the while structure.
        </p>
      </li>
      <li>
        <p>
          A    <term>do-while structure   </term>
            <idx><h>do-while structure</h></idx>
          should be used only when a loop requires one or more iterations.
          Java's    <term>do-while statement   </term>
          is specially designed for the do-while structure.
        </p>
      </li>
      <li>
        <p>
          The    <term>loop variable   </term> is used to specify the
             <term>loop-entry condition   </term>.
          It must be initialized to an appropriate initial value,
          and it must be updated on each iteration of the loop.
        </p>
      </li>
      <li>
        <p>
          A loop's    <term>bound
            <idx><h>bound</h></idx>
             </term> may be a    <term>count   </term>,
          a    <term>sentinel   </term>, or, more generally,
          a    <term>conditional bound   </term>.
          It must be correctly specified in the loop-entry expression,
          and progress toward the bound must be made in the    <term>updater   </term>.
        </p>
      </li>
      <li>
        <p>
          An    <term>infinite
            <idx><h>infinite loop</h></idx>
          loop   </term> may result if the initializer,
          loop-entry expression, or updater expression is not correctly specified.
        </p>
      </li>
    </ul>
  </p>
  <p>
    The loop types are also summarized in the table below.
  </p>
  <table>
    <title>A summary of the design decisions required when coding a loop</title>
    <tabular>
      <row bottom="minor">
      </row>
      <row bottom="minor">
        <cell>Use</cell>
        <cell>If</cell>
        <cell>Java Statement</cell>
      </row>
      <row bottom="minor">
        <cell>   Counting loop   </cell>
        <cell>   Number of iterations known in advance   </cell>
        <cell>   for   </cell>
      </row>
      <row>
        <cell>   While structure   </cell>
        <cell>   Number of iterations not known   </cell>
        <cell>   while       </cell>
      </row>
      <row bottom="minor">
        <cell></cell>
        <cell>   Loop may not be entered at all   </cell>
        <cell></cell>
      </row>
      <row>
        <cell>   Do-while structure   </cell>
        <cell>   Number of iterations not known   </cell>
        <cell>   do-while    </cell>
      </row>
      <row bottom="minor">
        <cell></cell>
        <cell>   Loop must be entered at least once   </cell>
        <cell></cell>
      </row>
     
    </tabular>
  
  </table>

  <exercises><title>Self-Study Exercise</title>
   
    <exercise label="loop-choice"><title>Loop Choices</title>
    <statement>
  <p>For each of the following problems,
          decide whether a counting loop structure,
          a <c>while</c> structure,
          or a <c>do-while</c> structure should be used,
          and write a pseudocode algorithm.
          <ul>
            <li>
              <p>
                Print the names of all visitors to your Web site.
              </p>
            </li>
            <li>
              <p>
                Validate that a number input by the user is positive.
              </p>
            </li>
            <li>
              <p>
                Change all the backslashes (<m>\backslash</m>) in a Windows Web page address to the slashes (/) used in a Unix Web page address.
              </p>
            </li>
            <li>
              <p>
                Find the car with the best miles-per-gallon ratio among the cars in the
                   <em>Consumer Reports   </em> database.
              </p>
            </li>
          </ul>
  </p></statement>
  <solution>
    <p>
      For each of the following problems,
      decide whether a counting loop structure,
      a <c>while</c> structure,
      or a
<c>do-while</c> structure should be used,
      and write a pseudocode algorithm. 
    
  <ol>
  <li>
    <p>
      Printing the names of all the visitors to a Web site could use a counting loop because the exact number of visitors is known.
<program language="java"><input>
for each name in the visitor's log
   print the name
</input></program>
    </p>
  </li>
  <li>
    <p>
      Validating that a user has entered a positive number requires a <c>do-while</c> structure in which you repeatedly read a number and validate it.
<program language="java"><input>
do
  read a number
  if number is invalid, 
     print error message
while number is invalid
</input></program>
    </p>
  </li>
  <li>
    <p>
      Changing all the backslashes (<m>\backslash</m>) in a Windows Web page address,
      to the slashes (/) used in a Unix Web page address.
<program language="java"><input>
for each character in the Web page address
   if it is a backslash 
      replace it with slash
</input></program>
    </p>
  </li>
  <li>
    <p>
      Finding the largest in a list of numbers requires a <c>while</c> loop to guard against an empty list.
<program language="java"><input>
initialize maxMPG to smallest possible number
while there are more cars in the database
   if current car's MPG is greater than maxMPG
      replace maxMPG with it
</input></program>
    </p>
  </li></ol></p>
  </solution>
  </exercise>
  </exercises>
</subsection>
</section>