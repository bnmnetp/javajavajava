<section xml:id="sec_systemclass">
  <title>From the Java Library: System and
  PrintStream</title>
  <subsection><title></title>
  <p>
    Java comes with a library of classes, organized into packages,  that are used to perform common tasks. In this
    and similar sections in subsequent chapters, we will feature some of the most useful built-in classes.
    In this section we introduce the <c>System</c> and <c>PrintStream</c> classes,
    which are used for printing a program's output.
  </p>
  <p>
    Java programs need to be able to accept input and to display output.
    Deciding how a program will handle input and output (I/O) is part of designing its
    <em>user interface</em>,
    a topic we take up in detail in Chapter 4.
  </p>
  <p>
    The simplest type of user interface is a
    <em>command-line interface</em>,
    in which input is taken from the command line through the keyboard,
    and output is displayed on the console.
    Some Java applications, like <c>HelloWorld</c> (<xref ref="list-helloworld2">Listing</xref>),  use this type of interface.
  </p>
  <p>
    In contrast, a
    <em>Graphical User Interface (GUI)</em>,
    uses buttons, text fields, canvases,
    and other graphical components for input and output.
    The <c>HelloWorldCanvas</c> program is an example of a GUI.
  </p>
  <p>
    This section describes how Java handles simple console output.
  </p>
  <p>
    In Java, any source or destination for I/O is considered a
    <em>stream</em> of bytes or characters.
    To perform output, we insert bytes or characters into the stream.
    To perform input, we extract bytes or characters from the stream.
    Even characters entered at a keyboard,
    if considered as a sequence of keystrokes,
    can be represented as a stream.
  </p>
  <p>
    There are no I/O commands or keywords in the Java language.
    Instead, I/O is handled through methods that belong to classes contained in the <c>java.io</c> package.
        <idx><h>java.io package</h></idx>
    We have already seen how the output method <c>println()</c> is used to output a string to the console.
    For example,
    the following <c>println()</c> statement
  </p>
    <program language="java"><input>
    System.out.println("Hello, World");
    </input></program>
  <p>
    prints the message
    <q>Hello, World</q>
    on the Java console.
    Let's now examine this statement more carefully to see how it makes use of the Java I/O classes.
  </p>
  <p>
    The <c>java.io.PrintStream</c> class is Java's printing expert,
    so to speak.
    It contains a variety of <c>print()</c> and <c>println()</c> methods that 
    can be used to print all of the various types of data we find in a Java program.
    A partial definition of <c>PrintStream</c> is shown in <xref ref="fig_printstreamUML">Figure</xref>.
    Note that in this case the <c>PrintStream</c> class has no attributes, just methods.
  </p>
  <p>
  <figure xml:id="fig_printstreamUML">
   <caption>A UML class diagram of the <c>PrintStream</c> class.</caption>
   <image width="40%" source="chptr01/printstr.png"/>
  </figure>
  </p>
  <p>
    Because the various <c>print()</c> and <c>println()</c> methods are instance methods of a <c>PrintStream</c> object,
    we can only use them by finding a <c>PrintStream</c> object and
    <q>telling</q>
    it to print data for us.
    As shown in <xref ref="fig_systemUML">Figure</xref>, Java's <c>java.lang.System</c> class contains two public (+)
     <c>PrintStream</c> objects, <c>System.out</c> and <c>System.err</c>.  
  </p>
  <p>
  <figure xml:id="fig_systemUML">
   <caption>A UML class diagram of the <c>PrintStream</c> class.</caption>
   <image width="40%" source="chptr01/systemum.png"/>
  </figure>
  </p>
  <p>
    As its name suggests, the <c>System.err</c> stream is used primarily for error messages,
    whereas the <c>System.out</c> stream is used for other printed output.
    Similarly, as its name suggests,
    the <c>System.in</c> object can be used to handle input,
    which will be covered in Chapter<nbsp/>2.
  </p>
  <p>
    The only difference between the <c>print()</c> and <c>println()</c> methods 
    is that <c>println()</c> will also print a carriage return and line feed after printing its data,
    thereby allowing subsequent output to be printed on a new line.
    For example, the following statements
  </p>
    <program language="java"><input>
    System.out.print("hello");
    System.out.println("hello again");
    System.out.println("goodbye");
    </input></program>
  <p>
    would produce the following output:
  </p>
    <c>
    hellohello again
    goodbye
    </c>
  <p>
    Now that we know how to use Java's printing expert, let's use it to
    <q>sing</q>
    a version of
    <q>Old MacDonald Had a Farm.</q>
    As you might guess,
    this program will simply consist of a sequence of <c>System.out.println()</c> statements each of which prints a line of the verse.
    The complete program is shown in <xref ref="fig_oldmac">Listing</xref>. You can run the program in the self-study exercises below.
  </p>
  <listing xml:id="fig_oldmac">
    <caption>The <c>OldMacDonald.java</c> class.</caption>
    <program language="java"><input>
    public class OldMacDonald
    {
       public static void main(String args[])   // Main method
       {
			System.out.println("Old MacDonald had a farm");
			System.out.println("E I E I O.");
			System.out.println("And on his farm he had a duck.");
			System.out.println("E I E I O.");
			System.out.println("With a quack quack here.");
			System.out.println("And a quack quack there.");
			System.out.println("Here a quack, there a quack,");
			System.out.println("Everywhere a quack quack.");
			System.out.println("Old MacDonald had a farm");
			System.out.println("E I E I O.");
       }  // End of main
    }  // End of OldMacDonald
    </input></program>
  </listing>


  
 
  
  <p>
    This example illustrates the usefulness of the Java class library.
    If there's a particular task we want to perform,
    one of the first things we should ask is whether there is already an
    <q>expert</q>
    in Java's class library that performs that task.
    If so, we can use methods provided by the expert to perform that particular task.
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: Using the Java Library</title>
    <p>
      Learning how to use classes and objects from the Java class library is an important part of object-oriented programming in Java.
    </p>
  </principle>
</subsection>
<exercises xml:id="sub_selfstudy">

<title>Self-Study Exercises</title>

<exercise label="oldmacdonald">
  <statement><p>Run the Program below. Modify the <c>OldMacDonald</c> class to
    <q>sing</q>
    one more verse of the song.</p></statement>

<program language="java" interactive="activecode"><input>
  public class OldMacDonald
  {
     public static void main(String args[])   // Main method
     {
      System.out.println("Old MacDonald had a farm");
      System.out.println("E I E I O.");
      System.out.println("And on his farm he had a duck.");
      System.out.println("E I E I O.");
      System.out.println("With a quack quack here.");
      System.out.println("And a quack quack there.");
      System.out.println("Here a quack, there a quack,");
      System.out.println("Everywhere a quack quack.");
      System.out.println("Old MacDonald had a farm");
      System.out.println("E I E I O.");
     }  // End of main
  }  // End of OldMacDonald
  </input></program>
</exercise>
  
       

  <exercise label="happyface">
    <statement><p>Complete and run the program below to print out <pre>
            **********
            * **  ** * 
            *   **   *
            * *    * * 
            *  ****  * 
            *********  
    </pre>
    </p></statement>
 
  <program language="java" interactive="activecode"><input>
    public class Pattern
    {
       public static void main(String args[])   // Main method
       {
          // Use System.out.println(""); to print out the pattern above



       }  // End of main
    }  // End of Class
    </input></program>
</exercise>

</exercises>

</section>