<section xml:id="casestudy-the-gameof-pong">
  <title>CASE STUDY: The Game of Pong</title>
  <introduction>
    <p>
      The game of Pong was one of the first computer video games and was all the rage in the 1970s.
      The game consists of a ball that moves horizontally and vertically within a rectangular region,
      and a single paddle,
      which is located at the right edge of the region that can be moved up and down by the user.
      When the ball hits the top, left,
      or bottom walls or the paddle,
      it bounces off in the opposite direction.
      If the ball misses the paddle,
      it passes through the right wall and re-emerges at the left wall.
      Each time the ball bounces off a wall or paddle, it emits a pong sound.
    </p>
  </introduction>
  <subsection xml:id="fig-pongscreen">
    <title>A Multithreaded Design</title>
    <p>
      Let's develop a multithreaded GUI to play the game of Pong.
      <image width="73%" source="chptr14/pongscreensmall.png"/> Figure<nbsp/>14.29 shows how the game's GUI should appear.
      There are three objects involved in this program:
      the frame, which serves as the GUI, the ball,
      which is represented as a blue circle in the program, and the paddle,
      which is represented by a red rectangle along the right edge of the frame.
      What cannot be seen in this figure is that the ball moves autonomously,
      bouncing off the walls and paddle.
      The paddle's motion is controlled by the user by pressing the up- and down-arrow keys on the keyboard.
    </p>
    <p>
      We will develop class definitions for the ball, paddle,
      and the frame.
      Following the example of our dot-drawing program earlier in the Chapter,
      we will employ two independent threads,
      one for the GUI and one for the ball.
      Because the user will control the movements of the paddle,
      the frame will employ a listener object to listen for and respond to the user's key presses.
    </p>
    <p>
      <xref ref="fig-pongdesign">Figure</xref>
      provides an overview of the object-oriented design of the Pong program.
      The <c>PongFrame</c> class is the main class.
      It uses instances of the <c>Ball</c> and <c>Paddle</c> classes. <c>PongFrame</c> is a subclass of <c>JFrame</c> and
    </p>
    <figure xml:id="fig-pongdesign">
      <caption>Design of the Pong program.</caption>
      <image width="73%" source="chptr14/pongdesign-sm.png"/>
    </figure>
    <p>
      implements the <c>KeyListener</c> interface.
      This is another of the several event handlers provided in the <c>java.awt</c> library.
      This one handles <c>KeyEvent</c> s and the <c>KeyListener</c> interface consists of three abstract methods: <c>keyPressed()</c>, <c>keyTyped()</c>, and <c>keyReleased()</c>, all of which are associated with the act of pressing a key on the keyboard.
      All three of these methods are implemented in the <c>PongFrame</c> class.
      A key-typed event occurs when a key is pressed down.
      A key-release event occurs when a key that has been pressed down is released.
      A key-press event is a combination of both of these events.
    </p>
    <p>
      The <c>Ball</c> class is a <c>Thread</c> subclass.
      Its data and methods are designed mainly to keep track of its motion within the program's drawing panel.
      The design strategy employed here leaves the drawing of the ball up to the frame.
      The <c>Ball</c> thread itself just handles the movement within the program's drawing panel.
      Note that the <c>Ball()</c> constructor takes a reference to the <c>PongFrame</c>. As we will see,
      the <c>Ball</c> uses this reference to set the dimensions of the frame's drawing panel.
      Also, as the <c>Ball</c> moves,
      it will repeatedly call the frame's <c>repaint()</c> method to draw the ball.
    </p>
    <p>
      The <c>Paddle</c> class is responsible for moving the paddle up and down along the drawing panel's right edge.
      Its public methods, <c>moveUP()</c> and <c>moveDown()</c>, will be called by the frame in response to the user pressing the up and down arrows on the keyboard.
      Because the frame needs to know where to draw the paddle,
      the paddle class contains several public methods, <c>getX()</c>, <c>getY()</c>, and <c>resetLocation()</c>, whose tasks are to report the paddle's location or to adjust its location in case the frame is resized.
    </p>
    <p>
      The <c>PongFrame</c> controls the overall activity of the program.
      Note in particular its <c>ballHitsPaddle()</c> method.
      This method has the task of determining when the ball and paddle come in contact as the ball continuously moves around in the frame's drawing panel.
      As in the <c>ThreadedDotty</c> example earlier in the chapter,
      it is necessary for the <c>Ball</c> and the the frame to be implemented as separated threads so that the frame can be responsive to the user's key presses.
    </p>
  </subsection>
  <subsection>
    <title>Implementation of the Pong Program</title>
    <p>
      We begin our discussion of the program's implementation with the <c>Paddle</c> class implementation (Fig.
      <xref ref="fig-paddle"></xref>).
    </p>
    <figure xml:id="fig-paddle">
      <caption>Definition of the <c>Paddle</c> class.</caption>
      
 <program language="java"><input>
public class Paddle {
    public static final int HEIGHT = 50;  // Paddle size
    public static final int WIDTH = 10;
    private static final int DELTA = HEIGHT/2; // Move size
    private static final int BORDER = 0;
    private int gameAreaHeight;
    private int locationX, locationY;
    private PongFrame frame;
    public Paddle (PongFrame f) {
       frame = f;
       gameAreaHeight  = f.getHeight();
       locationX = f.getWidth()-WIDTH;
       locationY = gameAreaHeight/2;
    } // Paddle()
    public void resetLocation() {
       gameAreaHeight  = frame.getHeight();
       locationX = frame.getWidth()-WIDTH;
    }
    public int getX() {
         return locationX;
    }
    public int getY() {
         return locationY;
    }
    public void moveUp () {
       if (locationY > BORDER )
           locationY -= DELTA;
    } // moveUp()
    public void moveDown() {
       if (locationY + HEIGHT &lt; gameAreaHeight - BORDER)
           locationY += DELTA;
    } // moveDown()} // Paddle
 </input></program>
    </figure>
    <p>
      Class constants, <c>HEIGHT</c> and <c>WIDTH</c> are used to define the size of the <c>Paddle</c>, which is represented on the frame as a simple rectangle.
      The frame will use the
<c>Graphics.fillRect()</c> method to draw the paddle:
    </p>
    <p>
      
    </p>
 <program language="java"><input>
g.fillRect(pad.getX(),pad.getY(),Paddle.WIDTH,Paddle.HEIGHT);
 </input></program>
    <p>
      Note how the frame uses the paddle's <c>getX()</c> and <c>getY()</c> methods to get the paddle's current location.
    </p>
    <p>
      The class constants <c>DELTA</c> and <c>BORDER</c> are used to control the paddle's movement. <c>DELTA</c> represents the number of pixels that the paddle moves on each move up or down,
      and <c>BORDER</c> is used with <c>gameAreaHeight</c> to keep the paddle within the drawing area.
      The <c>moveUp()</c> and <c>moveDown()</c> methods are called by the frame each time the user presses an up- or down-arrow key.
      They simply change the paddle's location by <c>DELTA</c> pixels up or down.
    </p>
    <p>
      The <c>Ball</c> class (Fig.
      <xref ref="fig-ball"></xref>) uses the class constant
<c>SIZE</c> to determine the size of the oval that represents the ball,
      drawn by the frame as follows:
    </p>
 <program language="java"><input>
g.fillOval(ball.getX(),ball.getY(),ball.SIZE,ball.SIZE);
 </input></program>
    <p>
      As with the paddle,
      the frame uses the ball's <c>getX()</c> and <c>getY()</c> method to determine the ball's current location.
    </p>
    <figure xml:id="fig-ball">
      <caption>Definition of the <c>Ball</c> class.</caption>
      
 <program language="java"><input>
import javax.swing.*;
import java.awt.Toolkit;
public class Ball extends Thread {
  public static final int SIZE = 10;   // Diameter of the ball
  private PongFrame frame;           // Reference to the frame
  private int topWall, bottomWall, leftWall, rightWall;  // Boundaries
  private int locationX, locationY;     // Current location of the ball
  private int directionX = 1, directionY = 1; //x- and y-direction (1 or -1)
  private Toolkit kit = Toolkit.getDefaultToolkit(); //For beep() method
  public Ball(PongFrame f) {
    frame = f;
    locationX = leftWall + 1;                // Set initial location
    locationY = bottomWall/2;
  } // Ball()
  public int getX() {
    return locationX;
  } // getX()
  public int getY() {
    return locationY;
  } // getY()
  public void move() {
    rightWall = frame.getWidth() - SIZE;   // Define bouncing region
    leftWall = topWall = 0;                 // And location of walls
    bottomWall = frame.getHeight() - SIZE;
    locationX = locationX + directionX; // Calculate a new location
    locationY = locationY + directionY;
    if (frame.ballHitsPaddle()){
      directionX = -1;   //  move toward left wall
      kit.beep();
    } //if ball hits paddle
    if (locationX &lt;= leftWall){
      directionX = + 1;   //  move toward right wall
      kit.beep();
    } //if ball hits left wall
    if (locationY + SIZE >= bottomWall || locationY &lt;= topWall){
      directionY = -directionY;      //  reverse direction
      kit.beep();
    } //if ball hits top or bottom walls
    if (locationX  >= rightWall + SIZE) {
      locationX = leftWall + 1;   // jump back to left wall
    } //if ball goes through right wall
  } // move()
  public void run() {
    while (true) {
      move();                // Move
      frame.repaint();
      try {  sleep(15);
      } catch (InterruptedException e) {}
    } // while
  } // run()} // Ball
 </input></program>
    </figure>
    <p>
      Unlike the paddle, however, the ball moves autonomously.
      Its <c>run()</c> method,
      which is inherited from its <c>Thread</c> superclass,
      repeatedly moves the ball,
      draws the ball, and then sleeps for a brief interval
      (to slow down the speed of the ball's apparent motion).
      The
<c>run()</c> method itself is quite simple because it consists of a short loop.
      We will deal with the details of how the ball is painted on the frame when we discuss the frame itself.
    </p>
    <p>
      The most complex method in the <c>Ball</c> class is the <c>move()</c> method.
      This is the method that controls the ball's movement within the boundaries of the frame's drawing area.
      This method begins by moving the ball by one pixel left,
      right, up,
      or down by adjusting the values of its <c>locationX</c> and <c>locationY</c> coordinates:
    </p>
 <program language="java"><input>
locationX = locationX + directionX; // Calculate location
locationY = locationY + directionY;
 </input></program>
    <p>
      The <c>directionX</c> and <c>directionY</c> variables are set to either <m>+1</m> or <m>-1</m>,
      depending on whether the ball is moving left or right,
      up or down.
      After the ball is moved,
      the method uses a sequence of <c>if</c> statements to check whether the ball is touching one of the walls or the paddle.
      If the ball is in contact with the top,
      left, or bottom walls or the paddle,
      its direction is changed by reversing the value of the <c>directionX</c> or <c>directionY</c> variable.
      The direction changes depend on whether the ball has touched a horizontal or vertical wall.
      When the ball touches the right wall, having missed the paddle,
      it passes through the right wall and re-emerges from the left wall going in the same direction.
    </p>
    <p>
      Note how the frame method, <c>ballHitsPaddle()</c> is used to determine whether the ball has hit the paddle.
      This is necessary because only the frame knows the locations of both the ball and the paddle.
    </p>
  </subsection>
  <subsection>
    <title>The <c>KeyListener</c>Interface</title>
    <p>
      The implementation of the <c>PongFrame</c> class is shown in <xref ref="fig-pongapplet">figure</xref>.
      The frame's main task is to manage the drawing of the ball and paddle and to handle the user's key presses.
      Handling keyboard events is a simple matter of implementing the <c>KeyListener</c> interface.
      This works in much the same way as the <c>ActionListener</c> interface,
      which is used to handle button clicks and other <c>ActionEvent</c> s.
      Whenever a key is pressed,
      it generates
<c>KeyEvent</c> s, which are passed to the appropriate methods of the
<c>KeyListener</c> interface.
    </p>
    <figure xml:id="fig-pongapplet">
      <caption>Definition of the <c>PongFrame</c> class.</caption>
 <program language="java"><input>
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
public class PongFrame extends JFrame implements KeyListener {
     private Ball ball;
     private Paddle pad;
     public PongFrame() {
         setBackground(Color.white);
         addKeyListener(this);
         pad = new Paddle(this);  // Create the paddle
         ball = new Ball(this);      // Create the ball
         ball.start();
     } // PongFrame()
     public void paint (Graphics g ) {
          g.setColor(getBackground());   // Erase the drawing area
          g.fillRect(0,0,getWidth(),getHeight());
          g.setColor(Color.blue);       // Paint the ball
          g.fillOval(ball.getX(),ball.getY(),ball.SIZE,ball.SIZE);
          pad.resetLocation();          // Paint the paddle
          g.setColor(Color.red);
          g.fillRect(pad.getX(),pad.getY(),Paddle.WIDTH,Paddle.HEIGHT);
     } // paint()
      public boolean ballHitsPaddle() {
          return ball.getX() + Ball.SIZE >= pad.getX()
             &amp;&amp; ball.getY() >= pad.getY()
             &amp;&amp; ball.getY() &lt;= pad.getY() + Paddle.HEIGHT;
     } // ballHitsPaddle()
     public void keyPressed( KeyEvent e) { // Check for arrow keys
         int keyCode = e.getKeyCode();
         if (keyCode == e.VK_UP)            // Up arrow
             pad.moveUp();
         else if (keyCode == e.VK_DOWN)     // Down arrow
             pad.moveDown();
     } // keyReleased()
     public void keyTyped(KeyEvent e) {}     // Unused
     public void keyReleased( KeyEvent e) {} // Unused
     public static void main(String[] args) {
       PongFrame f = new PongFrame();
       f.setSize(400,400);
       f.setVisible(true);} // PongFrame
 </input></program>
    </figure>
    <p>
      There's a bit of redundancy in the <c>KeyListener</c> interface in the sense that a single key press and release generates three <c>KeyEvent</c> s: A key-typed event,
      when the key is pressed, a key-released event, when the key is released,
      and a key-pressed event, when the key is pressed and released.
      While it is important for some programs to be able to distinguish between a key-typed and key-released event,
      for this program,
      we will take action whenever one of the arrow keys is pressed
      (typed and released).
      Therefore, we implement the <c>keyPressed()</c> method as follows:
    </p>
 <program language="java"><input>
public void keyPressed( KeyEvent e) { // Check arrow keys
   int keyCode = e.getKeyCode();
   if (keyCode == e.VK_UP)            // Up arrow
      pad.moveUp();
   else if (keyCode == e.VK_DOWN)     // Down arrow
      pad.moveDown();} // keyReleased()
 </input></program>
    <p>
      Each key on the keyboard has a unique code that identifies the key.
      The key's code is gotten from the <c>KeyEvent</c> object by means of the <c>getKeyCode()</c> method.
      Then it is compared with the codes for the up-arrow and down-arrow keys,
      which are implemented as class constants, <c>VK_UP</c> and <c>VK_DOWN</c>, in the <c>KeyEvent</c> class.
      If either of those keys were typed,
      the appropriate paddle method, <c>moveUP()</c> or <c>moveDown()</c>, is called.
    </p>
    <p>
      Note that even though we are not using the <c>keyPressed()</c> and <c>keyReleased()</c> methods in this program,
      it is still necessary to provide implementations for these methods in the frame.
      In order to implement an interface,
      such as the <c>KeyListener</c> interface,
      you must implement <em>all</em>
      the abstract methods in the interface.
      That is why we provide trivial implementations of both the <c>keyPressed()</c> and <c>keyReleased()</c> methods.
    </p>
  </subsection>
  <subsection xml:id="self-study-exerciseT34">
    <title>Animating the Bouncing Ball</title>
    <p>
      Computer animation is accomplished by repeatedly drawing, erasing,
      and re-drawing an object at different locations on the drawing panel.
      The frame's <c>paint()</c> method is used for drawing the ball and the paddle at their current locations.
      The <c>paint()</c> method is never called directly.
      Rather, it is called automatically after the constructor method <c>PongFrame()</c>, when the program is started.
      It is then invoked indirectly by the program by calling the <c>repaint()</c> method,
      which is called in the <c>run()</c> method of the <c>Ball</c> class.
      The reason that <c>paint()</c> is called indirectly is because Java needs to pass it the frame's current <c>Graphics</c> object.
      Recall that in Java all drawing is done using a <c>Graphics</c> object.
    </p>
    <p>
      In order to animate the bouncing ball,
      we first erase the current image of the ball,
      then we draw the ball in its new location.
      We also draw the paddle in its current location.
      These steps are carried out in the frame's <c>paint()</c> method.
      First, the drawing area is cleared by painting its rectangle in the background color.
      Then the ball and paddle are painted at their current locations.
      Note that before painting the paddle,
      we first call its <c>resetLocation()</c> method.
      This causes the paddle to be relocated in case the user has resized the frame's drawing area.
      There is no need to do this for the ball because the ball's drawing area is updated within the <c>Ball.move()</c> method every time the ball is moved.
    </p>
    <p>
      One problem with computer animations of this sort is that the repeated  drawing and erasing of the drawing area can cause the screen to flicker.
      In some drawing environments a technique known as
      <term>double buffering</term>
      is used to reduce the flicker.
      In double buffering, an invisible, off-screen,
      buffer is used for the actual drawing operations and it is then used to replace the visible image all at once when the drawing is done.
      Fortunately, Java's Swing components,
      including <c>JApplet</c> and <c>JFrame</c>, perform an automatic form of double buffering,
      so we needn't worry about it.
      Some graphics environments,
      including Java's AWT environment,
      do not perform double buffering automatically,
      in which case the program itself must carry it out.
    </p>
    <p>
      Like the other examples in this chapter,
      the game of Pong provides a simple illustration of how threads are used to coordinate concurrent actions in a computer program.
      As most computer game fans will realize,
      most modern interactive computer games utilize a multithreaded design.
      The use of threads allows our interactive programs to achieve a responsiveness and sophistication that is not possible in single-threaded programs.
      One of the great advantages of Java is that it simplifies the use of threads,
      thereby making thread programming accessible to programmers.
      However, one of the lessons that should be drawn from this chapter is that multithreaded programs must be carefully designed in order to work effectively.
    </p>
    </subsection>
    <subsection><title>Self-Study Exercise</title>
      <p>
      <ol>
        <li>
          <p>
            Modify the <c>PongFrame</c> program so that it contains a second ball that starts at a 
            different location from the first ball.
          </p>
        </li>
      </ol>
    </p>
  </subsection>
</section>