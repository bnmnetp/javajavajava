<section xml:id="example-computing-averages">
  <title>Example: Computing Averages</title>
  <p>
        <idx><h>Compute Average Example</h></idx>
    Suppose you want to compute the average of your exam grades in a  course.
    Grades, represented as real numbers,
    will be input from the keyboard using our
<c>KeyboardReader</c> class.
    To signify the end of the list,
    we will use a sentinel value<mdash/>9999 or <m>-1</m> or some other value that won't be confused with a legitimate grade.
    Because we do not know exactly how many grades will be entered,
    we will use a noncounting loop in this algorithm.
    Because there could be no grades to average,
    we will use a
<c>while</c> structure so it is possible to skip the loop entirely in the case that there are no grades to average.
  </p>
  <p>
    The algorithm should add each grade to a running total,
    keeping track  of the number of grades entered.
    Thus, this algorithm requires two variables:
    one to keep track of the running total and the other to keep track of the count.
    Both should be initialized to 0.
    After the last grade has been entered,
    the total should be divided by the count to give the average.
    In pseudocode, the algorithm for this problem is as follows:
  </p>
 <program language="java"><input>
initialize runningTotal to 0         // Initialize
initialize count to 0
prompt and read the first grade      // Priming read
while the grade entered is not 9999 {// Sentinel test
    add it to the runningTotal
    add 1 to the count
    prompt and read the next grade   // Update}
if (count > 0)           // Guard against divide by 0
    divide runningTotal by count
output the average as the result
 </input></program>
  <p>
    Note that in this problem our loop variable, <c>grade</c>,  is read before the loop test is made.
    This is known as a <term>priming read</term>.
    It is necessary in this case,
    because the loop test depends on the value that is read.
    Within the loop's body, the updater reads the next value for grade.
    This is a standard convention for coding <c>while</c> structures that involve input,
    as this problem does.
    Note also that we must make sure that
<c>count</c> is not 0 before we attempt to compute the average because dividing by 0 would cause a divide-by-zero error.
  </p>
  <p>
    Translating the pseudocode algorithm into Java raises several issues.
    Suppose we store each grade that is input in a <c>double</c> variable named <c>grade</c>. The loop will terminate when <c>grade</c> equals 9999,
    so its entry condition will be <c>(grade != 9999)</c>. Because this condition uses <c>grade</c>, it is crucial that the <c>grade</c> variable be initialized before the bound test is made.
    This requires a priming read.
    By reading the first value of <c>grade</c> before the loop entry condition is tested,
    ensures that the loop will be skipped if the user happens to enter the sentinel (9999) on the very first prompt.
    In addition to reading the first exam score,
    we must initialize the variables used for the running total and the counter.
    Thus, for our initialization step,
    we get the following code: 
  </p>
 <program language="java"><input>
double runningTotal = 0;
int count = 0;
reader.prompt("Input a grade (e.g., 85.3) " +
      "or 9999 to indicate the end of the list >> ");
double grade =
     reader.getKeyboardDouble(); // Priming input
 </input></program>
  <p>
    Within the body of the loop we must add the grade to the running total and increment the counter.
    Since these variables are not tested in the loop entry condition,
    they will not affect the loop control.
    Our loop updater in this case must read the next grade.
    Placing the updater statement at the end of the  loop body will ensure that the loop terminates immediately after the user enters the sentinel value:
  </p>
 <program language="java"><input>
while (grade != 9999) {    // Loop test: sentinel
  runningTotal += grade;
  count++;
  reader.prompt("Input a grade (e.g., 85.3) " +
      "or 9999 to indicate the end of the list >> ");
  grade = reader.getKeyboardDouble(); // Update:input
} // while
 </input></program>
  <p>
    You can see that it is somewhat redundant to repeat the same statements needed to do the initializating and the updating of the <c>grade</c> variable.
    A better design would be to encapsulate  these into a method and then call the method both before and within the loop.
    The method should take care of prompting the user, reading the input,
    converting it to <c>double</c>, and returning the input value.
    The method doesn't require a parameter:
  </p>
 <program language="java"><input>
private double promptAndRead() {
  reader.prompt("Input a grade (e.g., 85.3) " +
     "or 9999 to indicate the end of the list >> ");
  double grade = reader.getKeyboardDouble();
                          // Confirm input
  System.out.println("You input " + grade + "\n");
  return grade;
}
 </input></program>
  <p>
    Note that we have declared this as a <c>private</c> method.
    It will be used to help us perform our task but won't be available to other objects.
    Such private methods are frequently called
    <term>helper methods</term>.
  </p>
  <p>
    This is a much more modular design.
    In addition to cutting down on redundancy in our code,
    it makes the program easier to maintain.
    For example,
    there is only one statement to change if we decide to change the prompt message.
    It also makes the program easier to debug.
    Input errors are now localized to the <c>promptAndRead()</c> method.
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: Modularity</title>
    <p>
      Encapsulating code in a method is a good way to avoid redundancy in a program.
    </p>
  </principle>
  <principle>
    <title>DEBUGGING TIP: Localization</title>
    <p>
      Encapsulating code in a method removes the need to have the same code at several locations in a program.
      By localizing the code in this way,
      you make it easier to modify and debug.
    </p>
  </principle>
  <p>
    Another advantage of encapsulating the input task in a separate method is that it simplifies the task of calculating the average.
    This task should also be organized into a separate method:
  </p>
 <program language="java"><input>
public double inputAndAverageGrades() {
  double runningTotal = 0;
  int count = 0;
  double grade = promptAndRead();// Priming initializer
  while (grade != 9999) {      // Loop test: sentinel
    runningTotal += grade;
    count++;
    grade = promptAndRead();// Update: get next grade
  } // while
  if (count > 0)      // Guard against divide-by-zero
    return runningTotal / count;// Return the average
  else
    return 0;         // Special (error) return value
  }
 </input></program>
  <p>
    Note that we have declared this as a <c>public</c> method.
    This will be the method you call to calculate your course average.
  </p>
  <p>
    Because we have decomposed the problem into its subtasks,
    each subtask  is short and simple,
    making it easier to read and understand.
    As we saw in the checkerboard example, the use of small,
    clearly-focused methods is a desireable aspect of designing a program.
  </p>

  <activity label="average1"><title>Average</title><statement>
  <p>
    The complete <c>Average.java</c> application is shown in <xref ref="fig-avg">Listing</xref> or
 at  
      <url href="https://replit.com/@BerylHoffman/Average-1" visual="" target="_blank">Average on repl</url>. 
    <!-- Its overall design is similar to application programs we designed in previous chapters.
    The only instance variable it uses is the <c>KeyboardReader</c> variable.
    The other variables are declared locally, within the methods.
    In this case,
    declaring them locally makes the algorithms easier to read.-->

 
  <listing xml:id="fig-avg">
    <caption>A program to compute average grade using a <c>while</c>
    structure.</caption>
 <program language="java"><input>
import java.io.*;
public class Average {                            // Console I/O
  private KeyboardReader reader = new KeyboardReader();
  private double promptAndRead() {
    reader.prompt("Input a grade (e.g., 85.3) " +
           "or 9999 to indicate the end of the list >> ");
    double grade = reader.getKeyboardDouble();
    System.out.println("You input " + grade + "\n");// Confirm input
    return grade;
  }
  public double inputAndAverageGrades() {
    double runningTotal = 0;
    int count = 0;
    double grade = promptAndRead();  // Initialize: priming input
    while (grade != 9999) {          // Loop test: sentinel
      runningTotal += grade;
      count++;
      grade = promptAndRead();       // Update: get next grade
    } // while
    if (count > 0)         // Guard against divide-by-zero
      return runningTotal / count;   // Return the average
    else
      return 0;            // Special (error) return value
 }
 public static void main(String argv[]) {
   System.out.println("This program calculates average grade.");
   Average avg = new Average();
   double average = avg.inputAndAverageGrades();
   if (average == 0)                             // Error check
      System.out.println("You didn't enter any grades.");
   else
      System.out.println("Your average is " + average);
 } // main()
} // Average
 </input></program>
</listing>
Try it below. </p>
    <interactive iframe="iframe/repl-average.html" width="100%" aspect="1:1"/>
</statement>
</activity>
  <p>
    One final point about this program is to note the care taken in the design of the user interface to explain the program to the user,
    to prompt the user before a value is input,
    and to confirm the user's input after the program has read it.
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: User Interface</title>
    <p>
      Whenever you ask a user for input,
      the user should know <term>why</term>
      you are asking and <term>what</term> you are asking for.
      Prompts should be used for this purpose.
      It is also a good idea to confirm that the program has received the correct input.
    </p>
  </principle>
</section>