<section xml:id="inheritance-exercises">
  <title>Inheritance Exercises</title>
 
  <p>
 (Note: For programming exercises,
    <term>first</term> draw a UML class diagram describing all classes and their 
    inheritance relationships and/or associations.)
  </p>


  <ol>
    <li>
      <p>
        Fill in the blanks in each of the following sentences:
      </p>
      <ol>
        <li>
          <p>
            A method that lacks a body is an <c>__________</c> method.
          </p>
        </li>
        <li>
          <p>
            An <c>__________</c> is like a class except that it contains only instance methods,
            no instance variables.
          </p>
        </li>
        <li>
          <p>
            Two ways for a class to inherit something in Java is to <c>__________</c> a 
            class and <c>__________</c> an interface.
          </p>
        </li>
        <li>
          <p>
            Instance variables and instance methods that are declared <c>__________</c> or <c>__________</c> are inherited by the subclasses.
          </p>
        </li>
        <li>
          <p>
            An object can refer to itself by using the <c>__________</c> keyword.
          </p>
        </li>
        <li>
          <p>
            If a GUI class intends to handle <c>ActionEvent</c> s, it must implement the <c>__________</c> interface.
          </p>
        </li>
        <li>
          <p>
            A <c>__________</c> method is one that does different things depending upon the object that invokes it.
          </p>
        </li>
      </ol>
      </li>
      <li>
      <p>
        Explain the difference between the following pairs of terms:
      </p>
      <ol>
        <li><p>Class and interface.</p></li>
        <li><p> Stub method and abstract method. </p></li>
        <li><p>  Extending a class and instantiating an object.</p></li>
        <li><p> Defining a method and implementing a method.</p></li>
        <li><p>A <c>protected</c> method and a <c>public</c> method.</p></li>
        <li><p>A <c>protected</c> method and a <c>private</c> method.</p></li>
      </ol>
    </li>
    <li>
      <p>
        Draw a hierarchy to represent the following situation.
        There are lots of languages in the world.
        English, French, Chinese, and Korean are examples of natural languages.
        Java, C, and C++ are examples of formal languages.
        French and Italian are considered romance languages,
        while Greek and Latin are considered classical languages.
      </p>
    </li>
    <li>
      <p>
        Look up the documentation for the <c>JButton</c> class on Sun's Web site:
 <url href="http://java.sun.com/j2se/1.5.0/docs/api/" visual="">http://java.sun.com/j2se/1.5.0/docs/api/</url>.
List the names of all the methods that would be inherited by the <c>ToggleButton</c> subclass that we defined in this chapter.
      </p>
    </li>
    <li>
      <p>
        Design and write a <c>toString()</c> method for the <c>ToggleButton</c> class 
        defined in this chapter.
        The <c>toString()</c> method should return the <c>ToggleButton</c>'s current label.
      </p>
    </li>
    <li>
      <p>
        Design a class hierarchy rooted in the class <c>Employee</c> that includes subclasses for <c>HourlyEmployee</c> and <c>SalaryEmployee</c>. The attributes shared in common by these classes include the name,
        and job title of the employee,
        plus the accessor and mutator methods needed by those attributes.
        The salaried employees need an attribute for weekly salary,
        and the corresponding methods for accessing and changing this variable.
        The hourly employees should have a pay rate and an hours worked variable.
        There should be an abstract method called <c>calculateWeeklyPay()</c>, defined 
        abstractly in the superclass and implemented in the subclasses.
        The salaried worker's pay is just the weekly salary.
        Pay for an hourly employee is simply hours worked times pay rate.
      </p>
    </li>
    <li>
      <p>
        Design and write a subclass of <c>JTextField</c> called <c>IntegerField</c> that is 
        used for inputting integers but behaves in all other respects 
        like a <c>JTextField</c>. Give the subclass a public method called <c>getInteger()</c>.
      </p>
    </li>
    <li>
      <p>
        Implement a method that uses the following variation of the Caesar cipher.
        The method should take two parameters,
        a <c>String</c> and an <c>int</c> <em>N</em>.
        The result should be a <c>String</c> in which the first letter is shifted by <em>N</em>,
        the second by <m>N+1</m>, the third by <m>N+2</m>, and so on.
        For example, given the string
        <q>Hello,</q>
        and an initial shift of 1, your method should return
        <q>Igopt.</q>
        Write a method that converts its <c>String</c> parameter so that 
        letters are written in blocks five characters long.
      </p>
    </li>
    <li>
      <p>
        Design and implement an GUI that lets the user type a document 
        into a <c>TextArea</c> and then provides the following analysis of the document:
        the number of words in the document,
        the number of characters in the document, and the percentage of 
        words that have more than six letters.
      </p>
    </li>
    <li>
      <p>
        Design and implement a <c>Cipher</c> subclass to implement the following 
        substitution cipher: Each letter in the alphabet is replaced with a 
        letter from the opposite end of the alphabet:
        <em>a</em> is replaced with <em>z</em>,
        <em>b</em> with <em>y</em>, and so forth.
      </p>
    </li>
    <li>
      <p>
        One way to design a substitution alphabet for a cipher is to use a 
        keyword to construct the alphabet.
        For example, suppose the keyword is
        <q>zebra.</q>
        You place the keyword at the beginning of the alphabet,
        and then fill out the other 21 slots with remaining letters,
        giving the following alphabet:
 <program language="java"><input>
Cipher alphabet:   zebracdfghijklmnopqstuvwxy
Plain alphabet:    abcdefghijklmnopqrstuvwxyz
 </input></program>Design and implement an <c>Alphabet</c> class for constructing these kinds of substitution alphabets.
        It should have a single public method that takes a keyword <c>String</c> as an argument and returns an alphabet string.
        Note that an alphabet cannot contain duplicate letters,
        so repeated letters in a keyword like
        <q>xylophone</q>
        would have to be removed.
      </p>
    </li>
    <li>
      <p>
        Design and write a <c>Cipher</c> subclass for a substitution cipher that uses an alphabet from the <c>Alphabet</c> class created in the previous exercise.
        Challenge: Find a partner and concoct your own encryption scheme.
        Then work separately with one partner writing <c>encode()</c> and the other writing <c>decode()</c>. Test to see that a message can be encoded and then decoded to yield the original message.
      </p>
    </li>
    <li>
      <p>
        Design a <c>TwoPlayerGame</c> subclass called <c>MultiplicationGame</c>. The 
        rules of this game are that the game generates a random multiplication problem 
        using numbers between 1 and 10, and the players,
        taking turns, try to provide the answer to the problem.
        The game ends when a wrong answer is given.
        The winner is the player who did not give a wrong answer.
      </p>
    </li>
    <li>
      <p>
        Design a class called <c>MultiplicationPlayer</c> that plays the multiplication game described in the previous exercise.
        This class should implement the <c>IPlayer</c> interface.
      </p>
    </li>
    <li>
      <p>
        Design a <c>TwoPlayerGame</c> subclass called <c>RockPaperScissors</c>. The rules 
        of this game are that each player,
        at the same time, picks either a rock, a paper, or a scissors.
        For each round, the rock beats the scissors,
        the scissors beats the paper,
        and the paper beats the rock.
        Ties are allowed.
        The game is won in a best out of three fashion when one of the players wins two rounds.
      </p>
    </li>
    <li>
      <p>
        Design a class called <c>RockPaperScissorsPlayer</c> that plays the the game 
        described in the previous exercise.
        This class should implement the <c>IPlayer</c> interface.
      </p>
    </li>
  
  <li>
    <p>
      Given the classes with the following headers

<program language="java">
<input>
public class Animal ...
public class DomesticAnimal extends Animal ...
public class FarmAnimal extends DomesticAnimal...
public class HousePet extends DomesticAnimal...
public class Cow extends FarmAnimal ...
public class Goat extends FarmAnimal ...
public class DairyCow extends Cow ...
</input>
</program>

draw a UML class diagram representing the hierarchy created by these declarations.
    </p>
  </li>
  <li>
    <p>
      Given the preceding hierarchy of classes,
      which of the following are legal assignment statements?

<program language="java">
<input>
DairyCow dc = new FarmAnimal();
FarmAnimal fa = new Goat();
Cow c1 = new DomesticAnimal();
Cow c2 = new DairyCow();
DomesticAnimal dom = new HousePet();
</input>
</program>
</p>
</li>
<li>
<p>
The JFrame that follows contains a semantic error in its <c>SomeFrame()</c> constructor.
  The error will cause the <c>actionPerformed()</c> method never to display
  <q>Clicked</q> even though the user clicks the button in the JFrame.
  Why? (<em>Hint</em>: Think scope!)
</p>
<program language="java">
<input>
public class SomeFrame extends JFrame
                implements ActionListener
{
  // Declare instance variables
  private JButton button;
  public JFrame()
  {
    // Instantiate the instance variable
    JButton button = new JButton("Click me");
    add(button);
    button.addActionListener(this);
  } // init()
  public void actionPerformed(ActionEvent e)
  {
    if (e.getSource() == button)
      System.out.println("Clicked");
  } // actionPerformed()
} // SomeFrame
</input>
</program>
</li>
<li>
<p>
  What would be output by the following program?

<program language="java">
<input>
public class SomeFrame2 extends JFrame
{
  // Declare instance variables
  private JButton button;
  private JTextField field;
  public SomeFrame()
  {
    // Instantiate instance variables
    button = new JButton("Click me");
    add(button);
    field = new JTextField("Field me");
    add(field);
    System.out.println(field.getText() + button.getText());
  } // init()
  public static void main(String[] args) {
    SomeFrame2 frame = new SomeFrame2();
    frame.setSize(400,400);
    frame.setVisible(true);
  }
} // SomeFrame2
</input>
</program>

</p>
</li>
<li>

 <p>
  Design and implement a GUI that has a <c>JButton</c>, a <c>JTextField</c>, and 
  a <c>JLabel</c>
  and then uses the <c>toString()</c> method to display each object's string representation.
</p>

</li>
<li>
<p>
  The <c>JButton</c> class inherits a <c>setText(String s)</c> from 
  its <c>AbstractButton()</c> superclass.
  Using that method,
  design and implement a GUI that has a single button labeled initially,
  <q>The Doctor is out.</q>
  Each time the button is clicked,
  it should toggle its label to,
  <q>The Doctor is in</q>
  and vice versa.
</p></li>
  </ol>
</section>