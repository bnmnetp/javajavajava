<section xml:id="ch-guis-exs">
    <title>Exercises</title>
<subsection>
<p>
<term>Note:</term> For programming exercises,
      <term>first</term> draw a UML class diagram describing all classes and their inheritance relationships and/or associations.
 </p>
 <p>
<ol>
    <li>
      <p>
        Explain the difference between the following pairs of terms:
        <ol>
          <li>
            <p>
              A <em>model</em> and a <em>view</em>.
            </p>
          </li>
          <li>
            <p>
              A <em>view</em> and a <em>controller</em>.
            </p>
          </li>
          <li>
            <p>
              A <em>lightweight</em> and <em>heavyweight</em> component.
            </p>
          </li>
          <li>
            <p>
              A <c>JButton</c> and a <c>Button</c>.
            </p>
          </li>
          <li>
            <p>
              A <em>layout manager</em> and a <em>container</em>.
            </p>
          </li>
          <li>
            <p>
              A <em>containment hierarchy</em>
              and an <em>inheritance hierarchy</em>.
            </p>
          </li>
          <li>
            <p>
              A <em>content pane</em> and a <c>JFrame</c>.
            </p>
          </li>
        </ol>
        </p>
    </li>
    <li>
      <p>
        Fill in the blanks.
        <ol>
          <li>
            <p>
              A GUI component that is written entirely in Java is known as a <c>__________</c> component.
            </p>
          </li>
          <li>
            <p>
              The AWT is not platform independent because it uses the <c>__________</c> model to implement its GUI components.
            </p>
          </li>
          <li>
            <p>
              The visual elements of a GUI are arranged in a <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              A <c>__________</c> is an object that takes responsibility for arranging the components in a container.
            </p>
          </li>
          <li>
            <p>
              The default layout manager for a <c>JPanel</c> is <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              The default layout manager for a <c>JApplet</c> is <c>__________</c> .
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Describe in general terms what you would have to do to change the standard look and feel of a Swing <c>JButton</c>.
      </p>
    </li>
    <li>
      <p>
        Explain the differences between the model-view-controller design of a <c>JButton</c> and the design of an AWT <c>Button</c>. Why is MVC superior?
      </p>
    </li>
    <li>
      <p>
        Suppose you have a GUI that contains a JButton and a <c>JLabel</c>. Each time the button is clicked,
        the GUI rearranges the letters in the label.
        Using Java's event model as a basis,
        explain the sequence of events that happens in order for this action to take place.
      </p>
    </li>
    <li>
      <p>
        Draw a containment hierarchy for the most recent GUI version of the
<c>OneRowNim</c> program.
      </p>
    </li>
    <li>
      <p>
        Create a GUI design,
        similar to the one shown in <xref ref="fig-acmegui">Figure</xref>,
        for a program that would be used to buy tickets online for a rock concert.
      </p>
    </li>
    <li>
      <p>
        Create a GUI design,
        similar to the one shown in <xref ref="fig-acmegui">Figure</xref>,
        for an online program that would be used to play musical recordings.
      </p>
    </li>
      <li>
      <p>
        Design and implement a GUI for the <c>CDInterest</c> program (Fig.<nbsp/>5.18).
        This program should let the user input the interest rate,
        principal,
        and period and should accumulate the value of the investment.
      </p>
    </li>
    <li>
      <p>
        Design and implement a GUI for the <c>Temperature</c> class (Fig.<nbsp/>5.5).
        One challenge of this design is to find a good way for the user to indicate whether a Fahrenheit or Celsius value is being input.
        This should also determine the order of the conversion: F to C or C to F.
      </p>
    </li>
    <li>
      <p>
        Design an interface for a 16-button integer calculator that supports addition,
        subtraction, multiplication, and division.
        Implement the interface so that the label of the button is displayed in the calculator's display<mdash/>that is,
        it doesn't actually do the math.
      </p>
    </li>
    <li>
      <p>       
        <term>Challenge:</term>  Design and implement a <c>Calculator</c> class to go along with the interface you developed in the previous exercise.
        It should function the same way as a hand calculator except it only handles integers.
      </p>
    </li>
    <li>
      <p>
        Modify the <c>Converter</c> application so that it can convert in either direction:
        from miles to kilometers or from kilometers to miles.
        Use radio buttons in your design to let the user select one or the other alternative.
      </p>
    </li>
    <li>
      <p>
        Here's a design problem for you.
        A biologist needs an interactive program that calculates the average of some field data represented as real numbers.
        Any real number could be a data value,
        so you can't use a sentinel value, such as 9999,
        to indicate the end of the input.
        Design and implement a suitable interface for this problem.
      </p>
    </li>
    <li>
      <p>
        <term>Challenge:</term> A dialog box is a window associated with an application that appears only when needed.
        Dialog boxes have many uses.
        An error dialog is used to report an error message.
        A file dialog is used to help the user search for and open a file.
        Creating a basic error dialog is very simple in Swing.
        The <c>JOptionPane</c> class has class methods that can be used to create the kind of dialog shown in <xref ref="fig-errdialog">Figure</xref>.
        Such a dialog box can be created with a single statement: \marginfiglarge{chptr13/9f28.eps}{A basic <c>JOptionPane</c> error dialog.}{fig-errdialog}
 <program language="java"><input>
JOptionPane.showMessageDialog(this,
         "Sorry, your number is out of range.");
 </input></program>Convert the <c>Validate</c> program (Fig.<nbsp/>6.12 from Chapter<nbsp/>6) to a GUI interface and use the <c>JOptionPane</c> dialog to report errors.
        </p>
    </li>
    <li>
      <p>
              <term>Challenge:</term> Design and implement a version of the game <em>Memory</em>.
        In this game you are given a two-dimensional grid of boxes that contains pairs of matching images or strings.
        The object is to find the matching pairs.
        When you click a box, its contents are revealed.
        You then click another box.
        If its contents match the first one,
        their contents are left visible.
        If not, the boxes are closed up again.
        The user should be able to play multiple games without getting the same arrangement every time.
      </p>
    </li>
    <li>
      <p>
        <term>Challenge:</term> Extend the <c>SimpleTextEditor</c> program by adding methods to handle the opening,
        closing and saving of text files.
      </p>
    </li>
</ol>
</p>
</subsection>
</section> 
<!--




 
 </ol>
-->