<section  xml:id="ch-loops-sum"><title>Chapter Summary</title>
<subsection><title> Technical Term</title>
    <p>
        <tabular>
        <row>
  <cell>
    conditional loop
  </cell>
  <cell>
    loop bound
  </cell>
  <cell>
    sentinel bound
  </cell>
  </row>

  <row>
  <cell>
    counting loop
  </cell>
  <cell>
    loop entry condition
  </cell>
  <cell>
    unit indexing
  </cell>
  </row>

  <row>
  <cell>
    do-while statement
  </cell>
  <cell>
    nested loop
  </cell>
  <cell>
    updater
  </cell>
  </row>

  <row>
  <cell>
    infinite loop
  </cell>
  <cell>
    postcondition
  </cell>
  <cell>
    while statement
  </cell>
  </row>

  <row>
  <cell>
    initializer
  </cell>
  <cell>
    precondition
  </cell>
  <cell>
    zero indexing
  </cell>
  </row>

  <row>
  <cell>
    limit bound
  </cell>
  <cell>
    priming read
  </cell>
</row>
  <row>
  <cell>
    loop body
  </cell>
    <cell>
    repetition structure
  </cell>
  </row>
  </tabular>
    
  </p>
  </subsection>

  <subsection><title>Summary of Important Points</title>
    <ul>
      <li>
        <p>
          A <em>repetition structure</em> is a control structure
            <idx><h>repetition structure</h></idx>
          that allows a statement or sequence of statements to be repeated.
        </p>
      </li>
      <li>
        <p>
          All loop structures involve three elements<mdash/>an <em>initializer</em>,
          a <em>loop entry condition</em>
          or a <em>loop boundary condition</em>, and an <em>updater</em>.
        </p>
      </li>
      <li>
        <p>
          When designing a loop,
          it is important to analyze the loop structure to make sure that the loop bound will eventually be satisfied.
        </p>
      </li>
      <li>
        <p>
          The <c>for</c> statement
            <idx><h>for statement</h></idx>
          has the following syntax:
 <program language="java"><input>
for (  initializer ;  loop entry condition ; updater )
{  
    for loop body 
} 
 </input></program>
 
 A summary of various loop bounds:
          <tabular>
            <row bottom="minor">
              <cell>Bound</cell>
              <cell>Example</cell>
            </row> 
            <row>
              <cell><em>Counting</em></cell> <cell><em>k <m>\lt</m> <m>100</m></em></cell>
              </row>
              <row><cell><em>Sentinel</em></cell><cell><em>input</em> != 9999
                </cell>
                </row>
                <row><cell> <em>Flag</em></cell>
              <cell><em>done</em> != <em>true</em></cell></row>
              <row><cell> <em>Limit</em></cell>
              <cell><em>amount <m>\lt</m> <m>0.5</m></em></cell>
            </row>
           
          </tabular>
        
        </p>
      </li>
      <li>
        <p>
          The <c>while</c> statement takes the following form:
 <program language="java"><input>
 while ( loop entry condition )
 {
     loop body
 } 
 </input></program>
        </p>
      </li>
      <li>
        <p>
          The <c>do-while</c> statement has the following general form:
 <program language="java"><input>
do
{ 
    loop body 
} while ( loop condition );
 </input></program>
        </p>
      </li>
      <li>
        <p>
          When designing a loop,
          it is important to analyze the loop structure to make sure that the loop bound will eventually be satisified.
          The table below summarizes the types of loop bounds that we have identified.
        </p>
      </li>
      <li>
        <p>
          <em>Structured programming
            <idx><h>structured programming</h></idx>
          </em> is the practice of writing programs that are built up from a small set of predefined control structures<mdash/>the
          <em>sequence</em>, <em>selection</em>,
          <em>repetition</em>, and <em>method-call</em> structures.
          An important feature of these structures is that each has a single entry and exit.
        </p>
      </li>
      <li>
        <p>
          A <em>precondition</em> is a condition that must be true before a certain code segment executes.
          A <em>postcondition</em> is a condition that must be true when a certain code segment is finished.
          Preconditions and postconditions should be used in the design, coding,
          documentation, and debugging of algorithms and methods.
        </p>
      </li>
    </ul>
    </subsection>

    <subsection>
        <title>Solutions to Self-Study Exercises</title>
          <p>
            <ul>
                <li>
                  <p>
                    Identify the syntax error in the following <c>for</c> loop statements:
                    <ol>
                      <li>
                        <title>a</title>
                        <p>
                          Commas are used instead of semicolons in the header.
           <program language="java"><input>
          for (int k = 5; k &lt; 100; k++)
               System.out.println(k);
           </input></program>
                        </p>
                      </li>
                      <li>
                        <title>b</title>
                        <p>
                          There shouldn't be 3 semicolons in the header
           <program language="java"><input>
          for (int k = 0; k &lt; 12 ; k--)
               System.out.println(k);
           </input></program>
                        </p>
                      </li>
                    </ol>
                  </p>
                </li>
                <li>
                  <p>
                    Identify those statements that result in infinite loops:
                    <ol>
                      <li>
                        <title>a</title>
                        <p>
                          Infinite loop because k is never incremented.
                        </p>
                      </li>
                      <li>
                        <title>b</title>
                        <p>
                          Infinite loop because k is always odd and thus never equal to 100.
                        </p>
                      </li>
                    </ol>
                  </p>
                </li>
                <li>
                  <p>
                    Your sister is learning to count by fours.
                    Write a <c>for</c> loop that prints the following sequence of numbers: 1, 5, 9, 13, 17, 21, 25.
           <program language="java"><input>
          for (int k = 1; k &lt;= 25; k = k+4)
              System.out.print(k + " ");
           </input></program>
                  </p>
                </li>
                <li>
                  <p>
                    What value will <em>j</em> have when the following loop terminates?
                    <em>Answer</em>:
                    <em>j</em> will be undefined when the loop terminates.
                    It is a local variable whose scope is limited to the loop body.
           <program language="java"><input>
          for (int i = 0; i &lt; 10; i++)
          {
             int j;
             j = j + 1;}
           </input></program>
                  </p>
                </li>
                <li>
                  <p>
                    Write a nested <c>for</c> loop to print the following geometric pattern:
           <program language="java"><input>
          #
          # #
          # # #
          # # # #
          # # # # #
          for (int row = 1; row &lt;= 5; row++)  {    // For each row
            for (int col = 1; col &lt;= row; col++) // Columns per row
              System.out.print('#');
            System.out.println();                // New line} // row
           </input></program>
                  </p>
                </li>
                <li>
                  <p>
                    Identify the syntax error in the following <c>while</c> structures:
                    <ol>
                      <li>
                        <title>a</title>
                        <p>
           <program language="java"><input>
          int k = 5;
          while (k &lt; 100) {
              System.out.println(k);
              k++                     &lt;&lt; Missing semicolon}
           </input></program>
                        </p>
                      </li>
                      <li>
                        <title>b</title>
                        <p>
           <program language="java"><input>
          int k = 0;
          while (k &lt; 12;) {           &lt;&lt; Extra semicolon
              System.out.println(k);
              k++;}
           </input></program>
                        </p>
                      </li>
                    </ol>
                  </p>
                </li>
                <li>
                  <p>
                    Determine the output and/or identify the error in each of the following
          <c>while</c> structures.
                    <ol>
                      <li>
                        <title>a</title>
                        <p>
           <program language="java"><input>
          int k = 0;
          while (k &lt; 100)
            System.out.println(k);  &lt;&lt; Missing updater in loop body
           </input></program>Output:
                          infinite loop prints 0 0 0 0 0...
                        </p>
                      </li>
                      <li>
                        <title>b</title>
                        <p>
           <program language="java"><input>
          while (k &lt; 100) {           &lt;&lt; Missing initializer
            System.out.println(k);
            k++;}
           </input></program>Output:
                          unpredictable since k's initial value is not known
                        </p>
                      </li>
                    </ol>
                  </p>
                </li>
                <li>
                  <p>
                    Your younger sister is now learning how to count by sixes.
                    Write a <c>while</c> loop that prints the following sequence of numbers: 0, 6, 12, 18, 24, 30, 36.
           <program language="java"><input>
          int k = 0;                 // Initializer
             while (k &lt;= 36) {          // Loop-entry condition
                 System.out.println(k);
                 k += 6;                  // Updater
             }
           </input></program>
                  </p>
                </li>
                <li>
                  <p>
                    If <em>N</em> is even, divide it by 2.
                    If <em>N</em> is odd, subtract 1 and then divide it by 2.
                    This will generate a sequence that is guaranteed to terminate at 0.
                    For example, if <em>N</em> is initially 15,
                    then you get the sequence 15, 7, 3, 1, 0.
                    Write a method that implements this sequence using a <c>while</c> statement.
           <program language="java"><input>
          public static void sub1Div2(int N) {
              while(N != 0) {
                  System.out.print(N + " ");
                  if (N % 2 == 0)
                      N = N / 2;
                  else
                      N = (N - 1) / 2;
              }
              System.out.println( N );} // sub1Div2()
           </input></program>
                  </p>
                </li>
                <li>
                  <p>
                    Identify the syntax error in the following <c>do-while</c> structures:
                    <ol>
                      <li>
                        <title>a</title>
                        <p>
           <program language="java"><input>
          int k = 0;
          do while (k &lt; 100) &lt;&lt; Misplaced condition
          {
               System.out.println(k);
               k++;}                    &lt;&lt; Belongs here
           </input></program>
                        </p>
                      </li>
                      <li>
                        <title>b</title>
                        <p>
           <program language="java"><input>
          int k = 0;
          do {
              System.out.println(k);
              k++;} while (k &lt; 12) &lt;&lt; Missing semicolon
           </input></program>
                        </p>
                      </li>
                    </ol>
                  </p>
                </li>
                <li>
                  <p>
                    Your sister has moved on to counting by sevens.
                    Write a <c>do-while</c> loop that prints the following sequence of numbers: 1, 8, 15, 22, 29, 36, 43.
           <program language="java"><input>
          n = 1;                          
          // Initializer
do {
    System.out.print(n + " ");
    n += 7;                      // Updater} while (n &lt;= 43);                // Loop entry condition
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Write a method to input and validate pizza sales.
 <program language="java"><input>
public int getAndValidatePizzaPrice() {// Uses KeyboardReader
  int pizza = 0;
  do {
    reader.prompt("Input a pizza price (8, 10, or 15) ");
    reader.prompt("or 99 to end the list >> ");
    pizza = reader.getKeyboardInteger();
    if ((pizza != 99) AmPaMp (pizza != 8) AmPaMp (pizza != 10) AmPaMp
                       (pizza != 15))
      System.out.println("Error: you've entered an "
       + "invalid pizza price\n");    // Error input
    else                               // OK input
        System.out.println("You input " + pizza + "\n");
  } while ((pizza != 99) AmPaMp (pizza != 8) AmPaMp
                   (pizza != 10) AmPaMp (pizza != 15));
  return pizza;} // getAndValidatePizzaPrice()
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Write a method to input and validate pizza sales using the numbers 1, 2, and 3 to represent pizzas at different price levels.
 <program language="java"><input>
public int getAndValidatePizzaPrice() { // Uses KeyboardReader
  int pizza = 0;
  do {
    reader.prompt("Input a 1,2 or 3 to indicate pizza"
              + "price ( 1(8), 2(10), or 3($15) ) ");
    reader.prompt("or 0 to end the list >> ");
    pizza = reader.getKeyboardInteger();
    if ((pizza &lt; 0) || (pizza > 3))  // Error check
        System.out.println("Error: you've entered an "
                                + "invalid value\n");
    else                                // OK input
        System.out.println("You input " + pizza + "\n");
  } while ( (pizza &lt; 0) || (pizza > 3) );
  if (pizza == 1)
    return 8;
  else if (pizza == 2)
    return 10;
  else if (pizza == 3)
    return 15;
  else
    return 0;} // getAndValidatePizzaPrice()
 </input></program>
        </p>
      </li>
      <li>
        <p>
          For each of the following problems,
          decide whether a counting loop structure,
          a <c>while</c> structure,
          or a
<c>do-while</c> structure should be used,
          and write a pseudocode algorithm. \begin{ANSBL}
        </p>
      </li>
      <li>
        <p>
          Printing the names of all the visitors to a Web site could use a counting loop because the exact number of visitors is known.
 <program language="java"><input>
for each name in the visitor's log
    print the name
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Validating that a user has entered a positive number requires a <c>do-while</c> structure in which you repeatedly read a number and validate it.
 <program language="java"><input>
do
    read a number
    if number is invalid, print error message
while number is invalid
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Changing all the backslashes (<m>\backslash</m>) in a Windows Web page address,
          to the slashes (/) used in a Unix Web page address.
 <program language="java"><input>
for each character in the Web page address
    if it is a backslash replace it with slash
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Finding the largest in a list of numbers requires a <c>while</c> loop to guard against an empty list.
 <program language="java"><input>
initialize maxMPG to smallest possible number
while there are more cars in the database
    if current car's MPG is greater than maxMPG
        replace maxMPG with it
 </input></program>\end{ANSBL}
        </p>
      </li>
      <li>
        <p>
          Identify any errors in the following switch structures (if there is no error,
          specify the output):
          <ol>
            <li>
              <title>a</title>
              <p>
 <program language="java"><input>
int k = 0;
   switch (k)  // Syntax error: missing braces
   case 0:
       System.out.println("zero");
       break;
   case 1:
       System.out.println("one");
       break;
   default:
       System.out.println("default");
       break;
 </input></program>
              </p>
            </li>
            <li>
              <title>b</title>
              <p>
 <program language="java"><input>
int k = 0;
   switch (k + 1)
   {
       case 0:
           System.out.println("zero");
           break;
       case 1:
           System.out.println("one"); // Output "one"
           break;
       default:
           System.out.println("default");
           break;
   }
 </input></program>
              </p>
            </li>
            <li>
              <title>c</title>
              <p>
 <program language="java"><input>
int k = 6;
   switch (k / 3.0) // Syntax error: not an integral value
   {
       case 2:
           System.out.println("zero");
           break;
       case 3:
           System.out.println("one");
           break;
       default:
           System.out.println("default");
           break;
   }
 </input></program>
              </p>
            </li>
          </ol>
        </p>
      </li>
      <li>
        <p>
          A <c>switch</c> statement to print ice cream flavors:
 <program language="java"><input>
switch (flavor)
{
    case 1:
        System.out.println("Vanilla");
        break;
    case 2:
        System.out.println("Chocolate");
        break;
    case 3:
        System.out.println("Strawberry");
        break;
    default:
        System.out.println("Error");}
 </input></program>
        </p>
      </li>
      <li>
        <p>
           <program language="java"><input>
public final int VANILLA = 0,
                 CHOCOLATE = 1,
                 STRAWBERRY = 2;
switch (flavor)
{
    case VANILLA:
        System.out.println("Vanilla");
        break;
    case CHOCOLATE:
        System.out.println("Chocolate");
        break;
    case STRAWBERRY:
        System.out.println("Strawberry");
        break;
    default:
        System.out.println("Error");}
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Identify the pre- and postconditions on
          <em>j</em> and <em>k</em>
          where indicated in the following code segment:
 <program language="java"><input>
int j = 0; k = 5;
do {
    if (k % 5 == 0) {
                      // Precondition: j &lt;= k
        j += k;
        k--;
    }
    else k *= k;} while (j &lt;= k);
                      // Postcondition: j > k
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Identify the pre- and postconditions for the following method,
          which computes <m>x^n</m> for <m>n >= 0</m>.
 <program language="java"><input>
// Precondition: N >= 0
 // Postcondition: power(x,n) == x to the n
 public double power(double x, int n ) {
     double pow = 1;
     for (int k = 1; k &lt;= n; k++)
         pow = pow * x;
     return pow;
 } // power()
 </input></program>
        </p>
      </li>
    </ul>
  </p>
  </subsection>
    </section>