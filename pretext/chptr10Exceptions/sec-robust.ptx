<section xml:id="sec-robust">
  <title>Error Handling and Robust
  Program Design</title>
  <introduction>
    <p>
      An important element of program design is to develop appropriate ways of handling erroneous and exceptional conditions.
      As we have seen,
      the JVM will catch any unchecked exceptions that are not caught by the program itself.
      For your own (practice) programs,
      the best design may  simply be to use Java's default exception handling.
      The program will terminate when an exception is thrown,
      and then you can debug the error and recompile the program.
    </p>
    <p>
      On the other hand,
      this strategy would be inappropriate for commercial software,
      which cannot be fixed by its users.
      A well-designed commercial program should contain exception handlers for those truly exceptional conditions that may arise.
    </p>
    <p>
      In general there are three ways to handle an exceptional condition that isn't already
       handled by Java (<xref ref="tab-except-strategies">Table</xref>).
    </p>
    <table xml:id="tab-except-strategies">
      <title>Exception-handling strategies.</title>
      <tabular>
        <row bottom="minor">
          <cell><term>Kind of Exception</term></cell>
          <cell><term>Kind of Program</term></cell>
          <cell><term>Action to Be Taken</term></cell>
        </row>
        <row>
          <cell>Caught by Java</cell>
          <cell></cell>
          <cell>Let Java handle it</cell>
          </row>
          <row><cell>
            Fixable condition</cell>
          <cell></cell>
          <cell>Fix the error and resume execution</cell>
          </row>
          <row><cell>
            Unfixable condition</cell>
          <cell>Stoppable</cell>
          <cell>Report the error and terminate the program</cell>
        </row>
        <row>
          <cell> 
            Unfixable condition</cell>
          <cell>Not stoppable</cell>
          <cell>Report the error and resume processing</cell>
        </row>
      </tabular>
    </table>
    <p>
      If the exceptional condition cannot be fixed,
      the program should be terminated,
      with an appropriate error message.
      Second, if the  exceptional condition can be fixed without invalidating the program,
      then it should be remedied and the program's normal execution should be resumed.
      Third, if the exception cannot be fixed,
      but the program cannot be terminated,
      the exceptional condition should be reported or logged in some way,
      and the program should be resumed.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Handling Exceptions</title>
      <p>
        There are three general ways to handle exceptions: (1) Report the exception and terminate the program; (2) fix the exceptional condition and resume normal execution;
        and (3) report the exception to a log and resume execution.
      </p>
    </principle>
  </introduction>
  <subsection>
    <title>Print a Message and Terminate</title>
    <p>
      Our illegal argument example is a clear case in which the exception is best handled by terminating the program.
      In this case,
      this particular error is best left to Java's default exception handling,
      which will terminate the program when the exception is thrown.
      There is simply no way to satisfy the postcondition of the
<c>avgFirstN()</c> method when <em>N</em>
      is less than or equal to 0.  This type of error often calls attention to a design flaw in the program's logic that should be caught during program development.
      The throwing of the exception helps identify the design flaw.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Exceptions and Program Development</title>
      <p>
        Java's built-in exception handling helps identify design flaws during program development.
        Your own use of exceptions should follow this approach.
      </p>
    </principle>
    <p>
      Similar problems can
      (and often do)
      arise in connection with errors that are not caught by Java.
      For example,
      suppose that your program receives an erroneous input value,
      whose use would invalidate the calculation it is making.
      This won't be caught by Java.
      But it should  be caught by your program,
      and an appropriate alternative here is to report the error and terminate the program.
      Fixing this type of error may involve adding routines to validate the input data before they are used in the calculation.
    </p>
    <p>
      In short, rather than allowing an erroneous result to propagate throughout the program,
      it is best to terminate the program.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Report and Terminate</title>
      <p>
        If an unfixable exception arises in a program that can be terminated,
        it is better to report the error and terminate the program.
        That would be better than allowing it to run with an erroneous value.
      </p>
    </principle>
  </subsection>
  <subsection>
    <title>Log the Error and Resume</title>
    <p>
      Of course, the advice to stop the program assumes that the program can
      <em>be</em> terminated reasonably.
      Some programs<mdash/>such as programs that monitor the space shuttle or programs that control a nuclear magnetic resonance (NMR) machine<mdash/>cannot
      (and should not)
      be terminated because of such an error.
    </p>
    <p>
      Such programs are called <em>failsafe</em>
      because they are designed to  run without termination.
      For these programs,
      the exception should be reported in whatever manner is most appropriate,
      but the program should continue running.
      If the exceptional condition invalidates the program's computations,
      then the exception handler should make it clear that the results are tainted.
    </p>
    <p>
      Other programs<mdash/>such as programs that analyze a large transaction  database<mdash/>should be designed to continue processing after catching such errors.
      For example,
      suppose the program a large airline runs a program once a day to analyze the ticketing transactions that took place.
      This kind of program might use exceptions to identify erroneous transactions or transactions that involve invalid data of some sort.
      Because there are bound to be many errors of this kind in the database,
      it is not reasonable to stop the program.
      This kind of program shouldn't stop until it has finished processing all of the transactions.
      An appropriate action for this kind of program is to log the exceptions into some kind of file and continue processing the transactions.
    </p>
    <p>
      Suppose a divide-by-zero error happened in one of these programs.
      In that case,
      you would override Java's default exception handling to ensure that the program is
      <em>not</em> terminated.
      More generally,
      it's important that these types of programs be designed to catch and report such exceptions.
      This type of exception handling should be built right into the program's design.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Report and Resume</title>
      <p>
        If an unfixable exception arises in a program that cannot be terminated reasonably,
        the exception should be reported and the program should continue executing.
      </p>
    </principle>
  </subsection>
  <subsection>
    <title>Fix the Error and Resume</title>
    <p>
      As an example of a problem that can be addressed as the  program runs,
      consider the task of inputting an integer into a text field.
      As you have probably experienced,
      if a program is expecting an integer and you attempt to input something beside an integer,
      a <c>NumberFormatException</c> is generated and the program will terminate.
      For example, if you enter
      <q>$55</q>
      when prompted to input an integer dollar amount,
      this will generate an exception when the <c>Integer.parseInt()</c> method is invoked.
      The input string cannot be parsed into a valid <c>int</c>. However,
      this is the kind of error that can be addressed as the program is running.
    </p>
    <p>
      Let's design a special <c>IntField</c> that functions like a normal text field but accepts only integers.
      If the user enters a value that generates a <c>NumberFormatException</c>, an error message should be printed and the user should be invited to try again.
      As 
      <figure xml:id="fig-intfield"><caption>Int Field</caption>
      <image width="30%" source="chptr10/intfield.png"/>
      </figure>
    </p>
    <p>
      As <xref ref="fig-intfield">Figure</xref> shows,
      we want this special field to be a subclass of
<c>JTextField</c> and to inherit the basic <c>JTextField</c> functionality.
      It should have the same kind of constructors that a normal <c>JTextField</c> has.
      This leads to the definition shown in <xref ref="fig-intfieldprog">Listing</xref>.
    </p>
    <listing xml:id="fig-intfieldprog">
      <caption>A <c>NumberFormatException</c> might be thrown by
      the <c>Integer.parseInt()</c> method in  <c>IntField.getInt()</c>.</caption>
 <program language="java"><input>
import javax.swing.*;
public class IntField extends JTextField {
    public IntField () {
        super();
    }
    public IntField (int size) {
        super(size);
    }
    public int getInt() throws NumberFormatException {
        return Integer.parseInt(getText());
    } // getInt()
  } // IntField
 </input></program>
</listing>
    <p>
      Note that the constructor methods use <c>super</c> to call the
<c>JTextField</c> constructor.
      For now, these two constructors should  suffice.
      However, later we will introduce a third constructor that allows us to associate a bound with the <c>IntField</c> later in this chapter.
    </p>
    <p>
      Our <c>IntField</c> class needs a method that can return its contents.
      This method should work like <c>JTextField.getText()</c>, but  it should return a valid integer.
      The <c>getInt()</c> method takes no parameters and will return an <c>int</c>, assuming that a valid integer is typed into the <c>IntField</c>. If the user enters
      <q>$55,</q>
      a
<c>NumberFormatException</c> will be thrown by the <c>Integer.parseInt()</c> method.
      Note that <c>getInt()</c> declares that it throws this exception.
      This is not necessary because a <c>NumberFormatException</c> is not a checked exception,
      but it makes the code clearer.
    </p>
    <p>
      Where and how should this exception be handled?
      The exception cannot easily be handled within the <c>getInt()</c> method.
      This method has to return an integer value.
      If the user types in a non-integer,
      there's no way to return a valid value.
      Therefore, it's better just to throw the exception to the calling method,
      where it can be handled more easily.
    </p>
    <p>
      In a GUI application or applet,
      the calling method is likely to be an <c>actionPerformed()</c> method,
      such as the following:
    </p>
 <program language="java"><input>
public void actionPerformed(ActionEvent e) {
  try {
    userInt = intField.getInt();
    message = "You input " + userInt + " Thank you.";
  } catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this,
     "The input must be an integer.  Please re-enter.");
  } finally {
      repaint();
  }
} // actionPerformed()
 </input></program>
    <p>
      The call to <c>getInt()</c> is embedded in a <c>try/catch</c> block.
      This leads to the design summarized in <xref ref="fig-numformat-exception">Figure</xref>.
      The <c>IntField</c> throws an exception that is caught by the GUI, which then displays an error message.
    </p>
    <figure xml:id="fig-numformat-exception">
      <caption>If the user types a
      non-integer into an <c>IntField</c>, it will throw a <c>NumberFormatException</c>. The GUI will display an error message in a
<c>JOptionPane</c>(a dialog window).</caption>
      <image width="73%" source="chptr10/numformat.png"/>
    </figure>
    <p>
      If the user inputs a valid integer,
      the program will just report a message that displays the value.
      A more real-world example would make a more significant use of the value.
      On the other hand, if the user types an erroneouss value,
      the program will pop up the dialog box shown in <xref ref="fig-errmsg1">Figure</xref>.
      (See the
      <q>From the Library</q>
      section of this chapter for more on dialog boxes.)
      When the user clicks the OK button,
      the program will resume normal execution,
      so that when an exception is raised,
      the enter value is not used, and no harm is done by an erroneous value.
      The user can try again to input a valid integer.
      Note that the finally clause repaints the GUI. In this case,
      repainting would display the appropriate message on the applet or the application.
    </p>
    <figure xml:id="fig-errmsg1">
      <caption>This exception handler opens a dialog
      box to display an error message.</caption>
      <image width="73%" source="chptr10/errmsg1.png"/>
    </figure>
    <p>
      This is an example of what we might call
      <em>defensive</em> design.
      Defensive design is when we anticipate a possible  input error and take steps to ensure that a bad value is not propagated throughout the program.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Defensive Design</title>
      <p>
        Well-designed code should anticipate potential problems,
        especially potential input problems.
        Effective use of exceptions can help with this task.
      </p>
    </principle>
    <p>
      Admittedly, the sense in which the error here is
      <q>fixed</q>
      is simply that the user's original input is ignored and reentered.
      This is a legitimate and simple course of action for this particular situation.
      It is far preferable to ignoring the exception.
      If the program does not handle this exception itself, Java will catch it and will print a stack trace and terminate the program.
      That would not be a very user-friendly interface!
    </p>
    <p>
      Clearly, this is the type of exceptional condition that should be  anticipated during program design.
      If this happens to be a program designed exclusively for your own use,
      then this type of exception handling might be unnecessary.
      But if the program is meant to be used by others,
      it is important that the program be able to handle erroneous user input without crashing.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Fixing an Exception</title>
      <p>
        If a method can handle an exception effectively,
        it should handle it locally.
        This is both clearer and more efficient.
      </p>
    </principle>
    <principle>
      <title>EFFECTIVE DESIGN: Library Exception Handling</title>
      <p>
        Many of Java's library classes do not handle their own exceptions.
        The thinking behind this design is that the user of the class is in a better position to handle the exception in a way that's appropriate for the application.
      </p>
    </principle>
  </subsection>
  <subsection>
    <title>To Fix or Not to Fix</title>
    <p>
      Let's now consider a problem where it is less clear whether an exception can be successfully fixed
      <q>on the fly.</q>
      Suppose you have a program that contains an array of <c>String</c> s, which is initially created with just two elements.
    </p>
 <program language="java"><input>
String list[] = new String[2];
 </input></program> 
    <p>
      If an attempt is made to add more than two elements to the array,
      an <c>ArrayIndexOutOfBoundsException</c> will be raised.
      This exception can be handled by extending the size of the array and inserting the element.
      Then the program's normal execution can be resumed.
    </p>
    <p>
      To begin creating such a program,
      let's first design a method that will insert a string into the  array.
      Suppose that this is intended to be a <c>private</c> method that will only be used within the program.
      Also, let's suppose that the program maintains a variable,
<c>count</c>, that tracks how many values have been stored in the array.
      Therefore, it will not be necessary to pass the array as a parameter.
      So, we are creating a <c>void</c> method with one parameter,
      the <c>String</c> to be inserted:
    </p>
 <program language="java"><input>
private void insertString(String str) {
     // Might throw ArrayIndexOutOfBoundsException
    list[count] = str;
    ++count;
  }
 </input></program>
    <p>
      The comment notes where an exception might be thrown.
    </p>
    <p>
      Can we handle this exception?
      When this exception is raised,
      we could create a new array with one more element than the current array.
      We  could copy the old array into the new array and then insert the
<c>String</c> in the new location.
      Finally, we could set the variable
<c>list</c>, the array reference,
      so that it points to the new array.
      Thus, we could use the following <c>try/catch</c> block to handle this exception:
    </p>
 <program language="java"><input>
private void insertString(String str) {
    try {
        list[count] = str;
    } catch (ArrayIndexOutOfBoundsException e) {
        // Create a new array
        String newList[] = new String[list.length+1];
        for (int k = 0; k &lt; list.length; k++) // Copy array
            newList[k] = list[k];
        newList[count] = str;   // Insert into new array
        list = newList;         // Make old point to new
    } finally {         // Since the exception is now fixed
        count++;        // Increase the count
    }
  } // insertString()
 </input></program>
    <p>
      The effect of the <c>catch</c> clause is to create a new array,
      still referred to as <c>list</c>, but that contains one more element than the original array.
      <figure xml:id="fig-fixuml">
        <caption>FixArrayBound UML</caption>
      <image width="40%" source="chptr10/fixuml.png"/>
    </figure>
    </p>
    <p>
      Note the use of the <c>finally</c> clause here.
      For this problem it's important that we increment <c>count</c> in the <c>finally</c> clause.
      This is the only way to guarantee that <c>count</c> is incremented exactly once whenever an element is assigned to the array.
    </p>
    <p>
      The design of the <c>FixArrayBound</c> class is shown in <xref ref="fig-fixuml">Figure</xref>.
      It provides a simple GUI interface that enables you to test the <c>insertString()</c> method.
      This program has a standard Swing interface,
      using a <c>JFrame</c> as the top-level window.
      The program's components are contained within a <c>JPanel</c> that's added to the <c>JFrame</c> in the <c>main()</c> method.
    </p>
    <figure xml:id="fig-arrayfixscreen">
      <caption>The strings displayed are stored in an
      array that is extended each time a new string is entered.</caption>
      <image width="73%" source="chptr10/fixpic.png"/>
    </figure>
    
    <p>
      Each time the user types a string into the text field,
      the
<c>actionPerformed()</c> method calls the <c>insertString()</c> method to add the string to the array.
      On each user action,
      the <c>JPanel</c> is repainted.
      The <c>paintComponent()</c> method simply clears the panel and then displays the array's elements
      (<xref ref="fig-arrayfixscreen">Figure</xref>).
    </p>
    <principle>
      <title>DEBUGGING TIP: Clearing the JPanel</title>
      <p>
        Swing components,
        such as
<c>JPanel</c>, do not automatically clear their backgrounds.
        This must be done explicitly in the <c>paintComponent()</c> method.
      </p>
    </principle>
    <p>
      The complete implementation of <c>FixArrayBound</c> is given in <xref ref="fig-arraybound">Listing</xref>.
      This example illustrates how an exception <em>can</em>
      be handled successfully and the program's normal flow of control resumed.
      However, the question is whether such an exception
      <em>should</em> be handled this way.
    </p>
    <listing xml:id="fig-arraybound">
      <caption><c>FixArrayBound</c> increases the size of the array when
      a <c>ArrayIndexOutOfBoundsException</c> is raised.</caption>
      
 <program language="java"><input>
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class FixArrayBound extends JPanel
                            implements ActionListener  {
  public static final int WIDTH = 350, HEIGHT = 100;
  private JTextField inField = new JTextField(10);
  private JLabel prompt = new JLabel(
                      "Input a word and type &lt;ENTER>: ");
                   // Initially list has 2 elements
  private String list[] = new String[2];
  private int count = 0;
  public  FixArrayBound() {
    inField.addActionListener(this);
    add(prompt);
    add(inField);
    setSize(WIDTH, HEIGHT);
  } // FixArrayBound()
  public void paintComponent(Graphics g) {
    g.setColor(getBackground());  // Clear the background
    g.fillRect(0, 0, WIDTH, HEIGHT);
    g.setColor(getForeground());
    String tempS = "";
    for (int k = 0; k &lt; list.length; k++)
      tempS = tempS +  list[k] + " ";
    g.drawString(tempS, 10, 50);
  } // paintComponent
  private void insertString(String str) {
    try {
      list[count] = str;
    } catch (ArrayIndexOutOfBoundsException e) {
      String newList[] = new String[list.length+1]; // New array
      for (int k = 0; k &lt; list.length; k++) // Copy old to new
        newList[k] = list[k];
        newList[count] = str; // Insert item into new
        list = newList;       // Make old point to new
    } finally {            // The exception is now fixed
     count++;              //  so increase the count
    }
  } // insertString()
  public void actionPerformed(ActionEvent evt) {
    insertString(inField.getText());
    inField.setText("");
    repaint();
  } // actionPerformed()
public static void main( String args[] ) {
        JFrame f = new JFrame("Array Fixer");
        FixArrayBound panel = new FixArrayBound();
        f.getContentPane().add(panel);
        f.setSize(panel.WIDTH, panel.HEIGHT);
        f.setVisible(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
    } // main()
  } // FixArrayBound
 </input></program>
</listing>
    <p>
      Unfortunately, this is not a well-designed program.
      The array's  initial size is much too small for the program's intended use.
      Therefore, the fact that these exceptions arise at all is the result of poor design.
      In general, exceptions should <em>not</em>
      be used as a remedy for poor design.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Truly Exceptional Conditions</title>
      <p>
        A well-designed program should use exception handling to deal with truly exceptional conditions,
        not to process conditions that arise under normal or expected circumstances.
      </p>
    </principle>
    <p>
      For a program that uses an array,
      the size of the array should be chosen so that it can store all the objects required by the  program.
      If the program is some kind of failsafe program,
      which cannot afford to crash,
      then something like the previous approach might be justified,
      provided this type of exception occurs very rarely.
      Even in that case it would be better to generate a message that alerts the program's user that this condition has occurred.
      The alert will indicate a need to modify the program's memory requirements and restart the program.
    </p>
    <p>
      If it is not known in advance how many objects will be stored in an array,
      a better design would be to make use of the
<c>java.util.ArrayList</c> class
      (see
      <q>From the Java Library</q>
      in Chapter<nbsp/>9).
      ArrayLists are  designed to grow as new objects are inserted.
      In some ways the exception-handling code in our example mimics the behavior of a vector.
      However, the <c>ArrayList</c> class makes use of efficient algorithms for extending its size.
      By contrast, exception-handling code is very inefficient.
      Because exceptions force the system into an abnormal mode of execution,
      it takes considerably longer to handle an exception than it would to use a <c>ArrayList</c> for this type of application.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Appropriate Data Structure</title>
      <p>
        A major component of problem solving is choosing the best way to represent the data.
        A vector should be used as an array structure whenever the size of the array will grow and shrink dynamically during the program's execution.
      </p>
    </principle>
    </subsection>
    <subsection><title>Self-Study Exercise</title>
    
      <exercise label="resume-terminate">
        <title>Resume or Terminate</title>
        <statement>
            <p>  For each of the following exceptions,
              determine whether it can be handled in such a way that the program can be resumed (rather than terminated):
         </p>
        </statement>
        <choices>
            <choice correct="yes">
                <statement>
                    <p>
                      A computer game program detects a problem with one of its many small GUI elements and throws a <c>NullPointerException</c>.
                    </p>
                </statement>
                <feedback>
                    <p>This is a computer game,
                      so one way to handle this problem would be to generate a message into a 
                      log file and resume the game.</p>
                </feedback>
            </choice>
            <choice correct="no">
                <statement>
                  <p>
                    A factory assembly-line control program determines that an important control value has become negative and generates an
                    <c>ArithmeticException</c>.          
                  </p>
                </statement>
                <feedback>
                  You should probably terminate.
                    You would have to decide whether it would be more harmful or dangerous 
                    to continue production than not.
                </feedback>
            </choice>
            <choice correct="yes">
                <statement>
                  <p>
                    A company's Web-based order form detects that its user has entered an invalid <c>String</c> and throws a <c>SecurityException</c>.       
                  </p>
                </statement>
                <feedback>
                <p> The program could report the security violation to the user and to the 
                  system manager and then keep accepting user input.  </p>
                </feedback>
            </choice>
            </choices>
            <solution>
              <p>
              <ol>
                <li>
                  <p>
                    
                    This is a computer game,
                    so one way to handle this problem would be to generate a message into a 
                    log file and resume the game.
                  </p>
                </li>
                <li>
                  <p>
                 You should probably terminate.
                    You would have to decide whether it would be more harmful or dangerous 
                    to continue production than not.
                  </p>
                </li>
                <li>
                  <p>
                    The program could report the security violation to the user and to the 
                    system manager and then keep accepting user input.
                  </p>
                </li>
              </ol>
              </p>
            </solution>
          </exercise>  

  </subsection>
</section>