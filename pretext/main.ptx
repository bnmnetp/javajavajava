<?xml version="1.0" encoding="UTF-8" ?>
<pretext xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en-US">
  <docinfo>
<macros>
\def\fontCDT{\fontsize{7.5}\selectfont}
\renewcommand{\thetable}{A.\arabic{table}}
\def\fontCDTsmall{\fontsize{7.25}\selectfont}
\renewcommand{\thefigure}{A--\arabic{figure}}
\def\fontCDTsmallsmall{\fontsize{7}\selectfont}
\renewcommand{\thetable}{B.\arabic{table}}
\def\fontCDTsmallsmallsmall{\fontsize{6.5}\selectfont}
\renewcommand{\thefigure}{B--\arabic{figure}}
\def\fontCOBH{\fontsize{12}\selectfont}
\renewcommand{\thetable}{C.\arabic{table}}
\def\fontCOLN{\fontsize{11}\selectfont}
\renewcommand{\thefigure}{C--\arabic{figure}}
\def\fontBOXfive{\fontsize{15}\selectfont}
\renewcommand{\thetable}{D.\arabic{table}}
\def\fontboxoneh{\fontsize{10}\selectfont}
\renewcommand{\thefigure}{D--\arabic{figure}}
\def\fontUNTBCH{\fontsize{9}\selectfont}
\renewcommand{\thetable}{E.\arabic{table}}
\def\fontTBCDT{\fontsize{7.5}\selectfont}
\renewcommand{\thefigure}{E--\arabic{figure}}
\def\fontTBCH{\fontsize{9}\selectfont}
\renewcommand{\thetable}{F.\arabic{table}}
\def\fontTITLE{\fontsize{24}\selectfont}
\renewcommand{\thefigure}{F--\arabic{figure}}
\def\fontSMH{\fontsize{13}\selectfont}
\renewcommand{\thetable}{G.\arabic{table}}
\def\fontKTH{\fontsize{11}\selectfont}
\renewcommand{\thefigure}{G--\arabic{figure}}
\def\fontEXRN{\fontsize{9}\selectfont}
\renewcommand{\thetable}{H.\arabic{table}}
\def\fontCDT{\fontsize{7.5}\selectfont}
\renewcommand{\thefigure}{H--\arabic{figure}}
\def\fontCDTsmall{\fontsize{7.25}\selectfont}
\def\fontCDTsmallsmall{\fontsize{7}\selectfont}
\def\fontCDTsmallsmallsmall{\fontsize{6.5}\selectfont}
\def\fontBXsixBTH{\fontsize{18}\selectfont}
\def\ttHtwo{\fontsize{9}\selectfont}
\def\RHright#1{}
\def\RHrightsec#1#2{}
\newcommand{\captionmargin}[1]{
\vspace{0pt}\protect{\rule[12pt]{12.5pc}{0.5pt}
    \small FIGURE \thefigure}
    \quad\small#1}
\def\figaleftscaled#1#2#3#4{
    \parbox[t]{12.5pc}{
    \protect\vspace{-8pt}\caption{#3 }\label{#4}
    }
    \protect\parbox[t]{27pc}{
    \protect\vfill\psfig{file=../#1,scale=#2}
    }
  }
\def\splarge{\fontdimen2\font=1.3\fontdimen2\font}
\def\spstrict{\fontdimen2\font=0.7\fontdimen2\font}
\def\spnormalstr{\fontdimen2\font=1.429\fontdimen2\font}
\def\spnormallar{\fontdimen2\font=0.7693\fontdimen2\font}
\def\TBT#1#2{\small    {
 TABLE\ \thetable}
    #2\hfill\}
\def\TBCH#1{\fontTBCH#1}
\def\TBCDT#1{\fontTBCDT#1}
\def\UNTB{}
\def\BOXDT#1{
\vspace{9pt plus7pt minus4pt}\fboxrule=0.5pt
  \fboxsep=6pt\fbox{\parbox{26pc}{#1}
  }
\vspace{12pt plus8pt minus4pt}}
\def\BOXtwo#1#2{
\vspace{7pt plus7pt minus4pt}
  \fboxrule=0.5pt
  \fboxsep=6pt
  \psfig{file=../commonart/bx1_dg.eps}
\vspace{-32pt}
  \fbox{\parbox{26pc}{\vspace{-6pt}
  {\rule[-3pt]{10.8pc}{15pt}}
\vspace{-12pt}
  {
JAVA\,\,LANGUAGE\,\,RULE}
  {
#1}#2}
  }
\vspace{12pt plus10pt minus4pt}}
\def\BOXtwoleft#1#2{
\vspace{7pt plus7pt minus4pt}
  \fboxrule=0.5pt
  \fboxsep=6pt
  \psfig{file=../commonart/bx1_dg.eps}
\vspace{-32pt}
  \fbox{\parbox{26pc}{\vspace{-6pt}
  {\rule[-3pt]{10.8pc}{15pt}}
\vspace{-12pt}
  {
JAVA\,\,LANGUAGE\,\,RULE}
  {
#1}#2}
  }
\vspace{12pt plus10pt minus4pt}}
\def\BOXfive#1#2#3#4{
  {\rule[0pt]{40.5pc}{2pt}}\
  \parbox{40.5pc}{
  
  \parbox[t]{11.5pc}{
  #1\\
  {\rule[0pt]{11.5pc}{1pt}}\\
  \epsfig{file=#2}\\\small#3
  }
  \parbox[t]{26pc}{#4
  }}}
\def\tBOXseven#1{{
\uppercase{#1}}}
\def\BOXfiveleft#1#2#3#4{
  
  {
  \rule[0pt]{40.5pc}{2pt}}\
  \\
  
  \parbox{40.5pc}{
  
  \parbox[t]{11.5pc}{
  #1\\
  {
  \rule[0pt]{11.5pc}{1pt}}\\\\\small#3
  }
  \parbox[t]{26pc}{#4
  }}}
\newcommand{\secBXsixBTH}[1]{}
\newcommand{\secBXsixHtwo}[1]{\vspace{11pt plus7pt minus4pt}{#1}
\vspace{3pt plus3pt minus1pt}}
\newcommand{\secEXRHtwo}[1]{}
\newcommand{\appendixleft}[2]{}
\newcommand{\appendixright}[2]{}
\newcommand{\chaptermark}[1]{}
\newcommand{\sectionmark}[1]{}
</macros>
<latex-image-preamble>
\usepackage{tikz}
\usepackage{tkz-graph}
\usepackage{tkz-euclide}
\usetikzlibrary{patterns}
\usetikzlibrary{positioning}
\usetikzlibrary{matrix,arrows}
\usetikzlibrary{calc}
\usetikzlibrary{shapes}
\usetikzlibrary{through,intersections,decorations,shadows,fadings}
\usepackage{pgfplots}
</latex-image-preamble>
<!-- <rename @element="activity" xml:lang="fr-FR">Laboratoire</rename> -->

<!-- Rename Checkpoint for <exercise> to Exercise -->
<rename element="inlineexercise">Exercise</rename>


<brandlogo url="." source="jjj-3e-cover.jpg" />  

</docinfo>

  <book>
    <title>Java, Java, Java</title>
    <subtitle>Object-Oriented Problem Solving, 2022E</subtitle>
   
    <frontmatter>
      <titlepage>    
        <author>
        <personname>Ralph Morelli</personname> 
        <institution>Trinity College</institution>
            <email></email>
        </author>
        <author><personname> Ralph Walde</personname>
          <institution>Trinity College</institution>
          <email></email>
        </author>
        <author><personname> Beryl Hoffman</personname>
          <institution>Elms College</institution>
          <email></email>
        </author>        
      </titlepage>

      <preface>
        
<p>Java, Java, Java first edition (2000) and second edition (2003) were published by
Prentice-Hall, and the third edition (2006) by Pearson Education, Inc. 
In 2010 Pearson Education, Inc. reassigned the copyright to
the authors, Ralph Morelli and Ralph Walde. The authors made the 4th edition book pdf available
under an open source license in 2016. In 2022, authors Ralph Morelli (Trinity College, emeritus), 
Ralph Walde (Trinity College, emeritus), joined by 
Beryl Hoffman (Elms College) and Doug Lundin (Arapahoe Community College) created this 
interactive e-book edition of Java, Java, Java on Runestone. The first 10 chapters of Java, Java, Java
have been enhanced with interactive activities where students can run, edit, and trace through Java right in the e-book, 
and complete interactive exercises. </p>

<p>Java, Java, Java is suitable for
a typical Introduction to Computer Science (CS1) course or for a slightly
more advanced Java as a Second Language course. This edition retains the
"objects first" approach to programming and problem solving that was
characteristic of the first two editions. Throughout the text we emphasize
careful coverage of Java language features, introductory programming
concepts, and object-oriented design principles.
This edition retains many of the features of the first editions,
including:
<ul>
<li> Early Introduction of Objects </li>
<li> Emphasis on Object Oriented Design (OOD)</li>
<li> Unified Modeling Language (UML) Diagrams</li>
<li> Self-study Exercises with Answers</li>
<li> Programming, Debugging, and Design Tips.</li>
<li> From the Java Library Sections</li>
<li> Object-Oriented Design Sections</li>
<li> End-of-Chapter Exercises</li>
</ul>
There are additional resources such as slides, source code, and labs available at 
<url href="http://turing.cs.trincoll.edu/~ram/jjj/" visual="">http://turing.cs.trincoll.edu/~ram/jjj/</url> 
and <url href="http://turing.cs.trincoll.edu/~ram/jjj/labs" visual="">http://turing.cs.trincoll.edu/~ram/jjj/labs</url>. 

The pretext source files are available at <url href="https://github.com/ram8647/javajavajava" visual="">https://github.com/ram8647/javajavajava</url>. 

</p>

<p>
  This work is licensed under a Creative Commons Attribution 4.0 International License which allows the book to be used,
  modified, and shared with attribution:
  <url href="https://creativecommons.org/licenses/by/4.0/" visual="">https://creativecommons.org/licenses/by/4.0/</url>.  
</p>
</preface>


<preface><title>Object-Early Approach</title>

<p>This edition still takes an objects-early approach to teaching Java,
with the assumption that teaching beginners the "big picture" early gives
them more time to master the principles of object-oriented programming.
This approach seems now to have gained in popularity as more and more
instructors have begun to appreciate the advantages of the object-oriented
perspective.
Object Orientation (OO) is a fundamental problem solving and design
concept, not just another language detail that should be relegated to the
middle or the end of the book (or course). If OO concepts are introduced
late, it is much too easy to skip over them when push comes to shove in
the course.</p>

<p>Today, the main hurdle for beginners is the concept of object abstraction.
Beginning programmers must be able to see a program as a collection of
interacting objects and must learn how to decompose programming problems into well-designed objects. Object orientation subsumes both procedural abstraction and structured programming concepts from the Pascal
days. Teaching objects-early takes a top-down approach to these three important concepts. The sooner you begin to introduce objects and classes,
the better the chances that students will master the important principles
of object orientation.
</p>

<p>Java is a good language for introducing object orientation. Its object
model is better organized than C++. In C++ it is easy to "work around"
or completely ignore OO features and treat the language like C. In Java
there are good opportunities for motivating the discussion of object orientation. For example, it’s almost impossible to discuss GUI-based Java applications without discussing inheritance and polymorphism. Thus rather
than using contrived examples of OO concepts, instructors can use some
of Java's basic features — the class library, Swing and GUI components —
to motivate these discussions in a natural way.
</p></preface>

<preface><title>Organization of the Text</title>

<p>The book is still organized into three main parts. Part I (Chapters 0-4) introduces 
the basic concepts of object orientation and the basic features of
the Java language. Part II (Chapters 5-9) focuses on remaining language elements, 
including data types, control structures, string and array processing, and inheritance 
and polymorphism. Part III (Chapters 10-16) which will be added later to Runestone covers
advanced topics, including exceptions, file I/O, recursion, GUIs, threads
and concurrent programming, sockets and networking, data structures,
servlets, and Java Server Pages.
The first two parts make up the topics that are typically covered in an
introductory CS1 course. The chapters in Part III are self-contained and
can be selectively added to the end of a CS1 course if time permits.
</p>
<p>
The first part (Chapters 0 through 4) introduces the basic concepts of
object orientation, including objects, classes, methods, parameter passing,
information hiding, and a little taste of inheritance, and polymorphism.
The primary focus in these chapters is on introducing the basic idea that
an object-oriented program is a collection of objects that communicate and
cooperate with each other to solve problems. Java language elements are
introduced as needed to reinforce this idea. Students are given the basic
building blocks for constructing Java programs from scratch.
</p>
<p>
Although the programs in the first few chapters have limited functionality in terms of control structures and data types, the priority is placed
on how objects are constructed and how they interact with each other
through method calls and parameter passing.
The second part (Chapters 5 through 9) focuses on the remaining language elements, including data types and operators (Chapter 5), control
structures (Chapter 6), strings (Chapter 7), and arrays (Chapter 9). It
also provides thorough coverage of inheritance and polymorphism, the
primary mechanisms of object orientation: (Chapter 8).
Part three (Chapters 10 through 16) covers a variety of advanced topics. Topics from these chapters can be used selectively depending
on instructor and student interest.</p>

<p>
Throughout the book, key concepts are introduced through simple,
easy-to-grasp examples. Many of the concepts are used to create a set
of games, which are used as a running example throughout the text. Our
pedagogical approach focuses on design. Rather than starting of with language details, programming examples are carefully developed with an
emphasis on the principles of object-oriented design.
</p>
<p>
The table below provides an example syllabus from a one-semester CS1
course, where the instructor can pick and choose from among the advanced topics
during the last weeks of the course, depending on the interests and
skill levels of the students.
</p>
<tabular><title>Schedule for a 1-semester course</title>
<row bottom="minor"><cell>Weeks</cell><cell>Topics</cell><cell>Chapters</cell>
</row>
<row><cell>1</cell><cell> Object Orientation, UML, Program Design and Development</cell><cell>Chapter 0, 1</cell></row>

<row><cell>2</cell><cell>Objects and Class Definitions</cell><cell>Chapter 2</cell></row>2-3  
<row><cell>3</cell><cell>Methods and Parameters,Selection structure (if-else) </cell><cell>Chapter 3</cell></row>
<row><cell>4</cell><cell>User Interfaces and I/O</cell><cell>Chapter 4</cell></row> 
<row><cell>5</cell><cell>Data Types and Operators</cell><cell>Chapter 5</cell></row>
<row><cell>6-7</cell><cell>Control Structures (Loops)</cell><cell>Chapter 6</cell></row>
<row><cell>8</cell><cell>String Processing (loops)</cell><cell>Chapter 7</cell></row>  
<row><cell>9</cell><cell>Inheritance and Polymorphism</cell><cell>Chapter 8</cell></row>  
<row><cell>10</cell><cell>Array Processing</cell><cell>Chapter 9</cell></row>  
<row><cell>11</cell><cell>Advanced Topic (Recursion)</cell><cell>Chapter 12</cell></row> 
<row><cell>12</cell><cell>Advanced Topic (Exceptions)</cell><cell>Chapter 10</cell></row>
<row><cell>13</cell><cell>Advanced Topic (GUIs)</cell><cell> Chapter 11</cell></row>
<row><cell>14</cell><cell>Advanced Topic (Threads)</cell><cell>Chapter 15</cell> </row>
</tabular>
</preface> 
</frontmatter>
    <xi:include href="./chptr0Intro/chapter-intro.ptx"/>
    <xi:include href="./chptr1Java/ch_intro2.ptx"/>
    <xi:include href="./chptr2Objects/chapter-objects.ptx"/>
    <xi:include href="./chptr3Methods/chapter-methods.ptx"/>
    <xi:include href="./chptr4io/chapter-io.ptx"/>
    <xi:include href="./chptr5Data/chapter-data.ptx"/>
    <xi:include href="./chptr6Loops/chapter-loops.ptx"/>    
    <xi:include href="./chptr7Strings/chapter-strings.ptx"/> 
    <xi:include href="./chptr8Inheritance/chapter-inheritance.ptx"/>
    <xi:include href="./chptr9Arrays/chapter-arrays.ptx"/>   
    <xi:include href="./chptr10Exceptions/chapter-exceptions.ptx"/>
    <xi:include href="./chptr11Files/chapter-files.ptx"/>
    <xi:include href="./chptr12Recursion/chapter-recursion.ptx"/>
    <xi:include href="./chptr13GUIs/chapter-guis.ptx"/>
    <xi:include href="./chptr14Threads/chapter-threads.ptx"/>
    <xi:include href="./chptr15sockets/chapter-sockets.ptx"/>
    <xi:include href="./chptr16DataStructures/chapter-datastructures.ptx"/>
    <backmatter>
      <xi:include href="./appndx-codestyle/appendix-codestyle.ptx"/>
      <xi:include href="./appndx-jdk/appendix-jdk.ptx"/>
      <xi:include href="./appendix-charsets.ptx"/>
      <xi:include href="./appendix-keywords.ptx"/>
      <xi:include href="./appendix-operators.ptx"/>
<!--
      <xi:include href="./appndx-innerclass/appendix-innerclass.ptx"/>
      <xi:include href="./appndx-autobox/appendix-autobox.ptx"/>
      <xi:include href="./appndx-resources/appendix-resources.ptx"/>
-->
      <xi:include href="./bibliography.ptx"/>
      <index>
        <title>Index</title>
        <index-list/>
      </index>
    </backmatter>
  </book>
</pretext>
