<section xml:id="what-are-inner-classes">
  <title>What Are Inner Classes?</title>
  <p>
    <em>Inner classes</em> were introduced in Java 1.1.
    This features lets you define a class as part of another class,
    just as fields and methods are defined within classes.
    Inner classes can be used to support the work of the class in which they are contained.
  </p>
  <p>
    Java defines four types of inner classes.
    A <em>nested top-level</em> class or interface is a <em>static</em>
    member of an enclosing top-level class or interface.
    Such classes are considered top-level classes by Java.
  </p>
  <p>
    A <em>member class</em> is a nonstatic inner class.
    It is not a top-level class.
    As a full-fledged member of its containing class,
    a member class can refer to the fields and methods of the containing class,
    even the <c>private</c> fields and methods.
    Just as you would expect for the other instance fields and methods of a class,
    all instances of a member class are associated with an instance of the enclosing class.
  </p>
  <p>
    A <em>local class</em> is an inner class that's defined within a block of Java code,
    such as within a method or within the body of a loop.
    Local classes have local scope<mdash/>they can only be used within the block in which they are defined.
    Local classes can refer to the methods and variables of their enclosing classes.
    They are used mostly to implement <em>adapters</em>,
    which are used to handle events.
  </p>
  <p>
    When Java compiles a file containing a named inner class,
    it creates separate class files for them with names that include the nesting class as a qualifier.
    For example,
    if you define an inner class named
<c>Metric</c> inside a top-level class named <c>Converter</c>, the compiler will create a class file named <c>Converter$Metric.class</c> for the inner class.
    If you wanted to access the inner class from some other class (besides <c>Converter</c>), you would use a qualified name: <c>Converter.Metric</c>.
  </p>
  <p>
    An <em>anonymous class</em> is a local class whose definition and use are combined into a single expression.
    Rather than defining the class in one statement and using it in another,
    both operations are combined into a single expression.
    Anonymous classes are intended for one-time use.
    Therefore, they don't contain constructors.
    Their bytecode files are given names like <c>ConverterFrame$1.class</c>.
  </p>
</section>