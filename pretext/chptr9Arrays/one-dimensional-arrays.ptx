<section xml:id="one-dimensional-arrays">
  <title>One-Dimensional Arrays</title>
  <introduction>
    <p>
      An array is considered a <em>data structure</em>.
      A <term>data structure</term> is an organized collection of data.
      In an array,
      data are arranged  in a linear or sequential structure,
      with one element following another.
      When referencing elements in an array,
      we refer to the position of the particular element within the array.
    </p>
    <p>
      For example,
      if the array is named <c>arr</c>, then the elements are named
      <c>arr[0], arr[1], arr[2], ... arr[n-1]</c>, where <em>n</em>
      gives the number of elements in the array.
      This naming also reflects the fact that the array's data are contained in storage locations that are next to each other.
      In Java, as in C, C++, and some other programming languages,
      the first element of an array has index 0.  (This is the same convention we used for <c>String</c> s.)
    </p>
    <figure xml:id="fig-intarray">
      <caption>An array of 15 integers named <c>arr</c>.</caption>
      <image width="73%" source="chptr09/8f1.png"/>
    </figure>
    <p>
      <xref ref="fig-intarray">Figure</xref>
      shows an array named <c>arr</c> that contains 15 <c>int</c> elements.
      The syntax for referring to elements of an array is
    </p>
    <p>
      <c> arrayname  [  subscript  ] </c>
    </p>
    <p>
      where <em>arrayname</em> is the name of the array <mdash/> any valid identifier 
      will do <mdash/> and <em>subscript</em>
      is the position of the element within the array.
      As <xref ref="fig-intarray">Figure</xref> shows,
      the first element in the array has subscript 0, the second has subscript 1, and so on.
    </p>
    <p>
      A <term>subscript</term> is an integer quantity contained in square brackets that 
      is used to identify an array element.
      A subscript must be either an integer value or an integer  expression.
      Using <xref ref="fig-intarray">Figure</xref> to illustrate an example,
      suppose that <em>j</em> and <em>k</em>
      are integer variables equaling 5 and 7, respectively.
      Each of the following then would be valid references to elements of the array <em>arr</em>:
    </p>
    <p>
      
    </p>
 <program language="java"><input>
arr[4]     //Refers to 16
arr[j]     //Is arr[5] which refers to 20
arr[j + k] //Is arr[5+7] which is arr[12] which refers to 45
arr[k % j] //Is arr[7%5] which is arr[2] which refers to -1
 </input></program>
    <p>
      These examples show that when an expression,
      such as <c>j
+ k</c>, is used as a subscript,
      it is evaluated (to 12 in this case) before the reference is made.
    </p>
    <p>
      It is a syntax error to use a noninteger type as an array subscript.
      Each of the following expressions would be invalid:
    </p>
    <p>
      
    </p>
 <program language="java"><input>
arr[5.0]  // 5.0 is a float and can't be an array subscript
arr["5"]  // "5" is a string not an integer
 </input></program>
    <p>
      For a given array,
      a valid array subscript must be in the range <c>0 ... N-1</c>, 
      where <c>N</c> is the number of elements in the array or it is considered out-of-bounds.
      An out-of-bounds subscript creates a run-time error <mdash/> that is,
      an error that occurs when the program is running <mdash/> rather than a syntax error,
      which can be detected when the program is compiled.
      For the array <c>arr</c>, each of the following expressions contain out-of-bounds subscripts:
    </p>
 <program language="java"><input>
arr[-1]  // Arrays cannot have negative subscripts
arr['5'] // Char '5' promoted to its Unicode value, 53
arr[15]  // The last element of arr has subscript 14
arr[j*k] // Since j*k equals 35
 </input></program>
    <p>
      Each of these references would lead to an <c>IndexOutOfBoundsException</c>. 
      (Exceptions are covered in detail in Chapter<nbsp/>10.)
    </p>
    <principle>
      <title>Array Subscripts</title>
      <p>
        Array subscripts must be integer values in the range <c>0...(N-1)</c>, where <term>N</term>
        is the number of elements in the array.
      </p>
    </principle>
    <principle>
      <title>DEBUGGING TIP: Array Subscripts</title>
      <p>
        In developing array algorithms,
        it's important to design test data that show that array 
        subscripts do not cause run-time errors.
      </p>
    </principle>
  </introduction>
  <subsection>
    <title>Declaring and Creating Arrays</title>
    <p>
      For the most part, arrays in Java are treated as objects.
      Like objects,
      they are instantiated with the <c>new</c> operator  and they have instance variables
      (for example, <c>length</c>).
      Like variables for objects,
      array variables are considered <em>reference</em> variables.
      When arrays are used as parameters,
      a reference to the array is passed rather than a copy of the entire array.
    </p>
    <p>
      The primary difference between arrays and full-fledged objects is that arrays aren't 
      defined in terms of an <c>Array</c> class.
      Thus, arrays don't fit into Java's <c>Object</c> hierarchy.
      They don't inherit any properties from <c>Object</c> and they cannot be subclassed.
    </p>
    <p>
      You can think of an array as a container that contains a number of variables.
      As we've seen,
      the variables contained in an array object are not referenced by 
      name but by their relative position in the array.
      The variables are called <em>components</em>.
      If an array object has <em>N</em> components,
          <idx><h>array component</h></idx>
      then we say that the <term>array length</term>
          <idx><h>array length</h></idx>
      is <em>N</em>.
      Each of the components of the array has the same type,
      which is called the array's <em>component
          <idx><h>array component type</h></idx>
      type</em>.
      An <em>empty</em> array is one that contains zero variables.
    </p>
    <p>
      A <term>one-dimensional</term> array
          <idx><h>one-dimensional array</h></idx>
      has  components that are called the array's <em>elements
          <idx><h>array element</h></idx>
      </em>.
      Their type is the array's <em>element
          <idx><h>array element type</h></idx>
      type</em>.
      An array's elements may be of any type,
      including primitive and reference types.
      This means you can have arrays of <c>int,
      char, boolean, String, Object, Image, TextField, TwoPlayerGame</c> and so on.
    </p>
    <p>
      When declaring a one-dimensional array,
      you have to indicate both the array's element type and its length.
      Just as in declaring and creating other kinds of objects,
      creating an array object requires that we create both a name for the array and then the array
          <idx><h>array declaration</h></idx>
      itself.
      The following statements create the array shown in <xref ref="fig-intarray">Figure</xref>:
    </p>
 <program language="java"><input>
int arr[];          // Declare a name for the array
arr = new int[15];  // Create the array itself
 </input></program>
    <p>
      These two steps can be combined into a single statement as follows:
    </p>
 <program language="java"><input>
int arr[] = new int[15];
 </input></program>
    <p>
      In this example,
      the array's element type is <c>int</c> and its <c>length</c> is 15,
      which is fixed and cannot be changed.
      This means that the array contains 15 variables of type <c>int</c>, which will be 
      referred to as <c>arr[0], arr[1], <ellipsis /> arr[14]</c>.
    </p>
  </subsection>
  <subsection xml:id="fig-studarray">
    <title>Array Allocation</title>
    <p>
      Creating the array in <xref ref="fig-intarray">Figure</xref>
      means allocating  15 storage locations that can store integers.
      Note that one difference between declaring an array and declaring 
      some other kind of object is that square brackets, <c>[]</c>, are used to declare 
      an array type.
      The brackets can be attached either to the array's name or to its type,
      as in the following examples:
    </p>
 <program language="java"><input>
int arr[];     // The brackets may follow the array's name
int[] arr;     // The brackets may follow the array's type
 </input></program>
    <p>
      The following example creates an array of five <c>String</c> s 
      and then uses a for loop to assign the strings <c>"hello1"</c>, <c>"hello2"</c>, 
      <c>"hello3"</c>, <c>"hello4"</c>, and <c>"hello5"</c> to the five array locations:
    </p>
    <p>
      
    </p>
 <program language="java"><input>
String strarr[];                // Declare a name for the array
strarr = new String[5];              // Create the array itself
                                 // Assign strings to the array
for (int k = 0; k &lt; strarr.length; k++)     // For each element
  strarr[k] = new String("hello" + (k + 1)); // Assign a string
 </input></program>
    <p>
      Note that the expression <c>k &lt; strarr.length</c> specifies the loop bound.
      Every array has a <c>length</c>
          <idx><h>array length</h></idx>
      instance variable,
      which refers to the number of elements contained in the array.
      As we mentioned, arrays,
      like <c>String</c> s, are zero  indexed,
      so the last element of the array is always given by its <c>length-1</c>. 
      However, <c>length</c> is an instance variable for arrays,
      whereas <c>length()</c> is an instance method for <c>String</c> s.
      Therefore, it would be a syntax error in this example to refer to <c>strarr.length()</c>.
    </p>
    <principle>
      <title>DEBUGGING TIP: Array Length</title>
      <p>
        A common syntax error involves forgetting that for arrays <c>length</c> is an instance variable,
        not an instance method,
        as it is for <c>String</c> s.
      </p>
    </principle>
    <p>
      In the example,
      we first use the <c>new</c> operator to create <c>strarr</c>, an 
      array of type <c>String</c> of length five.
      We then use a
      <c>String</c> constructor to create the five <c>String</c> s that are stored in the array.
      It is important to realize that creating an array to store five <c>Object</c> s
      (as opposed to five primitive data elements)
      does not also create the <c>Object</c> s themselves that will be stored in the array.
    </p>
    <p>
      When an <c>array</c> of objects is created,
      the array's elements are  references to those objects (Fig.
      <xref ref="fig-arrayobjs"></xref>).
      Their initial values, like all reference variables,
      are <c>null</c>. So to create and initialize the array <c>strarr</c>, we need to 
      create <em>six</em> objects <mdash/> the array itself,
      which will contain five <c>String</c> s, and then the 
      five <c>String</c> s that are stored in <c>strarr</c>.
    </p>
    <figure xml:id="fig-arrayobjs">
      <caption>Creating an array of five <c>String</c> s involves
      six objects, because the array itself is a separate object.
      In (a), the array variable is declared.  In (b), the array
      is instantiated, creating an array of five <c>null</c>
      references.  In (c), the five <c>Strings</c> are created
      and assigned to the array.</caption>
      <image width="73%" source="chptr09/p406f1.png"/>
    </figure>
    <p>
      One more example will help underscore this point.
      The following statements create four <em>new</em><c>Object</c> s, an array 
      to store three <c>Student</c> s plus the three <c>Student</c> s themselves 
      (<xref ref="fig-school">Figure</xref>):
    </p>
 <program language="java"><input>
Student school[] = new Student[3];   // A 3 Student array
school[0] = new Student("Socrates"); // The first Student
school[1] = new Student("Plato");    // The second Student
school[2] = new Student("Aristotle");// The third Student
 </input></program>
    <p>
      The first statement creates an array named <c>school</c> 
      to store three Student s, and the next three statements create 
      the individual <c>Student</c> s and assign them to the array (Fig.<nbsp/>9.3).
      Thus, creating the array and initializing its elements require four <c>new</c> statements.
    </p>
    <figure xml:id="fig-school">
      <caption>An array of <c>Stodent</c> objects.</caption>
      <image width="50%" source="chptr09/p407f1.png"/>
    </figure> 
    <p>
      The following sequence of statements would lead to a null pointer 
      exception because the array's elements have not been instantiated:
    </p>
 <program language="java"><input>
Student students[] = new Student[3]; // A 3 Student array
System.out.println(students[0].getName());
 </input></program>
    <p>
      In this case, <c>students[0]</c> is a null reference,
      thus causing the exception.
    </p>
    <principle>
      <title>DEBUGGING TIP: Array Instantiation</title>
      <p>
        Creating a new <c>array</c> does not also create the objects that are stored in the array.
        They must be instantiated separately.
        It is a semantic error to refer to an uninstantiated (<c>null</c>) array element.
      </p>
    </principle>
    <p>
      Now that we've assigned the three <c>Student</c> s to the array,
      we can refer to them by means of subscripted references.
      A reference to the Student named
      <q>Socrates</q>
      is now <c>school[0]</c>, and a reference to the Student named
      <q>Plato</q>
      is <c>school[1]</c>. In other words,
      to refer to the three individual students we must refer to their 
      locations within <c>school</c>. Of course,
      we can also use variables, such as loop counters,
      to refer to a <c>Student</c>'s location within <c>school</c>. 
      The following for loop invokes each <c>Student</c>'s <c>getState()</c> 
      method to print out its current state:
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; school.length; k++)
    System.out.println(school[k].getState());
 </input></program>
    <p>
      What if the three <c>Student</c> s already existed before the array was created?
      In that case,
      we could just assign their references to the array elements,
      as in the following example (<xref ref="fig-students">Figure</xref>):
    </p>
 <program language="java"><input>
Student student1 = new Student("Socrates");
Student student2 = new Student("Plato");
Student student3 = new Student("Aristotle");
Student school = new Student[3]; // A 3 Student array
school[0] = student1;
school[1] = student2;
school[2] = student3;
 </input></program>
    <p> 
      In this case,
      each of the three <c>Student</c> objects can be referenced by 
      two different references <mdash/> its variable identifier
      (such as <c>student1</c>)
      and its array location
      (such as <c>school[0]</c>).
    </p>
    <figure xml:id="fig-students">
    <image width="50%" source="chptr09/p408f1.png"/> 
    <caption>IMAGE IS CUT OFF. Arrays of objects store references to the objects,
      not the objects themselves.</caption>
    </figure>
    <p>
      For arrays of objects, Java stores just the reference to the object in the array itself,
      rather than the entire object.
      This conserves memory,
      since references require only 4 bytes each whereas each object 
      may require hundreds of bytes (<xref ref="fig-students">Figure</xref>).
    </p>
    <p>
      When an array
          <idx><h>array allocation</h></idx>
      of <em>N</em> elements is created,
      the compiler <em>allocates</em> storage for <em>N</em>
      variables of the element's type.
      In the case of <c>arr</c> that we discussed earlier (<xref ref="fig-intarray">Figure</xref>),
      the compiler would allocate storage for 15 <c>int</c> s <mdash/>i.e.,  60 contiguous bytes 
      of storage,
      because each <c>int</c> requires 4 bytes (32 bits) of storage.
      If we declare an array of 20 <c>double</c> s,
    </p>
 <program language="java"><input>
double arr[] = new double[20];
 </input></program>
    <p>
      the compiler will allocate 160 bytes of storage <mdash/> i.e., 20 variables of 8 
      bytes (64<nbsp/>bits) each.
      In the case of the <c>Student</c> examples and <c>String</c> examples,
      because these are objects
      (not primitive types),
      the compiler will allocate space for <em>N</em> addresses,
      where <em>N</em> is the length of the array and where each address requires 4 bytes.
    </p>
    </subsection>
    <subsection><title>Self-Study Exercise</title>
    <ol>
      <li>
        <p>
          How much space
          (in bytes)
          would be allocated for each of the following?
        </p>
        <ol>
          <li><p>int a[] = new int[5];</p></li> 
          <li><p>double b[] = new double[10];</p></li>
          <li><p>char c[] = new char[30];</p></li>
          <li><p>String s[] = new String[10];</p></li>
          <li><p>Student p[] = new Student[5];</p></li>
        </ol>
      </li>
    </ol>
  </subsection>
  <subsection>
    <title>Initializing Arrays</title>
    <p>
      Array elements are automatically initialized to default values that 
      depend on the element type: boolean elements are initialized to <c>false</c>, 
      and integer and real types are initialized to 0.
      Reference types<mdash/>that is,
      arrays of  objects<mdash/>are initialized to <c>null</c>.
    </p>
    <p>
      Arrays can also be assigned initial values when they are created,
      although this is feasible only for relatively small arrays.
      An <em>array initializer</em>
          <idx><h>array initializer</h></idx>
      is written as a list of expressions separated by commas and enclosed by curly braces,
      { }.
      For example,
      we can declare and  initialize the array shown in <xref ref="fig-intarray">Figure</xref> with the following statement:
    </p>
 <program language="java"><input>
int arr[] = {-2,8,-1,-3,16,20,25,16,16,8,18,19,45,21,-2};
 </input></program>
    <p>
      Similarly, to create and initialize an array of <c>String</c> s, we can use the following statement:
    </p>
 <program language="java"><input>
String strings[] = {"hello", "world", "goodbye", "love"};
 </input></program>
    <p>
      This example creates and stores four <c>String</c> s in the array.
      Note in these examples that when an array declaration contains an initializer,
      it is not necessary to use
      <c>new</c> and it is not necessary to specify the number of elements in the array.
      The number of elements is determined from the number of values in the initializer list.
    </p>
  </subsection>
  <subsection xml:id="array-assignment">
    <title>Assigning and Using Array Values</title>
    <p>
      Array elements can be used in the same way as other variables.
      The  only difference, of course,
      is that references to the elements are subscripted.
      For example, the following assignment
          <idx><h>array assignment</h></idx>
      statements assign values to the elements of two arrays,
      named <c>arr</c> and <c>strings</c>:
    </p>
 <program language="java"><input>
arr[0] = 5;
arr[5] = 10;
arr[2] = 3;
strings[0] = "who";
strings[1] = "what";
strings[2] = strings[3] = "where";
 </input></program>
    <p>
      The following loop assigns the first 15 squares <mdash/><c>1, 4, 9 ...</c> <mdash/> 
      to the array <c>arr</c>:
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; arr.length; k++)
    arr[k] = (k+1) * (k+1);
 </input></program>
    <p>
      The following loop prints the values of the array <c>arr</c>:
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; arr.length; k++)
    System.out.println(arr[k]);
 </input></program>
</subsection>
<subsection>
<title>Self-Study Exercises</title>
      <ol>
        <li>
          <p>
            Declare an array named <c>farr</c> that contains 
            ten <c>float</c> s initialized to the values <c>1.0, 2.0, ... , 10.0</c>.
          </p>
        </li>
        <li>
          <p>
            Write an expression that prints the first element of <c>farr</c>.
          </p>
        </li>
        <li>
          <p>
            Write an assignment statement that assigns 100.0 to the last element in <c>farr</c>.
          </p>
        </li>
        <li>
          <p>
            Write a loop to print all of the elements of <c>farr</c>.
          </p>
        </li>
      </ol>
  </subsection>
</section>