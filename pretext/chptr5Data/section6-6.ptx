<section>
  <title>\terminology{From the Java Library}
<c>java.text.NumberFormat</c></title>
<subsection><title></title> <p>
    Although the <c>Math.round()</c> method is useful for rounding <image width="73%" source="chptr05/p267f1.png"/> numbers,
    it is not suitable for business applications.
    Even for rounded values, Java will drop trailing zeroes.
    So a value such as $10,000.00 would be output as $10000.0.
    This wouldn't be acceptable for a business report.
  </p>
  <p>
    Fortunately, Java supplies the <c>java.text.NumberFormat</c> class precisely for the task of representing numbers as dollar amounts,
    percentages, and other formats (Fig.
    <xref ref="fig-pg267f1"></xref>).
  </p>
  <p>
    The <c>NumberFormat</c> class is an <c>abstract</c> class,
    which means that it cannot be directly instantiated.
    Instead, you would use its static <c>getInstance()</c> methods to create an instance that can then be used for the desired formatting tasks.
  </p>
  <p>
    Once a <c>NumberFormat</c> instance has been created,
    its <c>format()</c> method can be used to put a number into a particular format.
    The <c>setMaximumFractionDigits()</c> and <c>setMaximumIntegerDigits()</c> methods can be used to control the number of digits before and after the decimal point.
  </p>
  <p>
    For example,
    the following statements can be used to format a decimal number as a currency string in dollars and cents:
  </p>
 <program language="java"><input>
NumberFormat dollars = NumberFormat.getCurrencyInstance();
System.out.println(dollars.format(10962.555));
 </input></program>
  <p>
    These statements would cause the value 10962.555 to be shown as $10,962.56.
    Similarly, the statements,
  </p>
 <program language="java"><input>
NumberFormat percent = NumberFormat.getPercentInstance();
percent.setMaximumFractionDigits(2);
System.out.println(percent.format(6.55));
 </input></program>
  <p>
    would display the value 6.55 as 6.55%. The utility of the <c>Math</c> and <c>NumberFormat</c> classes illustrates the following principle:
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: Code Reuse</title>
    <p>
      Often the best way to solve a programming task is to find the appropriate methods in the Java class library.
    </p>
  </principle>
 </subsection>
    <subsection><title>Self-Study Exercise</title>
    <ol>
      <li xml:id="fig-bankcd">
        <p>
          A Certificate of Deposit (CD) is an investment instrument that accumulates interest at a given rate for an initial principal <image width="73%" source="chptr05/bankcd.png"/> over a fixed number of years.
          The formula for compounding interest is shown in <xref ref="fig-bankcd">Table</xref>.
          It assumes that interest is compounded annually.
          For daily compounding, the annual rate must be divided by 365,
          and the compounding period must be multiplied by 365, giving:
          <m>a = p(1 + r/365)^{365n}</m>.
          Implement a <c>BankCD</c> class that calculates the maturity value of a CD. Figure<nbsp/>5.11 gives the design of the class.
          It should have three instance variables for the CD's principal, rate,
          and years.
          Its constructor method sets the initial values of these variables when a <c>BankCD</c> is instantiated.
          Its two public methods calculate the maturity value using yearly and daily compounding interest,
          respectively.
          Use the <c>Math.pow()</c> method to calculate maturity values.
          For example,
          the following expression calculates maturity value with annual compounding:
 <program language="java"><input>
principal * Math.pow(1 + rate, years)
 </input></program>
          <table>
            <title>Formula for calculating compound interest</title>
            <tabular>
              
              <row>
                <cell><m>a = p(1 + r)^n</m> where</cell>
              </row>
              <row>
                <cell><m>\bullet</m><em>a</em> is the CD's value at the end of the <em>n</em>th year</cell>
              </row>
              <row>
                <cell><m>\bullet</m><em>p</em> is the principal or original investment amount</cell>
              </row>
              <row>
                <cell><m>\bullet</m><em>r</em> is the annual interest rate</cell>
              </row>
              <row>
                <cell><m>\bullet</m><em>n</em> is the number of years or the compounding period</cell>
              </row>
              
            </tabular>
         
          </table>
        </p>
      </li>
      <li>
        <p>
          Design a command-line user interface to the <c>BankCD</c> class that lets the user input principal,
          interest rate,
          and years,
          and reports the CD's maturity value with both yearly and daily compounding.
          Use
<c>NumberFormat</c> objects to display percentages and dollar figures in an appropriate format.
          The program's output should look something like the following (user's inputs are in {cyan}):
 <program language="java"><input>
************************ OUTPUT ********************
Compare daily and annual compounding for a Bank CD.
 Input CD initial principal, e.g.  1000.55 > {2500}
 Input CD interest rate, e.g.  6.5 > {7.8}
 Input the number of years to maturity, e.g., 10.5 > {5 }
For Principal = <m>2,500.00 Rate= 7.8% Years= 5.0
 The maturity value compounded yearly is</m>3,639.43
 The maturity value compounded daily is: $3,692.30
************************ OUTPUT ********************
 </input></program>
        </p>
      </li>
    </ol>
  </p>
  </subsection>
</section>