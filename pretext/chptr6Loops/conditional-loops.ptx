<section xml:id="conditional-loops">
  <title>Conditional Loops</title>
  <introduction>
    <p>
      Unlike the problems in the previous sections,
      not all loops can be coded as counting loops.
      Here's a problem that can't be solved by a counting loop.
    </p>
    <p>
      Mathematicians, especially number theorists,
      have found that certain operations on numbers lead to interesting sequences.
      For example, the <em>3N+1 problem</em>
      is a conjecture in number theory,
      which says that if <em>N</em> is any positive integer,
      then the sequence generated by the following rules will always terminate at 1.
    </p>
 <pre>
Case          Operation
----          ---------
N is odd      N = 3 * N + 1
N is even     N = N / 2
</pre>
    <p>
      In other words, start with any positive integer, <em>N</em>.
      If <em>N</em> is odd, multiply it by 3 and add 1.
      If <em>N</em> is even, divide it by 2.
      In either case, assign the result back to <em>N</em>.
      The conjecture states that <em>N</em> will eventually equal 1.
      For example, if <em>N</em> is initially 26,
      then the sequence generated is 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1.
    </p>
    <p>
      The 3<em>N</em>+1 problem is an example of a noncounting loop.
      Because for any  given <em>N</em>
      we don't know how long the 3<em>N</em>+1 sequence will be,
      we need a loop that terminates when the loop variable reaches a certain value,
      called a <em>sentinel</em> value<mdash/>when <em>N</em> equals 1.
      This is an example of a loop that is terminated by a
      <term>sentinel bound</term>.
      With the exception of infinite loops,
      all loops are bounded by some condition,
      which is why they are sometimes referred to as
      <em>conditional loop</em> structures.
      The count and sentinel bounds are just special cases of the conditional loop structure.
    </p>
  </introduction>
  <subsection>
    <title>The While Structure, Revisited</title>
    <p>
      Consider the following pseudocode algorithm for the 3<em>N</em>+1 problem:
    </p>
  <pre>
Algorithm for computing the 3N+1 sequence
    While N is not equal to 1, do: {
        Print N.
        If N is even, divide it by 2.
        If N is odd, multiply N by 3 and add 1.
    }
    Print N
 </pre>
    <p>
      In this structure, the body of the loop prints <em>N</em>
      and then updates <em>N</em>'s value,
      using the 3<em>N</em>+1 rules.
      Suppose <em>N</em> equals 5 when this code segment begins.
      It will print the following sequence: 5, 16, 8, 4, 2, 1.
      Note that the loop body is entered as long as
      <em>N</em> is not equal to 1.
      So the loop entry condition in this case is <em>N != 1</em>.
      Conversely, the loop will terminate when <em>N</em> equals 1.
      Also note that in this code segment the loop bound is tested <em>before</em>
      the body of the loop is executed.
    </p>
    <p>
      We can implement this algorithm using Java's
      <em><c>while</c> statement</em>,
      whose flowchart is shown in <xref ref="fig-whileflow6">Figure</xref>:
    </p>
 <program language="java"><input>
while (N != 1) {            // While N not equal to 1
  System.out.print(N + " ");// Print N
  if (N % 2 == 0)           // If N is even
      N = N / 2;            //  divide it by 2
  else                      // If N is odd
      N = 3 * N + 1;        //  multiply by 3 and add 1
}
System.out.println(N);      // Print N
 </input></program>
    <p>
      Recall that unlike the <c>for</c> statement,
      the <c>while</c> statement does not contain syntax for the initializer and the updater.
      These must be coded separately.
      As we pointed out in Chapter<nbsp/>3,
      the <c>while</c> structure
      (as opposed to the <c>while</c> statement)
      is a segment of code built by the programmer that satisfies the following design principle:
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Loop Structure</title>
      <p>
        A properly designed <term>loop structure</term>
        must include an <term>initializer</term>,
        a <term>loop-entry condition</term>,
        and an <term>updater</term>.
        The updater should guarantee that the loop-entry condition will eventually become false,
        thereby causing the loop to terminate.
      </p>
    </principle>
    <p>
      The <c>while</c> structure has the following form:
    </p>
 <program language="java"><input>
InitializerStatements;         // Initializer
while (loop entry condition) { // Bound test
    Statements;                // Loop body
    UpdaterStatements;         // Updater
}
 </input></program>
    <p>
      As its form suggests,
      the <c>while</c> structure is designed so that on some conditions the loop body will never be executed.
      Because it tests for the loop bound
      <em>before</em> the loop body,
      it is possible that the loop body is never executed.
      We might say that it is designed to perform 0 or more iterations.
    </p>
    <p>
      For example, going back to the 3<em>N</em>+1 problem,
      what if <em>N</em> equals 1 initially?
      In that case, the loop body will be skipped,
      because the loop entry condition is false to begin with.
      No iterations will be performed,
      and the algorithm will simply print the value 1.
    </p>
    <p>
Here's a simpler problem. Assume you're working your way through a set of problems in an assignment. 
You could follow the pseudocode below and use a while loop. 
    </p>
 <program language="java"><input>
write the problems on the assignment sheet // Initializer
while there are problems on the sheet      // Bound test
    do a problem                            // Loop body
    cross it off the assignment sheet         // Updater
 </input></program>
    <p>
      It is possible that the assignment sheet contains no homework problems to begin with.
      In that case,
      there's no work for the body of the loop to do and it should be skipped.
    </p>

    
    <exercises xml:id="self-study-exercisesB18"><title>Self-Study Exercises</title>
      <p>
        Identify and fix the syntax error in the following <c>while</c> loop structures.
      </p>
     
<exercise label="bugwhileloop1">
  <title>While Loop Bugs 1</title>
<statement>
        <p>Fix the bugs in the following while loop.         
<program language="java" interactive="activecode"><input>
public class Debug
{
   public static void main(String[] args)
   {  
      int k = 5;
      while (k &lt; 20) 
      {
          System.out.println(k);
          k++
      }
    }
  }               
 </input></program>
 </p></statement>
 <solution>
                 
  <program language="java"><input>
    int k = 5;
    while (k &lt; 20) {
        System.out.println(k);
        k++                     &lt;&lt; Missing semicolon
      }
     </input></program>
 </solution>
 </exercise>

 <exercise label="bugwhileloop2">
  <title>While Loop Bugs 2</title>
  <statement>
          <p>Fix the bugs in the following while loop.      
  <program language="java" interactive="activecode"><input>
  public class Debug
  {
     public static void main(String[] args)
     {  
        int k = 0;
        while (k &lt; 12 ;) 
        {
          System.out.println(k);
          k++;
        }
      }
    }
 </input></program>
</p></statement>
<solution>
  <program language="java"><input>
    int k = 0;
    while (k &lt; 12;) {           &lt;&lt; Extra semicolon
        System.out.println(k);
        k++;
      }
     </input></program>
</solution>
</exercise>
 
 <exercise label="bugwhileloop3">
  <title>While Loop Bugs 3</title>
  <statement>
          <p>Fix the bugs in the following while loop.        
  <program language="java" interactive="activecode"><input>
  public class Debug
  {
     public static void main(String[] args)
     {  
        int k = 0;
        while (k &lt; 10)
            System.out.println(k);
     }
    }
 </input></program>
</p></statement>
<solution><p>
  Infinite Loop. k needs to be changed in the loop. Fixed:
  <program language="java"><input> 
  int k = 0;
  while (k &lt; 10) 
  {
      System.out.println(k);
      k++;  // add increment counter k and { } in loop body.
  }
     </input></program></p>
</solution>
 </exercise>

 <exercise label="bugwhileloop4">
  <title>While Loop Bugs 4</title>
  <statement>
          <p>Fix the bugs in the following while loop.        
  <program language="java" interactive="activecode"><input>
  public class Debug
  {
     public static void main(String[] args)
     {  
        while (k &lt; 10) {
            System.out.println(k);
            k++;
        }
      }
    }
 </input></program>
</p></statement>
<solution>
  <p> Missing initializer for k. Add k = 0; or some initial value.
    <program language="java"><input>
   int k = 0;  &lt;&lt; Missing initializer
   while (k &lt; 10) {          
     System.out.println(k);
     k++;
    }
    </input></program>
                 </p>
</solution>
</exercise>
             

 <exercise label="count6">
  <title>Count by 6's</title>
  <statement>
  <p>Your younger sister is now learning how to count by sixes.
    Write a while loop that prints the following sequence of numbers: 0, 6, 12, 18, 24, 30, 36.
  </p>
</statement>
               <program language="java" interactive="activecode"><input>
                public class CountBy6
                {
                   public static void main(String[] args)
                   {
                      /*  Write a while loop that counts by 6 and 
                          prints the following sequence of numbers: 
                          0, 6, 12, 18, 24, 30, 36.
                        */



                   }
                }
 </input></program>
 <solution>
  <p>
    Your younger sister is now learning how to count by sixes.
    Write a <c>while</c> loop that prints the following sequence of numbers: 0, 6, 12, 18, 24, 30, 36.
<program language="java"><input>
int k = 0;                 // Initializer
while (k &lt;= 36) {          // Loop-entry condition
 System.out.println(k);
 k += 6;                  // Updater
}
</input></program>
  </p>
 </solution>
</exercise>
    
          
       

          <exercise label="while-sequence">
            <title>While Sequence</title><statement>
            <p>Here's another number theory problem.
              Start with any positive integer, <em>N</em>.
              If <em>N</em> is even, divide it by 2.
              If <em>N</em> is odd, subtract 1 and then divide it by 2.
              This will generate a sequence that is guaranteed to terminate at 0.
              For example, if <em>N</em> is initially 15,
              then you get the sequence: 15, 7, 3, 1, 0.
              Write a method that implements this sequence using a while statement.      </p>
          </statement>
<program language="java" interactive="activecode"><input>
public class Sequence
{
   public static void main(String[] args)
   {
      int N = 15;
      /*  Write a while loop that generates the sequence
           described above until reaching 0.
      */
          
          
          
    }
 }
</input></program>
<solution>
  <p>
    If <em>N</em> is even, divide it by 2.
    If <em>N</em> is odd, subtract 1 and then divide it by 2.
    This will generate a sequence that is guaranteed to terminate at 0.
    For example, if <em>N</em> is initially 15,
    then you get the sequence 15, 7, 3, 1, 0.
    Write a method that implements this sequence using a <c>while</c> statement.
<program language="java"><input>
public static void sub1Div2(int N) {
  while(N != 0) {
    System.out.print(N + " ");
    if (N % 2 == 0)
        N = N / 2;
    else
        N = (N - 1) / 2;
  }
  System.out.println( N );
} // sub1Div2()
</input></program>
  </p>
</solution>
          </exercise>
          </exercises>
        </subsection>

  <subsection> 
    <title>The  Do-While  Structure</title>
    <p>
      Here's another problem that can't be solved with a counting loop.
      Your  father has been fretting about the bare spots on the front lawn and is considering hiring the ChemSure Lawn Service to fertilize.
      However, your scientifically minded younger sister wants to reassure him that at the rate the grass is dying,
      there will be enough to last through the summer.
      Using techniques she learned in biology,
      your sister estimates that the grass is dying at the rate of 2 percent per day.
      How many weeks will it take for half the lawn to disappear?
    </p>
    <p>
      One way to solve this problem would be to keep subtracting 2 percent from the  current amount of grass until the amount dipped below 50 percent,
      all the while counting the number of iterations required.
      Consider the following pseudocode algorithm:
    </p>
 <pre>
Algorithm for calculating grass loss
    Initialize amtGrass to 100.0
    Initialize nDays to 0
    Repeat the following statements
        amtGrass -= amtGrass * 0.02;
        ++nDays;
    As long as amtGrass > 50.0
    Print nDays / 7
 </pre>
    <p>
      We begin by initializing <c>amtGrass</c> to 100.0, representing 100 percent.
      And we initialize our counter, <c>nDays</c> to 0.
      Then we repeatedly subtract 2 percent of the amount and increment the counter until the amount drops below 50 percent.
      In other words, in this case,
      we repeat the loop body as long as the amount of grass remains above 50 percent of the original.
      When the loop finishes,
      we report the number of weeks it took by dividing the number of days by 7.
    </p>
    <p>
      The loop bound in this case is known as a <term>limit bound</term>.
      The loop  will terminate when a certain limit has been reached<mdash/>in this case,
      when the amount of grass dips below 50 percent of the original amount.
      Note that in this case the loop bound is tested
      <em>after</em> the loop body.
      This is appropriate for this problem,
      because we know in advance that the loop will iterate at least once.
      We can implement this algorithm using Java's
      <em>do-while statement</em>:
    </p>
 <program language="java"><input>
public int losingGrass(double perCentGrass) {
  double amtGrass = 100.0; // Initialize amount grass
  int nDays = 0;            // Initialize day counter
  do {                               // Repeat
    amtGrass -= amtGrass * LOSSRATE; // Update amount
    ++nDays;               //   Increment the counter
  } while (amtGrass > perCentGrass);
                   // As long as enough grass remains
  return nDays / 7;     // Return the number of weeks
} // losingGrass()
 </input></program>
  
  
    <principle>
      <title>Do-while Statement</title>
      <p>
        The <term>do-while statement</term> is a loop statement in which the loop entry condition occurs after the loop body.
        It has the following syntax:
      </p>
      <p>
        <program language="java"><input>
         do {
            loop body
         } while(loop condition); 
         </input></program>
      </p>
    </principle>
    <p>
      Note, again,
      that unlike the <c>for</c> statement,
      the <c>do-while</c> statement does not contain syntax for the initializer and the updater.
      These must be coded separately.
    </p>
    <p>
      To further highlight the difference between a loop statement and a loop structure,
      the <c>do-while</c> structure takes the following form:
    </p>
 <pre>
InitializerStatements1;     // Initializer
do {                        // Beginning of loop body
  InitializerStatements2;   //   Another initializer
  Statements;               //   Loop body
  UpdaterStatements         //   Updater
} while (loop entry condition); // Bound test
</pre>
    <p>
      Note that initializer statements may be placed before the loop body,
      at the beginning of the loop body,
      or in both places, depending on the particular problem.
      Like the other loop structures,
      updater statements occur within the body of the loop.
      A flowchart of the <c>do-while</c> structure is shown in <xref ref="fig-dowhileflow">Figure</xref>.
    </p>
    <figure xml:id="fig-dowhileflow">
      <caption>Flowchart of the <c>do-while</c> statement
      and <c>do-while</c> structure.</caption>
      <image width="73%" source="chptr06/6f4.png"/>
    </figure>
    <p>
      The <c>do-while</c> structure would be an appropriate control structure for the following type of problem:
    </p>
 <program language="java"><input>
do
  dial the desired telephone number  // Initializer
  if you get a busy signal
    hang up                          // Updater
while there is a busy signal         // Bound test
 </input></program>
    <p>
      In this case,
      you want to perform the actions in the body of the loop at least once and possibly more than once
      (if you continue to receive a busy signal).
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Do-While Loops</title>
      <p>
        The <c>do-while</c> loop is designed for solving problems in which at least one iteration must occur.
            <idx><h>loop design</h></idx>
      </p>
    </principle>
    <principle>
      <title>EFFECTIVE DESIGN: While versus Do-While Structures</title>
      <p>
        For problems where a noncounting loop is required,
        the <c>while</c> loop structure is more general and,
        therefore,
        preferable to the <c>do-while</c> structure.
        Use <c>do-while</c> only when at least one iteration must occur.
      </p>
    </principle>
    
    
   
      
 <exercises xml:id="self-study-exercisesC18"><title>Self-Study Exercises</title>
        <p>
          Identify and fix the syntax error in the following <c>do-while</c> loop structures.
        </p>
<exercise label="bugdowhileloop1">
  <title>Do While Loop Bugs 1</title>
<statement>
        <p>Fix the bugs in the following do-while loop.       
<program language="java" interactive="activecode"><input>
public class Debug
{
   public static void main(String[] args)
   {  
      int k = 0;
      do while (k &lt; 100)
      {    
        System.out.println(k);
        k++
      }
    }
  }
 </input></program>
</p></statement>
<solution>
  <program language="java"><input>
    int k = 0;
    do while (k &lt; 100) &lt;&lt; Misplaced condition
    {
         System.out.println(k);
         k++;
    }                    &lt;&lt; Belongs here
     </input></program>
</solution>
   </exercise>
  
   <exercise label="bugdowhileloop2">
    <title>Do While Loop Bugs 2</title>
    <statement>
            <p>Fix the bugs in the following do-while loop.         
    <program language="java" interactive="activecode"><input>
    public class Debug
    {
       public static void main(String[] args)
       {  
          int k = 0;
          do {
              System.out.println(k);
              k++;
          } while (k &lt; 12)
        }
    }
 </input></program>
</p></statement>
<solution>
  <program language="java"><input>
    int k = 0;
    do {
        System.out.println(k);
        k++;
    } while (k &lt; 12) &lt;&lt; Missing semicolon
     </input></program>
</solution>
 </exercise>
           
          
          <exercise label="count7">
            <title>Count by 7's</title>
            <statement>
            <p>Your sister has moved on to counting by sevens.
              Write a <c>do-while</c> loop that prints the following sequence of numbers: 
              1, 8, 15, 22, 29, 36, 43.
             </p>
          </statement>
<program language="java" interactive="activecode"><input>
public class CountBy7
{
  public static void main(String[] args)
  {
   /*  Write a for loop that counts by 7 and 
       prints the following sequence of numbers: 
        1, 8, 15, 22, 29, 36, 43.
    */
      
      
      
   }
}
           </input></program>
           <solution>
            <p>
              Your sister has moved on to counting by sevens.
              Write a <c>do-while</c> loop that prints the following sequence of numbers: 1, 8, 15, 22, 29, 36, 43.
     <program language="java"><input>
n = 1;      // Initializer
do {
  System.out.print(n + " ");
  n += 7;                 // Updater
} while (n &lt;= 43);     // Loop re-entry condition
</input></program>
  </p>
           </solution>
          </exercise>
      

    
          <exercise label="pizzaEx">
            <title>Pizza Costs</title><statement><p>
            Do the following coding assignment 
            using a Java development environment that allows user input. As the owner of Pizza Heaven,
          every night at the close of business you quickly enter the price of every pizza ordered that day.
          You take the data from the servers' receipts.
          Pizzas cost $8, $10, or
          (the Heavenly Special)
          $15.
          You enter the data without dollar signs,
          and use 99 to indicate you're finished for the day.
          Write a Java method to input and validate a single pizza data item.
          If an incorrect price is entered,
          the program should print an error message and prompt for corrected input.
          Correct input is used to compute a daily total.
        </p></statement>
      <solution>
        <p>
          Write a method to input and validate pizza sales.
 <program language="java"><input>
public int getAndValidatePizzaPrice() { // Uses KeyboardReader
  int pizza = 0;
  do {
    reader.prompt("Input a pizza price (8, 10, or 15) ");
    reader.prompt("or 99 to end the list >> ");
    pizza = reader.getKeyboardInteger();
    if ((pizza != 99) &amp;&amp; (pizza != 8) &amp;&amp; (pizza != 10) &amp;&amp; (pizza != 15))
      System.out.println("Error: you've entered an "
       + "invalid pizza price\n");    // Error input
    else                               // OK input
        System.out.println("You input " + pizza + "\n");
  } while ((pizza != 99) &amp;&amp; (pizza != 8) &amp;&amp; (pizza != 10) &amp;&amp; (pizza != 15));
  return pizza;
} // getAndValidatePizzaPrice()
 </input></program>
        </p>
      </solution>
      </exercise>
      
        
          <exercise label="pizzaCodes"><title>Pizza Codes</title><statement><p>
            Do the following coding assignment 
            using a Java development environment that allows user input. 
            Because the pizza prices in the previous exercise are fixed,
          change the method so you can save time on keyboarding.
          Instead of entering the price,
          you'll enter codes of 1, 2, or 3
          (corresponding to the $8, $10, and $15 pizzas),
          and 0 to indicate that you're finished.
          Validate that the data value entered is correct and then convert it to the corresponding price before returning it.
        </p></statement>
      <solution>
        <p>
          Write a method to input and validate pizza sales using the numbers 1, 2, and 3 to represent pizzas at different price levels.
 <program language="java"><input>
public int getAndValidatePizzaPrice() { // Uses KeyboardReader
  int pizza = 0;
  do {
    reader.prompt("Input a 1,2 or 3 to indicate pizza"
              + "price ( 1(8), 2(10), or 3($15) ) ");
    reader.prompt("or 0 to end the list >> ");
    pizza = reader.getKeyboardInteger();
    if ((pizza &lt; 0) || (pizza > 3))  // Error check
        System.out.println("Error: you've entered an "
                                + "invalid value\n");
    else                                // OK input
        System.out.println("You input " + pizza + "\n");
  } while ( (pizza &lt; 0) || (pizza > 3) );
  if (pizza == 1)
    return 8;
  else if (pizza == 2)
    return 10;
  else if (pizza == 3)
    return 15;
  else
    return 0;
  } // getAndValidatePizzaPrice()
 </input></program>
        </p>
      </solution>
      </exercise>
        
      </exercises>
        </subsection>
</section>