<section xml:id="example-processing-namesand-passwords">
  <title>Example: Processing Names and Passwords</title>
  <p>
    Many computer systems store user names and passwords as delimited strings, such as
  </p>
 <program language="java"><input>
smith:bg1s5xxx
mccarthy:2ffo900ssi
cho:biff4534ddee4w
 </input></program>
  <p>
    Obviously, if the system is going to process passwords,
    it needs some way to take apart these name-password pairs.
  </p>
  <p>
    Let's write methods to help perform this task.
    The first method will be passed a name-password pair and will return the name.
    The second method will be passed a name-password pair and will return the password.
    In both cases,
    the method takes a single <c>String</c> parameter and returns a <c>String</c> result: 
  </p>
 <program language="java"><input>
String getName(String str);
String getPassword(String str);
 </input></program>
  <p>
    To solve this problem we can make use of two <c>String</c> methods.
    We use the <c>indexOf()</c> method to find the location of the
    <em>delimiter</em><mdash/>which is the colon,
    <q><c>:</c></q>
    <mdash/>in the name-password pair and then we use <c>substring()</c> to take the substring occurring before or after the delimiter.
    It may be easier to see this if we take a particular example:
  </p>
 <program language="java"><input>
 INDEX:           1         2
 INDEX: 012345678901234567890
        jones:b34rdffg12    // (1)
        cho:rtf546          // (2)
 </input></program>
  <p>
    In the first case,
    the delimiter occurs at index position 5 in the string.
    Therefore, to take the name substring,
    we would use <c>substring(0,5)</c>. To take the password substring,
    we would use <c>substring(6)</c>. Of course,
    in the general case,
    we would use variables to indicate the position of the delimiter,
    as in the following methods:
  </p>
  <p>
    
  </p>
  <listing xml:id="lst-namepasswd">
  <caption>The <c>getName()</c> and <c>getPassword()</c> methods.</caption>
 <program language="java"><input>
public static String getName(String str) 
{
  int posColon = str.indexOf(':');  // Find the delimiter
  String result = str.substring(0, posColon); // Get name
  return result;
}
public static String getPassword(String str) 
{
  int posColon = str.indexOf(':');  // Find the delimiter
  String result = str.substring(posColon + 1); // Get passwd
  return result;
}
 </input></program>
 </listing>
  <p>
    Note in both of these cases we have used local variables, 
    <c>posColon</c> and result , to store the intermediate 
    results of the computation<mdash/>that is,
    the index of the
    <q><c>:</c></q>
    and the name or password substring.
  </p>
  <p>
    An alternative way to code these operations would be to use nested method 
    calls to reduce the code to a single line:
  </p>
 <program language="java"><input>
return str.substring(0, str.indexOf(':'));
 </input></program>
  <p>
    In this line,
    the result of <c>str.indexOf(<c>'</c>:<c>'</c>)</c> is passed immediately 
    as the second argument to <c>str.substring()</c>. This version dispenses 
    with the need for additional variables.
    And the result in this case is not unreasonably complicated.
    But whenever you are faced with a trade-off of this sort <mdash/>nesting versus additional variables 
    <mdash/>you should opt for the style that will be easier to read and understand.
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: Nested Method Calls</title>
    <p>
      Nested method calls are fine as long as there are not too many levels of nesting.
      The goal should be to produce code that is easy to read and understand.
    </p>
  </principle>
</section>