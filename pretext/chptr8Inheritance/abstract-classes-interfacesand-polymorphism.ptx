<section xml:id="abstract-classes-interfacesand-polymorphism">
  <title>Abstract Classes, Interfaces,
  and Polymorphism</title>
  <introduction>
    <p>
      In Java, there are three kinds of <term>polymorphism</term>>:
      <ul>
        <li>
          <p>
            <term>Overriding</term> an inherited method.
          </p>
        </li>
        <li>
          <p>
            Implementing an <term>abstract</term> method.
          </p>
        </li>
        <li>
          <p>
            Implementing a Java <term>interface</term>.
          </p>
        </li>
      </ul>
    </p>
    <p>
      In the previous section we saw examples of the first type of polymorphism.
      All forms of polymorphism are based on Java's dynamic binding mechanism.
      In this section we will develop an example that illustrates the other two types of polymorphism and discuss some of the design implications involved in choosing one or the other approach.
    </p>
  </introduction>
  <subsection xml:id="fig-animals">
    <title>Implementing an Abstract Method</title>
    <!--<p>
      An important feature of polymorphism is the ability to 
      invoke a polymorphic method that has been defined only abstractly in the superclass.
      To illustrate this feature,
      we will develop a hierarchy of simulated animals that make characteristic animal sounds,
      an example that is widely used to illustrate polymorphism.
    </p>-->
    <p>
      As we all know from our childhood,
      animals have distinctive ways of  speaking.
      A cow goes
      <q>moo</q>; a pig goes
      <q>oink</q>; and so on.
      Let's design a hierarchy of animals that simulates this characteristic by printing the characteristic sounds that these animals make.
      We want to design our classes so that any given animal will return something like
      <q>I am a cow and I go moo,</q>
      when we invoke the <c>toString()</c> method.
      Moreover, we want to design this collection of classes so that it is extensible<mdash/>that is,
      so that we can continue to add new animals to our menagerie without having to change any of the code in the other classes.
    </p>
    <p>
      <xref ref="fig-animals">Figure</xref>
      provides a summary of the design we will implement.
      The
<c>Animal</c> class is an <term>abstract</term> class.
      That's why its name is italicized in the UML diagram.
      The reason that this class is abstract is because its <c>speak()</c> method is an
      <term>abstract method</term>,
      which is a method definition that does not contain an implementation.
      That is, the method definition contains just the method's signature,
      not its body.
      Any class that contains an abstract method,
      must itself be declared abstract.
      <image width="50%" source="chptr08/animals.png"/> 
      Here is the definition of the <c>Animal</c> class:
    </p>
 <program language="java"><input>
public abstract class Animal {
    protected String kind; // Cow, pig, cat, etc.
    public Animal()  {  }
    public String toString() {
        return "I am a " + kind + " and I go " + speak();
    }
    public abstract String speak();   // Abstract method
  }
 </input></program>
    <p>
      Note how we declare the abstract method (<c>speak()</c>) and the abstract class.
      Because one or more of its methods is not implemented,
      an abstract class cannot be instantiated.
      That is, you cannot say:
    </p>
 <program language="java"><input>
Animal animal = new Animal(); // Error: Animal is abstract
 </input></program>
    <p>
      Even though it is not necessary,
      we give the <c>Animal</c> class a constructor.
      If we had left this off, Java would have supplied a default constructor that would be invoked when <c>Animal</c> subclasses are created.
    </p>
    <p>
      Java has the following rules on using abstract methods and  classes.
      <ul>
        <li>
          <p>
            Any class containing an <c>abstract</c> method must be declared an abstract class.
          </p>
        </li>
        <li>
          <p>
            An <c>abstract</c> class cannot be instantiated.
            It must be subclassed.
          </p>
        </li>
        <li>
          <p>
            A subclass of an <c>abstract</c> class may be instantiated only if it implements <em>all</em>
            of the superclass's <c>abstract</c> methods.
            A subclass that implements only some of the <c>abstract</c> methods must itself be declared <c>abstract</c>.
          </p>
        </li>
        <li>
          <p>
            A class may be declared <c>abstract</c> even it contains no <c>abstract</c> methods.
            It could, for example,
            contain instance variables that are common to all its subclasses.
          </p>
        </li>
      </ul>
    </p>
    <p>
      Even though an abstract method is not implemented in the superclass,
      it can be called in the superclass.
      Indeed, note how the <c>toString()</c> method calls the abstract <c>speak()</c> method.
      The reason that this works in Java is due to the dynamic binding mechanism.
      The polymorphic <c>speak()</c> method will be defined in the various <c>Animal</c> subclasses.
      When the <c>Animal.toString()</c> method is called, Java will decide which actual <c>speak()</c> method to call based on what subclass of <c>Animal</c> is involved.
    </p>
    <p>
      Definitions for two such subclasses are shown in <xref ref="fig-animalsubs">Figure</xref>.
    </p>
    <figure xml:id="fig-animalsubs">
      <caption>Two <c>Animal</c> subclasses.</caption>
 <program language="java"><input>
public class Cat extends Animal {
    public Cat() {
        kind = "cat";
    }
    public String speak() {
        return "meow";
    }
  }
public class Cow extends Animal {
    public Cow() {
        kind = "cow";
    }
    public String speak() {
        return "moo";
    }
  }
 </input></program>
    </figure>


    <p>
      In each case the subclass extends the <c>Animal</c> class and provides its own constructor and its own implementation of the <c>speak()</c> method.
      Note that in their respective constructors,
      we can refer to the <c>kind</c> instance variable,
      which is inherited from the <c>Animal</c> class.
      By declaring <c>kind</c> as a <c>protected</c> variable,
      it is inherited by all <c>Animal</c> subclasses but hidden from all other classes.
      On the other hand,
      if <c>kind</c> had been declared
<c>public</c>, it would be inherited by <c>Animal</c> subclasses,
      but it would also be accessible to every other class,
      which would violate the information hiding principle.
    </p>
    <p>
      Given these definitions,
      we can now demonstrate the power and flexibility of inheritance and polymorphism. Run the code below to see it in action.
      </p>
<exercise label="animals">
<statement>Run the following code. Can you change what the cow and dog say?</statement>
<program language="java" interactive="activecode"><input>
  /*
  * File: Animal.java
  * Author: Java, Java, Java
  * Description: Animal is an abstract class. It's speak()
  *  method is abstract and meant to be implemented in 
  *  Animal subclasses, such as Dog, Cat.
  */
 
 public abstract class Animal {
     protected String kind; // Cow, pig, cat, etc.
 
     /**
      * Animal() default constuctor
      */
     public Animal()  {  }
 
     /**
      * toString() method overrides the Object toString() method.
      */
     public String toString() {
         return "I am a " + kind + " and I go " + speak();
     }
 
     /**
      * speak() returns an appropriate String representing
      *  the way a certain kind of animal speaks. It is 
      *  implemented in the Animal subclasses.
      */
     public abstract String speak();   // Abstract method
 
     /** 
      * main() creates instances of Animal subclasses and invokes
      *  their speak() methods, illustrating inheritance and 
      *  polymorphism.
      */
     public static void main(String args[]) {
         Animal animal = new Cow();
         System.out.println(animal.toString());
         
         animal = new Cat();
         System.out.println(animal.toString());
     }
 }
class Cat extends Animal {
  public Cat() {
      kind = "cat";
  }
  public String speak() {
      return "meow";
  }
}
class Cow extends Animal {
  public Cow() {
      kind = "cow";
  }
  public String speak() {
      return "moo";
  }
}
</input></program>
</exercise>

<p>
      Consider the following code segment:
    </p>
 <program language="java"><input>
 Animal animal = new Cow();
 System.out.println(animal.toString()); // A cow goes moo
 animal = new Cat();
 System.out.println(animal.toString()); // A cat goes meow
 </input></program>
    <p>
      We first create a <c>Cow</c> object and then invoke its (inherited) <c>toString()</c> method.
      It returns,
      <q>I am a cow and I go moo.</q>
      We then create a <c>Cat</c> object and invoke its (inherited)
<c>toString()</c> method,
      which returns,
      <q>I am a cat and I go meow.</q>
      In other words, Java is able to determine the appropriate implementation of <c>speak()</c> at run time in each case.
      The invocation of the abstract <c>speak()</c> method in the <c>Animal.toString()</c> method is a second form of polymorphism.
    </p>
    <p>
      What is the advantage of polymorphism here?
      The main advantage is the  extensibility that it affords our <c>Animal</c> hierarchy.
      We can define and use completely new <c>Animal</c> subclasses without redefining or recompiling the rest of the classes in the hierarchy.
      Note that the <c>toString()</c> method in the <c>Animal</c> class does not need to know what type of <c>Animal</c> subclass will be executing its <c>speak()</c> method.
      The <c>toString()</c> method will work correctly for any subclass of <c>Animal</c> because every non-abstract subclass of <c>Animal</c> must implement the <c>speak()</c> method.
    </p>
    <p>
      To get a better appreciation of the flexibility and extensibility of this design,
      it might be helpful to consider an alternative design that does not use polymorphism.
      One such alternative would be to define each
<c>Animal</c> subclass with its own speaking method.
      A <c>Cow</c> would have a <c>moo()</c> method;
      a <c>Cat</c> would have a <c>meow()</c> method;
      and so forth.
      Given this design,
      we could use a <c>switch</c> statement to select the appropriate method call.
      For example, consider the following method definition:
    </p>
 <program language="java"><input>
public String talk(Animal a) {
  if (a instanceof Cow)
     return "I am a " + kind + " and I go " + a.moo();
  else if (a instanceof Cat)
     return "I am a " + kind + " and I go " + a.meow();
  else
    return "I don't know what I am";
  }
 </input></program>
    <p>
      In this example,
      we introduce the <c>instanceof</c> operator,
      which is a built-in boolean operator.
      It returns true if the object on its left-hand side is an instance of the class on its right-hand side.
    </p>
    <p>
      The <c>talk()</c> method would produce more or less the same result.
      If you call <c>talk(new Cow())</c>, it will return
      <q>I am a cow and I go moo.</q>
      However, with this design,
      it is not possible to extend the
<c>Animal</c> hierarchy without rewriting and recompiling the <c>talk()</c> method.
    </p>
    <p>
      Thus, one of the chief advantages of using polymorphism is the great  flexibility and extensibility it affords.
      We can define new <c>Animal</c> subclasses and define their <c>speak()</c> methods.
      These will all work with the <c>toString()</c> method in the <c>Animal</c> class,
      without any need to revise that method.
    </p>
    <p>
      Another advantage of using abstract methods is the control that it gives the designer of the <c>Animal</c> hierarchy.
      By making it an abstract class with an abstract <c>speak()</c> method,
      any non-abstract
<c>Animal</c> subclass must implement the <c>speak()</c> method.
      This lends a great degree of predictability to the subclasses in the hierarchy,
      making it easier to use them in applications.
    </p>
    </subsection>
    <exercises><title>Self-Study Exercises</title>          
            <exercise label="PigEx">
              <statement><p>
                Define an <c>Animal</c> subclass named <c>Pig</c>, which goes
                <q>oink.</q>
              </p></statement>
              <program language="java" interactive="activecode"><input>
                /*
                *  Animal is an abstract class. It's speak()
                *  method is abstract and meant to be implemented in 
                *  Animal subclasses, such as Dog, Cat.
                */
               
               public abstract class Animal {
                   protected String kind; // Cow, pig, cat, etc.
               
                   /**
                    * Animal() default constuctor
                    */
                   public Animal()  {  }
               
                   /**
                    * toString() method overrides the Object toString() method.
                    */
                   public String toString() {
                       return "I am a " + kind + " and I go " + speak();
                   }
               
                   /**
                    * speak() returns an appropriate String representing
                    *  the way a certain kind of animal speaks. It is 
                    *  implemented in the Animal subclasses.
                    */
                   public abstract String speak();   // Abstract method
               
                   /** 
                    * main() creates instances of Animal subclasses and invokes
                    *  their speak() methods, illustrating inheritance and 
                    *  polymorphism.
                    */
                   public static void main(String args[]) {
                       Animal animal = new Cow();
                       System.out.println(animal.toString());
                       
                       animal = new Pig();
                       System.out.println(animal.toString());
                   }
               }
              class Cat extends Animal {
                public Cat() {
                    kind = "cat";
                }
                public String speak() {
                    return "meow";
                }
              }
              class Cow extends Animal {
                public Cow() {
                    kind = "cow";
                }
                public String speak() {
                    return "moo";
                }
              }
              </input></program>
              </exercise>
              
      <exercise label="talk">
<statement><p>Modify the <c>talk()</c> method  
  to incorporate the <c>Pig</c> class.</p></statement>
  <program language="java" interactive="activecode"><input>
   public class Animal {
   
    protected String kind; // Cow, pig, cat, etc.

    public String talk(Animal a) {
      if (a instanceof Cow)
         return "I am a " + kind + " and I go " + a.moo();
      else if (a instanceof Cat)
         return "I am a " + kind + " and I go " + a.meow();
      else
        return "I don't know what I am";
      }

    public static void main(String args[]) {
      Animal animal = new Cow();
      System.out.println( animal.talk(animal) );
      
      animal = new Cat();
      System.out.println( animal.talk(animal) );
  }
}
  class Cat extends Animal {
    public Cat() {
        kind = "cat";
    }
    public String meow() {
        return "meow";
    }
  }
   class Pig extends Animal {
    public Pig() {
      kind = "pig";
  }
  public String oink() {
      return "oink";
  }  
   } 
  
  class Cow extends Animal {
    public Cow() {
        kind = "cow";
    }
    public String moo() {
        return "moo";
    }
   }
  </input>
   </program>
      </exercise>  
            
         
            </exercises>
 
   <subsection>
    <title>Implementing a Java Interface</title>
    <p>
      A third form of polymorphism results through the implementation of Java <term>interfaces</term>,
      which are like classes but contain only abstract method definitions and constants (<c>final</c>) variables.
      An  interface cannot contain instance variables.
      We have already seen interfaces,
      such as when we encountered the <c>ActionListener</c> interface in Chapter<nbsp/>4.
    </p>
    <p>
      The designer of an interface specifies what methods will be implemented by classes that
      <em>implement</em> the interface.
      This is similar to what we did when we implemented the abstract <c>speak()</c> method in the animal example.
      The difference between implementing a method from an interface and from an abstract superclass is that a subclass <em>extends</em>
      an abstract superclass but it <em>implements</em> an interface.
    </p>
    <p>
      Java's interface mechanism gives us another way to design polymorphic methods.
      To see how this works,
      we will provide an alternative design for our animal hierarchy.
      Rather than defining <c>speak()</c> as an abstract method within the <c>Animal</c> superclass,
      we will define it as an abstract method in the <c>Speakable</c> interface (Fig.
      <xref ref="fig-speakable"></xref>).
    </p>
    <figure xml:id="fig-speakable">
      <caption>Defining and using the  <c>Speakable</c> interface.</caption>
 <program language="java"><input>
public interface Speakable {
    public String speak();
  }
public class Animal {
    protected String kind; // Cow, pig, cat, etc.
    public Animal()  {  }
    public String toString() {
        return "I am a " + kind + " and I go " +
               ((Speakable)this).speak();
    }
  }
 </input></program>
    </figure>
    <p>
      Note the differences between this definition of <c>Animal</c> and the previous definition.
      This version no longer contains the abstract <c>speak()</c> method.
      Therefore, the class itself is not an abstract class.
      However, because the <c>speak()</c> method is not declared in this class,
      we cannot call the <c>speak()</c> method in the <c>toString()</c> method,
      unless we cast this object into a <c>Speakable</c> object.
    </p>
    <p>
      We encountered the cast operation in Chapter<nbsp/>5,
      where we used it with  primitive types such as <c>(int)</c> and <c>(char)</c>. Here,
      we use it to specify the actual type of some object.
      In this <c>toString()</c> example, <c>this</c> object is some type of <c>Animal</c> subclass,
      such as a <c>Cat</c>. The cast operation, <c>(Speakable)</c>, changes the object's actual type to <c>Speakable</c>, which syntactically allows its <c>speak()</c> method to be called.
    </p>
    <p>
      Given these definitions, <c>Animal</c> subclasses will now <c>extend</c> the <c>Animal</c> class and <c>implement</c> the <c>Speakable</c> interface:
    </p>
 <program language="java"><input>
public class Cat extends Animal implements Speakable {
    public Cat() { kind = "cat"; }
    public String speak() { return "meow";  }}
public class Cow extends Animal implements Speakable {
    public Cow() { kind = "cow";  }
    public String speak() { return "moo";  }}
 </input></program>
    <p>
      To implement a Java interface,
      one must provide a method implementation for each of the abstract methods in the interface.
      In this case there is only one abstract method,
      the <c>speak()</c> method.
    </p>
    <p>
      Note, again,
      the expression from the <c>Animal.toString()</c> class
    </p>
 <program language="java"><input>
((Speakable)this).speak();
 </input></program>
    <p>
      which casts <c>this</c> object into a <c>Speakable</c> object.
      The reason that this cast is required is because an <c>Animal</c> does not 
      necessarily have a <c>speak()</c> method.
      A <c>speak()</c> method is not defined in the <c>Animal</c> class.
      However, the <c>Cat</c> subclass of <c>Animal</c> does implement a <c>sleep()</c> method as part of its
<c>Speakable</c> interface.
      Therefore, in order to invoke <c>speak()</c> on an object from one of the <c>Animal</c> subclasses,
      the object must actually be a <c>Speakable</c> and we must perform the cast as shown here.
    </p>
    <p>
      This illustrates, by the way,
      that a <c>Cat</c>, by virtue of extending  the <c>Animal</c> class and implementing the <c>Speakable</c> interface,
      is both an <c>Animal</c> and a <c>Speakable</c>. In general,
      a class that implements an interface,
      has that interface as one of its types.
      Interface implementation is itself a form of inheritance.
      A Java class can be a direct subclass of only one superclass.
      But it can implement any number of interfaces.
    </p>
    <p>
      Given these definitions of the <c>Cow</c> and <c>Cat</c> subclasses,
      the following code segment will produce the same results as in the previous section.
    </p>
 <program language="java"><input>
Animal animal = new Cow();
 System.out.println(animal.toString()); // A cow goes moo
 animal = new Cat();
 System.out.println(animal.toString()); // A cat goes meow
 </input></program>
    
 <p>Try it out below.</p>
 <exercise label="animalsInterface">
  <statement><p>
   Run the code below to see an Interface implementation.
  </p></statement>
  <program language="java" interactive="activecode"><input>
    /*
    * File: Animal.java
    * Author: Java, Java, Java
    * Description: Animal is a superclass. It is meant to be
    *  overridden by subclasses such as Cat, Dog that implement
    *  the Speakable interface.
    */
   public class Animal {
       protected String kind;  // Cow, pig, cat, etc.
   
       /**
        * Animal() default constuctor
        */
       public Animal()  {
       }
   
       /**
        * toString() method overrides the Object toString() method. 
        *  Note how it invokes the speak() method defined in the 
        *  Speakable interface. 
        */
       public String toString() {
           return "I am a " + kind + " and I go " + ((Speakable) this).speak();
       }
   
       /** 
        * main() creates instances of Animal subclasses and invokes
        *  their toString() methods, illustrating inheritance and 
        *  polymorphism.
        */
       public static void main(String args[]) {
           Animal animal = new Cow();
           System.out.println(animal.toString());
          
           animal = new Cat();
           System.out.println(animal.toString());
       }
   }
   /*
   * File: Speakable.java
   * Author: Java, Java, Java
   * Description: Speakable is an abstract interface. It
   *  defines the speak() method, which is meant to be
   *  implemented by Animal subclasses.
   */
  
   interface Speakable {
      /**
       * speak() returns a String that represents
       *  how an Animal speaks.
       */
      public abstract String speak();  
  }

  /*
 * File: Cat.java
 * Author: Java, Java, Java
 * Description: Cat is a subclass of Animal and it implements 
 *  the Speakable interface.
 */
class Cat extends Animal implements Speakable {

    /**
     * Cat() constructor sets its kind variable
     */
    public Cat() {
        kind = "cat";
    }

    /**
     * speak() implements the speak() method of the Speakable interface.
     *  When a cat speaks it says meow.
     */
    public String speak() {
        return "meow";
    }
}

/*
 * File: Cow.java
 * Author: Java, Java, Java
 * Description: Cow is a subclass of Animal.
 */
 class Cow extends Animal implements Speakable {
    /**
     * Cow() constructor sets its kind variable
     */
    public Cow() {
        kind = "cow";
    }

    /**
     * speak() implements the speak() method from the Speakable interface. 
     *  When a cow speaks it says moo.
     */
    public String speak() {
        return "moo";
    }
}   
  </input></program>
  </exercise>
 <p>
      Although the design is different,
      both approaches produce the same result.
      We will put off, for now,
      the question of how one decides whether to use an abstract method or a Java interface.
      We will get to this question when we design the <c>TwoPlayerGame</c> class hierarchy later in this chapter.
    </p>
  </subsection>
</section>