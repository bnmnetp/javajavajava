<section xml:id="sec-dialogs">
  <title>From the Java Library: <c>JOptionPane</c></title>
  <p>
    A <term>dialog box</term>
        <idx><h>dialog box</h></idx>
    is a window that can be opened by a program to communicate in some way with the user.
    Dialog boxes come in many varieties and have many uses in a GUI environment.
    You've undoubtedly encountered them when using your own computer.
  </p>
  <p>
    For example, a <em>file dialog</em>
    is opened whenever you want to open or save a file.
    It provides an interface that lets you name the file 
    (<url href="https://docs.oracle.com/javase/7/docs/api/java/awt/FileDialog.html" visual="">https://docs.oracle.com/javase/7/docs/api/java/awt/FileDialog.html</url>)
     and helps you search through the computer's directory structure to find a file.
  </p>
  <p>
    A <em>warning dialog</em> or <term>error dialog</term>
        <idx><h>error dialog</h></idx>
    is opened whenever a program needs to notify or warn you that some kind of error occurred.
    It usually presents an error message and an OK button that you click to dismiss the dialog.
  </p>
  <p>
    Dialogs are easy to create and use in Java.
    The Swing component set provides several different kinds of basic dialogs that can be incorporated into your program with one or two lines of code.
    For example,
    the <c>IntFieldTester</c> class makes use of a simple message dialog to report an input error to the user.
    This dialog was created by the following code segment in the program (see <xref ref="fig-intbound">Figure</xref>):
  </p>
 <program language="java"><input>
catch (NumberFormatException e) {
  JOptionPane.showMessageDialog(this,
    "The input must be an integer.  Please reenter.");
  }
 </input></program>
  <p>
    This method call displays the window shown in <xref ref="fig-errmsg">Figure</xref>.
    It contains the error message and an OK button that is used to close the window.
    The
<c>showMessageDialog()</c> method is a <c>static</c> method of the
<c>javax.swing.JOptionPane</c> class.
    This class provides a collection of similar methods for creating and displaying 
    basic dialog boxes.
    <figure xml:id="fig-errmsg">
      <caption>Dialog Window</caption>
    <image width="50%" source="chptr10/p634f1.png"/> 
    </figure>
    A dialog differs from other kinds of top-level windows<mdash/>such as
<c>JApplet</c> and <c>JFrame</c><mdash/>in that it is associated with another window 
(<xref ref="fig-errmsg"></xref>).
    The first parameter in this version of the <c>showMessageDialog()</c> method is a reference to the dialog's parent window.
    The second parameter is a <c>String</c> representing the message.
  </p>
  <p>
    The basic message dialog used in this example is known as a
    <term>modal dialog</term>.
        <idx><h>modal dialog</h></idx>
    This means that once it's been displayed,
    you can't do anything else until you click the OK button and dismiss the dialog.
    It's also possible to create <em>nonmodal</em> dialogs.
    These can stay around on the screen while you move on to  other tasks.
  </p>
  <p>
    Note that the dialog box also contains an <em>icon</em>
    that symbolizes the purpose of the message (<xref ref="fig-errmsg2"></xref>).
    The icon is representative of the dialog's message type.
  </p>
  <figure xml:id="fig-errmsg2">
    <caption>An error dialog.</caption>
    <image width="73%" source="chptr10/errmsg2.png"/>
  </figure>
  <p>
    
    Among the basic message types available for the icon in <c>JOptionPane</c> are the following:
  </p>
 <program language="java"><input>
JOptionPane.PLAIN_MESSAGE
JOptionPane.INFORMATIONAL_MESSAGE     // Default
JOptionPane.WARNING_MESSAGE
JOptionPane.QUESTION_MESSAGE
JOptionPane.ERROR_MESSAGE
 </input></program>
  <p>
    To set the dialog to anything other than the default (informational) type,
    you can use the following version of
<c>showMessageDialog()</c>:
  </p>
 <program language="java"><input>
showMessageDialog(Component comp, Object message, String title, int msgType);
 </input></program>
  <p>
    The first parameter is a reference to the parent window.
    The second is the message string.
    The third is a string used as the dialog window's title,
    and the fourth is one of the five dialog types.
    For example,
    we can change our dialog to an error dialog with the following statement:
  </p>
 <program language="java"><input>
catch (IntOutOfRangeException e) {
    JOptionPane.showMessageDialog(this,
            e.getMessage(),
            "Error dialog",
            JOptionPane.ERROR_MESSAGE);
          }
 </input></program>
  <p>
    This would produce the dialog shown in <xref ref="fig-errmsg2">Figure</xref>.
  </p>
  <p>
    The other kinds of basic dialogs provided by the <c>JOptionPane</c> class are listed 
    in <xref ref="tab-dialog">Table</xref>.
    All of the dialogs listed there can be created with a line or two of code.
    In addition to  these,
    it's also possible to create sophisticated dialogs that can be as customized as any other GUI interface you can build in Java.
  </p>
  <table  xml:id="tab-dialog">
    <title>Basic dialogs provided by <c>JOptionPane</c>.</title>
    <tabular>
      <row bottom="minor">
        <cell><term>Dialog</term></cell>
        <cell><term>Description</term></cell>
      </row>
      <row>
        <cell>Message Dialog</cell>
        <cell>Presents a simple error or informational message </cell>
        </row>
        <row>
        <cell>Confirm Dialog</cell>
        <cell>Prompts the user to confirm a particular action </cell>
      </row>
      <row><cell>          Option Dialog</cell>
        <cell>Lets the user choose from some options</cell>
        </row>
        <row><cell>
          Input Dialog</cell>
        <cell>Prompts and inputs a string</cell>
      </row>
    </tabular>
  </table>
  <p>
    In this chapter,
    you have learned how to handle exceptional conditions that occur in programs.
    You now know that Java has a default exception handler that can take of many situations,
    and you also understand that proper program design using Java excpetion-handling elements helps deal with many other situations.
    This chapter continues the emphasis on good program design for creating useful,
    stable programs.
  </p>
 
 
</section>