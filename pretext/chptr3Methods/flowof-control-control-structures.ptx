<section xml:id="flowof-control-control-structures">
  <title>Flow of Control: Control Structures</title>
  <introduction>
    <p>
      We have been ignoring a couple of problems with the definition of the <c>OneRowNim</c> class.
      One problem is that we would describe a One Row Nim game as two players taking turns until there are no more sticks.
      An object using <c>OneRowNim</c> would need a way to repeatedly execute a group of statements.
      One command in Java that controls the repetition of a block of statements is called a <em>while loop</em>.
      We will consider it later in this section.
    </p>
    <p>
      A second problem is with the definition of <c>takeSticks()</c>:
    </p>
 <program language="java"><input>
  public void takeSticks(int num)
  {   nSticks - num;
      player = 3 - player;
  }
 </input></program>
    <p>
      It is possible to call this method with an argument greater than 3 or less than 1.
      The call <c>game.takeSticks(5)</c> will remove 5 sticks even though the rules of One Row Nim say that you must remove 1, 2, or 3.
      While one might assume that the user interface should prevent the user from breaking this rule,
      it is a far better design if it was dealt with in <c>OneRowNim</c>. To do this we need a Java structure that executes different statements depending on whether the parameter is greater than 3, less than 1, or between 1 and 3.
      The Java <term>if-else</term> statement has this capability.
      A fuller treatment of control structures appears in Chapter 6, but in this section,
      we will briefly introduce a couple of simple control structures.
      This will enable us to write programs that take more interesting actions.
    </p>
  </introduction>
  <subsection xml:id="sec-if">
    <title>The Simple If Statement</title>
    <p>
      A <term>selection</term> control structure,
      allows a program to select between two or more alternative paths of execution.
      The <term>if statement</term> is the most basic selection control structure in Java.
      Most programming languages have its equivalent. 
    </p>
    <principle>
      <title>If Statement</title>
      <p>
        The <term>if statement</term><idx><h>if statement</h></idx> has the following syntax:
      </p>
      <p>
        <program language="java"><input>
        if (boolean expression) 
            contained statement;
      </input></program>
      </p>
    </principle>
    <p>
      The statement contained in the if statement can be any valid Java statement,
      including a compound statement.
      Recall from Chapter 2 that a compound statement is a set of statements contained within curly braces.
      The <c>boolean expression</c> is an expression that is either <c>true</c> or <c>false</c>. 
      We have seen examples of boolean expressions that involve <c>int</c> variables, <c>int</c> values,
      and the inequality or equality operators.
      A method call to a method with a <c>boolean</c> result type is another example of a <c>boolean</c> expression.
      Given this description of if statement syntax,
      the following are examples of valid if statements.   For readability,
      we usually write an if statement with its contained statement indented on the next line:
    </p>
 <program language="java"><input>
if (true) 
   System.out.println("Hello");
if (nSticks &lt;= 0) 
   System.out.println("game is over");
 </input></program>
    
    
    <p>
      The following are all examples of syntax errors involving the if statement:
    </p>
 <program language="java"><input>
if true                   // Parentheses are missing
   System.out.println("Hello");
if (nSticks &lt;= 0) return   // Semicolon missing
if ("true") return;  // "true" is not a boolean
if (true) "Hello";    // "Hello" is  not a statement
 </input></program>
    <p>
      Semantically, the if statement
      has the following interpretation: First,
      the boolean condition is evaluated.
      If it is true, then the contained statement is executed;
      if it is false, then the contained statement is not executed.
      This is shown in <xref ref="fig-if-flow">Figure</xref> below.   The flowchart clearly shows that program flow will take 
       one or the other of the alternative paths coming out of the diamond-shaped boolean condition box.
      The branch through the rectangular statement box will be taken when the boolean condition is true;
      otherwise the statement will be skipped.

      <figure xml:id="fig-if-flow">
        <caption>Flowchart of if statement.</caption>
      <image width="50%" source="chptr03/3f12.png"/>
      </figure>
      
    </p>

    <activity label="ifRainEx">
      <statement><p>Try the following code. Try changing the boolean isRaining to <c>false</c> and run again. 
        What does it print out? Trace through the code with Show CodeLens.</p></statement>
      <program language="java" interactive="activecode"><input>
      public class RainMonitor
         public static void main(String[] args)
         {
           boolean isRaining = true;
           if (isRaining)
              System.out.println("Take an umbrella!");
           System.out.println("Drive carefully");
         }
      }
     </input>
     <tests>
      import static org.junit.Assert.*;
      import org.junit.*;;
      import java.io.*;

      public class RunestoneTests extends CodeTestHelper
      {
          @Test
          public void testMain() throws IOException
          {
              String output = getMethodOutput("main");
              String expect = "Drive Carefully\n";
              boolean passed = getResults(expect, output, "Expected output from main after changing isRaining to false", true);
              assertTrue(passed);
          }
      }
      </tests>
    </program>  
  </activity> 
</subsection>
    <subsection><title>Relational Operators</title>
    
    <p>
      Most if statements have a boolean condition that uses relational operators like <c>==</c> (equal), 
      <c>!=</c> (not equal), <c>&lt;</c>, <c>&gt;</c>, <c>&lt;=</c>, <c>&gt;=</c>.
      The double equal sign <c>==</c> is used in if statements and other control structures to <em>test</em> a variable's value. 
      One equal sign (<c>-</c>) is used to assign a value to a variable like <c>player = 1;</c>, but two equal signs (<c>==</c>)
      are used to test the variable's value, so that <c>player == 1</c> will return <c>true</c> or <c>false</c>.
      </p>
      <principle>
        <title>DEBUGGING TIP: Equality and Assignment</title>
        <p>
          A common semantic error among beginning programmers is to use the assignment operator (=) when the equality operator (==) is intended.
        </p>
      </principle>

      <p>As another example,
      consider the definition of a <c>getPlayerString()</c> method for the <c>OneRowNim</c> class. 
</p>    
 <program language="java"><input>
public String getPlayerString()
{
  if (player == 1)
    return "Player One"; // Exit the method
  if (player == 2)
    return "Player Two"; // Exit the method
  return "Player error";   // Exit the method
}
 </input></program>



    <p>
      The flowchart in <xref ref="fig-getplayerflow">Figure</xref>
      shows the program flow of the entire <c>getPlayerString()</c> method.
     
    </p>
    <figure xml:id="fig-getplayerflow">
      <caption>Flowchart of the <c>getPlayerString()</c> method.</caption>
      <image width="73%" source="chptr03/player.png"/>
    </figure>
    <p>
      It is important to note that when a <term>return</term>
          <idx><h>return statement</h></idx>
      statement is executed in a method,
      control is returned immediately to the calling method.
      Thus, if <c>player == 1 </c> is true,
      the string
      <q>Player One</q>
      is returned to the calling method and the <c>getPlayerString()</c> method exits at this point.
      If it is false,
      then <c>player == 2</c> should be true
      (if we have a consistent state)
      and the string
      <q>Player Two</q>
      should be returned and the method exited.
      Thus, if we have a consistent state <mdash/> that is,
      if <c>player</c> has value 1 or 2<mdash/>then the third <c>return</c> statement should never be reached.
    </p>
    

    <activity label="ifNumEx">
      <statement><p>Run the following active code a couple times until you see all the possible outputs. It prints out whether a random number is positive or equal to 0. Add another if statement that tests if it is a negative number.
      </p></statement>
      <program language="java" interactive="activecode"><input>
    public class TestNumbers
    {
       public static void main(String[] args)
       {
           // Get a random number from -10 up to 10.
           int number = (int) (Math.random() * 21) - 10;
           System.out.println("The number is " + number);
    
           // is it positive?
           if (number > 0)
           {
               System.out.println(number + " is positive!");
           }
           // is it 0?
           if (number == 0)
           {
               System.out.println(number + " is zero!");
           }
           // is it negative?
           // Add another if statement
    
       }
    }
  </input>
   </program>
    </activity>
    </subsection>
    <subsection><title>Compound Statements inside Ifs</title>
    <p>
      The following example shows the more common case where the statement contained in an if statement can be a compound statement: 
    </p>
 <program language="java"><input>
if (player == 1)
{   
    String s = "Player One";
    System.out.print(s);
    System.out.println(" plays next");
    System.out.println("The game is not over");
}
 </input></program>
    <p>
      If <c>player == 1</c> is true,
      then all four statements in the contained compound statement will be executed.
      Note here that  we are declaring the local variable, <c>s</c>, in this block.
      Its scope would extend only to the end of the block.
      Note also that when we use a compound statement,
      the compound statement itself is not followed by a semicolon because it is already enclosed in braces.
    </p>
    <p>
      <principle>
        <title>DEBUGGING TIP: Compound Statements in Control Structures</title>
        <p>
          A common semantic error among beginning programmers is to forget the braces (curly brackets) around the compound statement..
          Indentation can improve the readability of a program but doesn't affect its logic.
        </p>
      </principle>
      
      Merely indenting the statements following the if clause doesn't alter the logic of the if statement.
      For example,
      the following if statement still has only one statement in its if clause:
    </p>
 <program language="java"><input>
if (condition1)
   System.out.println("One");
   System.out.println("Two"); //Not part of if statement
 </input></program>
    <p>
      This segment will always print
      <q>Two</q>
      because the second <c>println()</c> is not part of the if statement.
      To include it in the if statement,
      you must enclose both <c>println()</c> statements within braces:
    </p>
 <program language="java"><input>
if (condition1)
{  System.out.println("One");
   System.out.println("Two");
}
 </input></program>
    
  </subsection>
  
  
  <subsection xml:id="sec-ifelse">
    <title>The <c>if-else</c> Statement</title>
    <p>
      A second version of the if statement incorporates an <c>else</c> clause into the structure.
      This allows us to execute either of two separate statements
      (simple or compound)
      as the result of one boolean expression.
      For example, the statement
    </p>
 <program language="java"><input>
if (player == 1)
    System.out.println("Player One");
else
    System.out.println("Player Two");
 </input></program>
    <p>
      will print
      <q>Player One</q>
      if <c>player == 1</c> is true.
      Otherwise, it will print
      <q>Player Two</q>.
    </p>
    <principle>
      <title>If-else Statement</title>
      <p>
        The <term>if-else statement</term>
        has the following syntax:
      </p>
      <p>
        <program language="java"><input>
        if (boolean expression) 
           statement1;       
        else
           statement2; 
           </input></program>
      </p>
    </principle>
    <p>
      As in the case of the simple if statement,
      the  keyword <c>if</c> is followed by a parenthesized
      <em>boolean expression</em>,
      which is followed by <em>statement1</em>,
      which may be either simple or compound.
      If <em>statement1</em> is a simple statement,
      then it is followed by a semicolon.
      The <em>else clause</em> follows immediately after <em>statement1</em>.
      It begins with the keyword <c>else</c>, which is followed by <em>statement2</em>,
      which can also be either a simple or compound statement.
      Note that there is no boolean expression following the <c>else</c> keyword.
      In an if-else statement,
      the boolean expression following the keyword <c>if</c> goes with both the if and else clauses.
    </p>
    <p>
      Semantically, the if-else statement
          <idx><h>if-else statement</h></idx>
      has the following interpretation: If the
      <em>boolean expression</em> is true,
      execute <em>statement1</em>;
      otherwise execute <em>statement2</em>.
      This 
      interpretation is shown in <xref ref="fig-ifelsechart">Figure</xref>. 
      <figure xml:id="fig-ifelsechart"><caption>If-Else Flowchart</caption>
      <image width="50%" source="chptr03/3f14.png"/> 
    </figure>
    </p>
  </subsection>

  <subsection xml:id="sec-multi">
    <title>The Nested if/else Multiway Selection Structure</title>
    <p>
      The statements that one inserts in place of
      <em>statement1</em> and <em>statement2</em>
      in the if-else statement can be any executable statement,
      including another if statement or if-else statement.
      In other words,
      it is possible to embed one or more if-else statements inside another if-else statement,
      thereby creating a <term>nested if-else</term>
          <idx><h>nested if-else</h></idx>
       control structure.
      As with most things,
      making a control structure too complex isn't a good idea,
      but there is a standard nested if-else control structure that is very useful.
      It is known as <term>multiway selection</term>
          <idx><h>multiway selection</h></idx>.
      As shown in <xref ref="fig-multiway">Figure</xref>,
      the multiway structure is used when you want to select one and only one option from several alternatives.
    </p>
    <figure xml:id="fig-multiway">
      <caption>Flowchart of a nested if-else statement.</caption>
      <image width="70%" source="chptr03/multi.png"/>
    </figure>
    <p>
      Suppose we have an <c>int</c> variable <c>num</c> that will contain one of the values <m>0</m>,
      <m>1</m>,
      or <m>2</m> unless there has been an error assigning a value to it.
      Suppose that we want to write code that will write out the English word for the value in <c>num</c>. 
      In the example shown in <xref ref="fig-multiway">Figure</xref>
      there are three alternatives plus an error state.
      Here is the Java code for this example:
    </p>

    
  <activity label="nestedIfEx">
    <statement><p>Run the following active code a couple times until you see all the possible outputs. 
      It prints out the English word for a random number between 0-2. 
      Change the random range to 4 and add another if statement to print out "three".
    </p></statement>
    <program language="java" interactive="activecode"><input>
  public class PrintNumbers
  {
     public static void main(String[] args)
     {
         // Get a random number from 0 up to 3 (but not including 3)
         int number = (int) (Math.random() * 3);
         System.out.println("The number is " + number);
  
         if (num == 0)
            System.out.println("Zero");
         else if (num == 1)
            System.out.println("One");
        else if (num == 2)
            System.out.println("Two");
        else
            System.out.println("Error: Unknown value");
     }
  }
 </input></program>
    </activity>
    <p>
      Note that the multiway structure has a single entry point and that only one of the four possible alternatives is  executed.
      The code will print exactly one of the strings.
    </p>
    <p>
      We will have many occasions to use the if-else structure.
      Although it does not represent a significant change,
      we could rewrite our <c>takeStick()</c> method to make use of the if-else instead of the somewhat obscure statement :
    </p>
 <program language="java"><input>
player = 3 - player;
 </input></program>
    <p>
      to change the value of player from <m>1</m> to <m>2</m> or vice versa:
    </p>
 <program language="java"><input>
public String takeSticks(int num)
{   
  nSticks = nSticks - num;
  if (player == 1)
    player = 2;   // From 1 to 2
  else
    player = 1;   // From 2 to 1
  }
 </input></program>
    <p>
      In some respects this version of <c>takeSticks()</c> involves four lines of code instead of one but is simpler to understand.
      The <c>if</c>-statement tests whether the value of <c>player</c> is <m>1</m>.
      If it is, the value is changed to <m>2</m>.
      If the value of <c>player</c> is not <m>1</m>,
      then the value must be <m>2</m> and so the value is changed to <m>1</m>.
      Both versions of the code will give precisely the same result,
      a programmer could choose to write the code either way.
    </p>
   
      </subsection><subsection><title>Self-Study Exercises</title>
        <p>
      <ol>
        <li>
          <p>
            Consider the following method with
<c>boolean</c> parameter.
 <program language="java"><input>
public String getStatus(boolean isDone)
{   
  if (isDone)
        return "Done";
   else
        return "Not Done";
 }
 </input></program>Draw a flowchart for the if-else version of the <c>getStatus()</c> method,
            using the figures in this section as a guide.
            The if-else structure should be drawn exactly as shown in <xref ref="fig-ifelsechart">Figure</xref>.
            It should have a single entry point that leads directly to the top of a diamond-shaped box that contains a boolean condition.
            There should be two branches coming out of the condition box.
            The one going to the right is the true case,
            and the one going to the left is the false case.
            Each of these branches should contain one rectangular box,
            which contains the statements that would be executed in that case.
            The left and right branches should be connected by a circular symbol that is aligned directly under the diamond box whose conditions it connects.
            There should be a single exit arrow pointing directly down.
          </p>
        </li>
        </ol>
        </p>
      
        <exercise label="ifDebugEx">
          <statement><p> Identify the errors in the following statements and fix them in the activecode below.
          </p></statement>
          <program language="java" interactive="activecode"><input>
            public class PrintHeavyLight
            {
               public static void main(String[] args)
               {
                   isHeavy = false;
                   isLong = true;

                   if (isHeavy = true)
                      System.out.println("Heavy");
                   else ;
                      System.out.println("Light");
                   if (isLong == false)
                      System.out.println("Long")
                  else
                      System.out.println("Short");
               }
              }
 </input></program>
  </exercise>        
  
        
          <exercise label="getPlayerNameEx">
            <statement><p>Write a method named
  <c>getPlayerName()</c> that returns a <c>String</c>. It should return
              <q>Ann</q>,              <q>Bill</q>,
              <q>Cal</q>, or
              <q>Error</q>
              when the value of <c>player</c> is respectively 1, 2, 3, or any other value.
            </p></statement>
            <program language="java" interactive="activecode"><input>
              public class Game
              {
                 private int player = 1;
 
                 public void setPlayer(int num) { player = num; }

                 /** Write a method named getPlayerName() that returns a String. 
                 It should returnAnn, Boyd, Cal, or Error
                 when the value of player is respectively 1, 2, 3, or any other value.
                 */
                 public String getPlayerName()
                 {
                   // Write a multiway if statement here


                 }

                 public static void main(String[] args)
                 {
                    Game g = new Game();  
                    System.out.println("Player 1 is " + g.getPlayerName(); 
                    g.setPlayer(2);
                    System.out.println("Player 2 is " + g.getPlayerName(); 
                    g.setPlayer(3);
                    System.out.println("Player 3 is " + g.getPlayerName(); 
                    g.setPlayer(4);
                    System.out.println("Is there a player 4? " + g.getPlayerName(); 
                 }
                }
   </input></program>
        </exercise>
  
  </subsection>

  <subsection xml:id="while-loops">
    <title>The While Structure</title>
    <p>
      A <term>repetition</term> or <term>loop</term> structure
      is a control structure that repeats a statement or sequence of statements in a controlled way.
     
      Many types of programming tasks require a repetition structure.
      Consider some examples.
      <ul>
        <li>
          <p>
            You want to add up the squares of the numbers from 1 to 100.
          </p>
        </li>
        <li>
          <p>
            You want to compute compound interest on an amount of money in a savings account with a fixed interest rate if it is kept there for <m>30</m> years.
          </p>
        </li>
        <li>
          <p>
            A computer security employee wants to try every possible password in order to break into an account of a suspected spy.
          </p>
        </li>
        <li>
          <p>
            You want to have players input moves for a turn in a game until the game is over.
            Our <c>OneRowNim</c> is such an example.
          </p>
        </li>
      </ul>
    </p>
    <p>
      We will study several different repetition structures of Java in depth in Chapter 6.
      We will briefly consider the while statement here so as to be able to define methods that are more powerful and more interesting.
      Let us write a method that solves a slight generalization of the first problem above.
      We will use the while statement to sum the squares of integers from <m>1</m> to a number specified as a parameter of the method.
      Thus, the method call <c>sumSquares(3)</c> should return the value <m>14</m> since <m>1*1 + 2*2 + 3*3 = 1 + 4 + 9 = 14</m>.
    </p>
    <activity label="squareOfInts">
      <statement><p>Run the following code to see the sum of squares method in action. 
        Click on the CodeLens button to trace through it. Change the main method to change num and run again.
      </p></statement>
      <program language="java" interactive="activecode"><input>
  public class Sum
  {
    public int sumSquares(int max)
    { int num = 1;
      int sum = 0;
      while (num &lt;=  max)  // While num &lt;= max
      {
        sum = sum + num*num; // Add square to sum
        num = num + 1;       // Add 1 to num
      } //while
      return sum;           // Return the sum
    }
    public static void main(String[] args)
    {
       Sum s = new Sum(); 
       int num = 4; 
       System.out.println( "The sumSquared of " + num + " is " +  s.sumSquared(num) );
    }
  }
 </input></program>
 </activity>
    <p>
      Note that in this example,
      the variable <c>num</c> gets assigned an initial value of <m>1</m> before the <c>while</c> statement.
      Note also that the <c>boolean</c> expression <c>num &lt; max</c> in parentheses after <c>while</c> states the condition for which we wish to continue summing squares.
      Finally note that the last statement in the block following the <c>boolean</c> expression adds <m>1</m> to <c>num</c><ndash/>that is,
      this variable is updated at the end of the block.
    </p>
    <p>
      The <term>while statement</term>
          <idx><h>while statement</h></idx>
      is a loop statement in which the loop entry condition occurs before the loop body.
      It has the following general form:
    </p>
    <principle>
      <title>While Statement</title>
      <p>
        The <term>while statement</term> has the following syntax:
      </p>
      <p>
        <program language="java"><input>
          while ( loop entry condition ) 
           {
              loop body; 
           }
          </input></program>
      </p>
    </principle>
 
    <p>
      When the <c>while</c> statement is executed,
      the loop entry condition is evaluated and if this evaluates to <c>false</c>, execution continues at the statement immediately after the loop body.
      If the loop entry condition evaluates to <c>true</c>, the loop body is executed and then the entry condition is evaluated again.
      The loop body continues to be executed until the loop entry condition evaluates to <c>false</c>.
    </p>
    <p>
      To have a <c>while</c> statement accomplish a task,
      the variable or variables in the loop entry condition must be initialized correctly before the
<c>while</c> statement and these variables must be correctly updated at the end of the loop body.
      We can refer to the initializer statement followed by a <c>while</c> statement as a
      <term>while structure</term>.
      We can restate the above guidelines as a design principle:
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Loop Structure</title>
      <p>
        A properly designed while structure must include an initializer,
        a loop entry condition, and an updater.
        The updater should guarantee that the loop entry condition eventually fails,
        thereby allowing the loop to terminate.
      </p>
    </principle>
    <p>
      In pseudocode, the <em>while structure</em>
          <idx><h>while structure</h></idx>
      would take the following form:
    </p>
 <program language="java"><input>
InitializerStatements;         // Initializer
while (loop entry condition) { // Bound test
     Statements;                // Loop body
     UpdaterStatements;         // Updater
}
 </input></program>
    <p>
      As its form suggests,
      the while structure is designed so that on some conditions the loop body will never be executed.
      Because it tests for the loop entry condition before the loop body,
      it is possible that the loop body is never executed.
      We might say that it is designed to perform 0 or more iterations.
    </p>
    <p>
      For example,
      if the method call <c>sumSquares(-3)</c> is executed,
      the loop body will be skipped,
      because the loop entry condition <c>num
&lt;= max</c> is false to begin with.
      No iterations will be performed,
      and the algorithm will simply return the value <m>0</m>.
    </p>
    <figure xml:id="fig-whileflow">
      <caption>Flowchart of the while statement and while
      structure.</caption>
      <image width="73%" source="chptr03/whileflow.png"/>
    </figure>
    <p>
      Note also that in the while statement the bound test is preceded by initializer statements,
      and the loop body contains updater statements.
      The semantics of the while structure are shown in <xref ref="fig-whileflow">Figure</xref>.
    </p>
  </subsection>
  
    <subsection><title>While Loop Self-Study Exercises</title>
     
          <p> Modify the definition of the
<c>sumSquares()</c> method to define a method named <c>sumCubes()</c> that sums the cubes of integers 
from a minimum value up to a maximum value and returns that sum. 
 <c>sumCubes()</c> should have two parameters that will store the minimum and maximum values.
Thus the method call <c>sumCubes(2,3)</c> should return <m>35</m> since <m>2*2*2 + 3*3*3 = 8 + 27 = 35</m>.
          
    </p>

    <exercise label="sumCubes">
      <statement><p>Using the <c>sumSquares</c> method below as a guide, define a method named <c>sumCubes(min, max)</c> that sums the cubes of integers 
        from a minimum value up to a maximum value and returns that sum. 
      </p></statement>
      <program language="java" interactive="activecode"><input>
  public class SumC
  {
    public int sumSquares(int max)
    { int num = 1;
      int sum = 0;
      while (num &lt;=  max)  // While num &lt;= max
      {
        sum = sum + num*num; // Add square to sum
        num = num + 1;       // Add 1 to num
      } //while
      return sum;           // Return the sum
    }

    /** Write sumCubes(min, max) that sums the cubes of integers 
    from a minimum value up to a maximum value and returns that sum.  */



    public static void main(String[] args)
    {
       SumC s = new SumC(); 
       int num = 4; 
       System.out.println( "The sumSquared of " + num + " is " +  s.sumSquared(num) );
       System.out.println( "The sumCubed of " + num + " is " +  s.sumCubed(1,num) );
       System.out.println( "The sumCubed of 2 to 3 should be 35. Your method returns: " + s.sumCubed(2,3) );
    }
  }
 </input></program>
</exercise>
  </subsection>
</section>