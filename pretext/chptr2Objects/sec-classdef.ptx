<section xml:id="sec-classdef">
  <title>Class Definition</title>
  <introduction>
    <p>
      To program in Java the main thing you do is write class definitions  for the various objects that will make up the program.
      A class definition <em>encapsulates</em>
      its objects' data and behavior.
      Once a class has been defined,
      it serves as a <em>template</em>, or blueprint,
      for creating individual <em>objects</em>
      or instances of the class.
    </p>
    <p>
      A class definition contains two types of elements:
      variables and methods.
      <em>Variables</em> are used to store the  object's information.
      <em>Methods</em> are used to process the information.
      To design an object you need to answer five basic questions:
    </p>
      <ol>
      <li><p>What role will the object perform in the program?</p></li>
      <li><p>  What data or information will it need?</p></li>
      <li><p>  What actions will it take?</p></li>
      <li><p>  What interface will it present to other objects?</p></li>
      <li><p>  What information will it hide from other objects?</p></li>
      </ol>
    <p>
    </p>
  </introduction>
  <subsection>
    <title>The <c>Riddle</c>Class</title>
    <p>
      Recall our definition of the <c>Riddle</c> class from Chapter<nbsp/>1,
      which is summarized in the UML diagram in <xref ref="fig_riddle">Figure</xref>.
      A <c>Riddle</c> has two attributes, <c>question</c> and <c>answer</c>. Each of these variables stores a <c>String</c>. 
      It contains three methods, the <c>Riddle()</c> constructor, the <c>getQuestion()</c> and 
      <c>getAnswer()</c> methods.
    </p>

    <figure xml:id="fig_riddle">
     <caption>The <c>Riddle</c> class.</caption>
      <image width="40%" source="chptr02/riddle.png"/>
    </figure>  
    <p>
      The instance variables <c>question</c> and <c>answer</c> are designated as <c>private</c>(<m>-</m>),
      but the <c>Riddle()</c>, <c>getQuestion()</c> and <c>getAnswer()</c> methods are designated as <c>public</c>
      (<m>+</m>).
      These designations follow two important object-oriented design conventions,
      whose justification will become apparent as we discuss the <c>Riddle</c> class:
    </p>
    <p>
      <xref ref="list-riddleclass2">Listing</xref>
      shows the Java class definition that corresponds to the design given in the UML diagram.
      It contains the two <c>private</c> instance variables and defines the three <c>public</c> methods listed in the UML diagram.
    </p>
    <listing xml:id="list-riddleclass2">
      <caption>Definition of the <c>Riddle</c> class.</caption>
 <program language="java"><input>
public class Riddle {
  private String question; //Instance variables
  private String answer;

  public Riddle(String q, String a) {  // Constructor
    question = q;
    answer = a;
  } // Riddle constructor

  public String getQuestion() {  // Instance method
    return question;
  } // getQuestion()

  public String getAnswer() {   // Instance method
    return answer;
  } //getAnswer()
} //Riddle class
 </input></program>
    </listing>
    <p>
      The <c>private</c> and <c>public</c> modifiers are known as <term>access modifiers</term>. 
      They control access to an object's elements, such as its variables or methods, by other objects <mdash/>
      preventing access to private elements and permitting access
      to the public elements.  
      Note also that the <c>Riddle</c> class itself is declared <c>public</c>, which allows access to its 
      objects through its public variables and methods.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Private Variables</title>
      <p>
        Instance variables are usually declared <c>private</c> so that they cannot be directly accessed by other objects.
        This is an example of <term> information hiding</term>.
      </p>
    </principle>
    <principle>
      <title>EFFECTIVE DESIGN: Public Methods</title>
      <p>
        An object's <c>public</c> methods can be used by other objects to interact with the object.
        The <c>public</c> methods and variables of an object make up its <term>interface</term>.
      </p>
    </principle>
    <p>
      Recall that a class definition is like a blueprint or a cookie cutter.
      The <c>Riddle</c> class defines the type of information (attributes) that each <c>Riddle</c> object has,
      but it doesn't contain any actual values.
      It defines the methods (operations) that each <c>Riddle</c> object can perform,
      but it doesn't actually perform the methods.
    </p>
  </subsection>
  <subsection xml:id="fig-userint">
    <title>The <c>RiddleUser</c> Class</title>
    <p>
      To test <c>Riddle</c> we need to define a <c>main()</c> method,
      which can be defined either within the <c>Riddle</c> class itself or 
      in a second class.
    </p>
    <p>
      One advantage of using a second class is that it gets us in the  habit of thinking about the 
      need for a separate object to serve as a user interface.
      A <term>user interface</term> is an object that handles the interaction between a program's 
      user and the rest of the program's tasks (<xref ref="fig-interface">"Figure</xref>).
    </p>
    <p>     
      We use the general term
      <term>computational object</term>
      to distinguish the rest of the program's tasks from its user interface.
      The <c>Riddle's</c> task is just to manage simple riddles.
    </p>
    <figure xml:id="fig-interface">
      <caption>The <c>RiddleUser</c> class.</caption>
      <image width="40%" source="chptr02/ui.png"/> 
    </figure>
    <p>  
      Thus, as shown in <xref ref="fig-p63f2">Figure</xref>,
      this program will involve interaction between two types of objects:
      a <c>RiddleUser</c> and one or more <c>Riddles</c>. The 
      relationship between them, represented by a one-way <q>Uses</q> arrow,is that  
      the <c>RiddleUser</c> will create a <c>Riddle</c> instance and use its methods to display
      a riddle for the user.
    </p>
    <figure xml:id="fig-p63f2">
      <caption>This UML class diagram represents an <em>association</em>
      between the <c>RiddleUser</c> and <c>Riddle</c> classes.  The <c>RiddleUser</c> class will <em>use</em> one or more objects of the <c>Riddle</c> class.</caption>
      <image width="40%" source="chptr02/riddleuser.png"/>
    </figure>
    <p>  
      This design employs the <term>divide-and-conquer principle</term>. The problem has been divided into
      two distinct tasks, the user interface (<c>RiddleUser</c>) and the computation (<c>Riddle</c>). Each 
      type of object manages its own task and they work together to solve a problem.
    </p>
    <p>
      Because almost all of our programs will involve some form of a user interface,
      we will follow this design approach throughout the book.  It will serve us well.
      especially as our problems and our programs become more complex.
    </p>
  </subsection>
  <subsection>
    <title>Object Instantiation: Creating <c>Riddle</c> Instances</title>
    <p>
      <xref ref="fig-riddleuser">Listing</xref>
      shows the complete definition of the <c>RiddleUser</c> class,
      which serves as a very simple user interface.
      It creates two <c>Riddle</c> objects,
      named <c>riddle1</c> and <c>riddle2</c>. It then asks each object to request each riddle's question and answer and displays them on the console.
    </p>
    <listing xml:id="fig-riddleuser">
      <caption>The <c>RiddleUser</c> class.</caption>
      
 <program language="java"><input>
public class RiddleUser
{
  public static void main(String argv[])
  { Riddle riddle1 = new Riddle(
      "What is black and white and red all over?",
      "An embarrassed zebra.");
    Riddle riddle2 = new Riddle(
      "What is black and white and read all over?",
      "A newspaper.");
    System.out.println("Here are two riddles:");
    System.out.println(riddle1.getQuestion());
    System.out.println(riddle2.getQuestion());
    System.out.println("The answer to the first riddle is:");
    System.out.println(riddle1.getAnswer());
    System.out.println("The answer to the second is:");
    System.out.println(riddle2.getAnswer());
  } // main()
} // RiddleUser
 </input></program>
</listing>

<activity label="riddleUser">
<statement><p>Run the code below. Add another Riddle to RiddleUser main and print it out. 
        </p></statement>
<program language="java" interactive="activecode"><input>
public class RiddleUser
{
  public static void main(String argv[])
  { 
    Riddle riddle1 = new Riddle(
      "What is black and white and red all over?",
      "An embarrassed zebra.");
    Riddle riddle2 = new Riddle(
      "What is black and white and read all over?",
      "A newspaper.");
    System.out.println("Here are two riddles:");
    System.out.println(riddle1.getQuestion());
    System.out.println(riddle2.getQuestion());
    System.out.println("The answer to the first riddle is:");
    System.out.println(riddle1.getAnswer());
    System.out.println("The answer to the second is:");
    System.out.println(riddle2.getAnswer());
  } // main()
} // RiddleUser

class Riddle 
{                                  
    private String question;       // Instance variables
    private String answer;
    public Riddle(String q, String a) // Constructor method
    {
         question = q;
         answer = a;
    } // Riddle()
    public String getQuestion()   // Instance method
    {
        return question;
    } // getQuestion()
    public String getAnswer()     // Instance method
    {
	       return answer;
    } //getAnswer() 
  } // end of class Riddle
</input>  </program></activity>

    <p>
      Let's now discuss the statements that make up <c>RiddleUser</c>'s
<c>main()</c> method.
      The following statements use the <c>Riddle()</c> constructor to create,
      or <em>instantiate</em>,
      two instances of the <c>Riddle</c> class:
    </p>
 <program language="java"><input>
Riddle riddle1 = new Riddle(
     "What is black and white and red all over?",
     "An embarrassed zebra.");
Riddle riddle2 = new Riddle(
    "What is black and white and read all over?",
     "A newspaper.");
 </input></program>
    <p>
      Note how the constructor gives each object a pair of <c>String</c> s that serve as the values of their two instance variables.
      Each object has its own <c>question</c> and its own <c>answer</c>, and each object has its own unique name, <c>riddle1</c> and
<c>riddle2</c>.
    </p>
  </subsection>
  <subsection>
    <title>Interacting with <c>Riddles</c></title>
    <p>
      Once we have created <c>Riddle</c> instances with values assigned to their <c>question</c> and <c>answer</c> instance variables,
      we can ask each riddle to tell us either of its values.
      The following expression is an example of a <em>method call</em>:
    </p>
 <program language="java"><input>
riddle1.getQuestion()
 </input></program>
    <p>
      Calling (or invoking) a method is a means of executing its code.  The above method call just gets the <c>String</c> value that is stored in the <c>question</c> instance variable of <c>riddle1</c>.
    </p>
    <principle>
      <title>PROGRAMMING TIP:Method Call versus Method Definition</title>
      <p>
        Don't confuse method calls with method definitions.
        The definition specifies the method's actions.
        The method call takes those actions.
      </p>
    </principle>
    <p>
      If we want to display the value of <c>riddle1</c>'s <c>question</c>, we can embed this method call within a <c>println()</c> statement
    </p>
 <program language="java"><input>
System.out.println(riddle1.getQuestion());
 </input></program>
    <p>
      This tells the <c>System.out</c> object to execute its
<c>println()</c> method,
      which displays the string given to it by <c>riddle1</c> on the console.
      Thus, the output produced by this statement will be
    </p>
 <program language="java"><input>
What is black and white and red all over?
 </input></program>
  </subsection>
  <subsection xml:id="sect-mantra">
    <title>Define, Create, Use</title>
    <p>
      As our Riddle example illustrates,
      writing a Java program is a matter of three basic steps:
      <ul>
        <li>
          <p>
            Define one or more classes
            (class definition).
          </p>
        </li>
        <li>
          <p>
            Create objects as instances of the classes
            (object instantiation).
          </p>
        </li>
        <li>
          <p>
            Use the objects to do tasks
            (object use).
          </p>
        </li>
      </ul>
    </p>
    <p>
      The Java class definition determines what information will be stored in each object and what methods each object can perform.
      Instantiation creates an instance and associates a name with it in the program.
      The object's methods can then be called as a way of getting the object to perform certain tasks.
    </p>
  
      </subsection>
<exercises><title>Self-Study Exercises</title>
      
      <p>
            Identify the following elements in the <c>Riddle</c> class (<xref ref="fig_riddle">Figure</xref>). </p>
            
            <exercise label="riddleName">
              <title>Class Name</title>   
              <statement>
                    <p> What's the name of the class in <xref ref="fig_riddle">Figure</xref>)? <var/>
                    </p>
              </statement>
              <setup>
                    <var>
                          <condition string="Riddle">
                                <feedback>
                                      <p>Correct.</p>
                                </feedback>
                          </condition>
                          <condition string="riddle">
                            <feedback>
                                  <p>Capitalization matters!</p>
                            </feedback>
                      </condition>
                          <condition string=".*">
                                <feedback>
                                      <p>Incorrect.</p>
                                </feedback>
                          </condition>
                    </var>
              </setup>
        </exercise>
       
        
         
        <exercise label="clickInstanceVars">     
          <title>Riddle Instance Variables</title>        
                    <statement>
                        <p>Click on the names of the two instance variables in the class below.</p>
                    </statement>
                
                    <areas language="java">
                        <cline>public class <area correct="no">Riddle</area></cline>{
                        <cline>    private String <area correct="yes">question</area>;</cline>
                        <cline>    private String <area correct="yes">answer</area>;</cline>
                        <cline>    public  <area correct="no">Riddle</area>(String q, String a) { question = q; answer = a; }</cline>
                        <cline>    public String  <area correct="no">getQuestion()</area> { return question;  }</cline>
                        <cline>    public String  <area correct="no">getAnswer()</area> { return answer;  }</cline>
                        <cline>}</cline>
                      </areas>
                
                    <feedback>
                        <p>Correct!</p>
                    </feedback>
                </exercise>
                 
                <exercise label="clickMethods">    
                  <title>Riddle Methods</title>         
                  <statement>
                      <p>Click on the names of the three methods in the class below.</p>
                  </statement>
              
                  <areas language="java">
                    <cline>public class <area correct="no">Riddle</area></cline>{
                      <cline>    private String <area correct="no">question</area>;</cline>
                      <cline>    private String <area correct="no">answer</area>;</cline>
                      <cline>    public  <area correct="yes">Riddle</area>(String q, String a) { question = q; answer = a; }</cline>
                      <cline>    public String  <area correct="yes">getQuestion()</area> { return question;  }</cline>
                      <cline>    public String  <area correct="yes">getAnswer()</area> { return answer;  }</cline>
                      <cline>}</cline>
                    </areas>
              
                  <feedback>
                      <p>Correct!</p>
                  </feedback>
              </exercise>                 

  
          
            <exercise label="clickInstances">     
              <title>Riddle Instances</title>     
              <statement>
                  <p>Click on the names of two <c>Riddle</c> instances in the class below.</p>
              </statement>
          
              <areas language="java">
              <cline>public class <area correct="no">RiddleUser</area> {</cline>
              <cline><area correct="no">public static void main(String argv[]) {</area></cline>
                  <cline>     Riddle <area correct="yes">riddle1</area> = new <area correct="no">Riddle</area>("What is black and white and red all over?","An embarrassed zebra.");
                  </cline>
                  <cline>     Riddle <area correct="yes">riddle2</area> = new <area correct="no">Riddle</area>("What is black and white and read all over?","A newspaper.");
                  </cline>
                  <cline>     System.out.println("Here are two riddles:");</cline>
                  <cline>     System.out.println(<area correct="no">riddle1.getQuestion()</area>);</cline>
                  <cline>     System.out.println(<area correct="no">riddle2.getQuestion()</area>);</cline>
              
                  <cline>     System.out.println("The answer to the first riddle is:" + <area correct="no">riddle1.getAnswer()</area>);
                  </cline>
                  <cline>     System.out.println("The answer to the second riddle is:" + <area correct="no">riddle2.getAnswer()</area>);
 </cline>
              <cline>}</cline>
                </areas>
          
              <feedback>
                  <p>Correct!</p>
              </feedback>
          </exercise>       
          
                
                <exercise label="clickCalls">  
                  <title>Riddle Method Calls</title>           
                  <statement>
                      <p>Click on all six method calls of the <c>Riddle</c> objects in the program below.</p>
                  </statement>
              
                  <areas language="java">
                  <cline>public class <area correct="no">RiddleUser</area> {</cline>
                  <cline><area correct="no">public static void main(String argv[]) {</area></cline>
                      <cline>     Riddle <area correct="no">riddle1</area> = new <area correct="yes">Riddle</area>("What is black and white and red all over?","An embarrassed zebra.");
                      </cline>
                      <cline>     Riddle <area correct="no">riddle2</area> = new <area correct="yes">Riddle</area>("What is black and white and read all over?","A newspaper.");
                      </cline>
                      <cline>     System.out.println("Here are two riddles:");</cline>
                      <cline>     System.out.println(<area correct="yes">riddle1.getQuestion()</area>);</cline>
                      <cline>     System.out.println(<area correct="yes">riddle2.getQuestion()</area>);</cline>
                  
                      <cline>     System.out.println("The answer to the first riddle is:" + <area correct="yes">riddle1.getAnswer()</area>);
                      </cline>
                      <cline>     System.out.println("The answer to the second riddle is:" + <area correct="yes">riddle2.getAnswer()</area>);
     </cline>
                  <cline>}</cline>
                    </areas>
              
                  <feedback>
                      <p>Correct!</p>
                  </feedback>
              </exercise>
                <p>
                  
                </p>
                
                <exercise label="clickQNames">   
                  <title>Riddle Qualified Names</title>          
                  <statement>
                      <p>Click on the four examples of qualified names using the dot notation in the class below.</p>
                  </statement>
              
                  <areas language="java">
                  <cline>public class <area correct="no">RiddleUser</area> {</cline>
                  <cline><area correct="no">public static void main(String argv[]) {</area></cline>
                      <cline>     Riddle <area correct="no">riddle1</area> = new <area correct="no">Riddle</area>("What is black and white and red all over?","An embarrassed zebra.");
                      </cline>
                      <cline>     Riddle <area correct="no">riddle2</area> = new <area correct="no">Riddle</area>("What is black and white and read all over?","A newspaper.");
                      </cline>
                      <cline>     System.out.println("Here are two riddles:");</cline>
                      <cline>     System.out.println(<area correct="yes">riddle1.getQuestion()</area>);</cline>
                      <cline>     System.out.println(<area correct="yes">riddle2.getQuestion()</area>);</cline>
                  
                      <cline>     System.out.println("The answer to the first riddle is:" + <area correct="yes">riddle1.getAnswer()</area>);
                      </cline>
                      <cline>     System.out.println("The answer to the second riddle is:" + <area correct="yes">riddle2.getAnswer()</area>);
     </cline>
                  <cline>}</cline>
                    </areas>
              
                  <feedback>
                      <p>Correct!</p>
                  </feedback>
              </exercise>     
   
   </exercises>
</section>