<section xml:id="ch-sockets-sum">
<title>Chapter Summary</title>
<subsection>
<title>Technical Terms</title>
    <p>
    busy waiting
      </p>
      <p>
        callback method
      </p>
      <p>
        client
      </p>
      <p>
        client/server protocols
      </p>
      <p>
        domain name
      </p>
      <p>
        ethernet protocol
      </p>
      <p>
        File Transfer Protocol (FTP)
      </p>
      <p>
        get
      </p>
      <p>
        HyperText Transfer Protocol (HTTP)
      </p>
      <p>
        internet
      </p>
      <p>
        Internet
      </p>
      <p>
        Internetworking Protocol (IP)
      </p>
      <p>
        Java Server Page (JSP)
      </p>
      <p>
        packet
      </p>
      <p>
        port
      </p>
      <p>
        post
      </p>
      <p>
        protocol
      </p>
      <p>
        router
      </p>
      <p>
        sandbox security model
      </p>
      <p>
        scriptlet
      </p>
      <p>
        server
      </p>
      <p>
        servlet
      </p>
      <p>
        Simple Mail Transfer Protocol (SMTP)
      </p>
      <p>
        socket
      </p>
      <p>
        trusted code
      </p>
      <p>
        Uniform Resource Locator (URL)
      </p>
      <p>
        World Wide Web (WWW)
      </p>
</subsection>
<subsection>
<title>Summary of Important Points</title>      
        <ul>
          <li>
            <p>
              An <em>internet</em> is a collection of two or more distinct networks joined by <em>routers</em>,
              which have the task of translating one network's language to the other's.
              The <em>Internet</em> is a network of networks that uses the
              <em>Internet Protocol (IP)</em>
              as the translation medium.
            </p>
          </li>
          <li>
            <p>
              A <em>protocol</em> is a set of rules that controls the transfer of information between two computers in a network.
              The <em>HyperText Transfer Protocol (HTTP)</em>
              governs information exchange on the World Wide Web (WWW).
              The <em>Simple Mail Transfer Protocol</em>
              controls mail service on the Internet.
              The <em>File Transfer Protocol (FTP)</em>
              controls the transfer of files between Internet computers.
              The <em>Domain Name System (DNS)</em>
              governs the use of names on the Internet.
            </p>
          </li>
          <li>
            <p>
              A <em>client/server</em> application is one that divides its task between a client,
              which requests service, and a server, which provides service.
              Many Internet applications and protocols are based on the client/server model.
            </p>
          </li>
          <li>
            <p>
              Lower-level protocols, such as the
              <em>ethernet protocol</em>
              and <em>token ring protocol</em>,
              govern the transmission of data between computers on a single network.
              The <em>Internet Protocol (IP)</em>
              translates between such protocols.
            </p>
          </li>
          <li>
            <p>
              A <em>Uniform Resource Locator (URL)</em>
              is a standard way of specifying addresses on the Internet.
              It consists of several parts separated by slashes and colons: <c>method://host:port/path/file</c>. The <c>java.net.URL</c> class is used to represent URLs.
            </p>
          </li>
          <li>
            <p>
              Files of text or data (images,
              audio files) on the Internet or Web can be downloaded using the same <c>InputStream</c> s and
  <c>OutputStream</c> s as files located on a disk.
              To read or write a resource located on a network,
              you need to connect its URL to an input or output stream.
            </p>
          </li>
          <li>
            <p>
              The <c>java.awt.Toolkit</c> class contains useful methods for downloading <c>Image</c> s into an application.
            </p>
          </li>
          <li>
            <p>
              A <em>socket</em> is a two-way communication channel between two running programs on a network.
              The <c>java.net.Socket</c> class can be used to set up communication channels for client/server applications.
              The <em>server</em> process listens at a socket for requests from a client.
              The <em>client</em> process requests service from a server listening at a particular socket.
              Once a connection exists between client and server,
              input and output streams are used to read and write data over the socket.
            </p>
          </li>
        </ul>
</subsection>
<subsection>
<title>Answers to Self-Study Exercises</title> 
        <ul>
          <li>
            <p>
              The fully connected mesh topology requires the most cables.
            </p>
          </li>
          <li>
            <p>
              The fully connected mesh topology would have the most potential to use alternate routes if one of the host computers crashed.
            </p>
          </li>
          <li>
            <p>
              The star topology would be rendered completely useless if its central hub crashed.
            </p>
          </li>
          <li>
            <p>
              Prentice Hall's Web server is located at
   <program language="java"><input>
  http://www.prenhall.com
   </input></program>The protocol is <c>http</c>. The host computer is named <c>www</c>. Prentice Hall's domain name is <c>prenhall</c>, and it is part of the
  <c>com</c>(commercial) Internet domain.
            </p>
          </li>
          <li>
            <p>
              \begin{ANSBL}
            </p>
          </li>
          <li>
            <p>
              For buying a piece of software at a bookstore,
              the server would be the sales clerk.
              The protocol would be to select the software from off the shelf,
              bring it to the checkout counter,
              give the sales clerk money, and get a receipt.
            </p>
          </li>
          <li>
            <p>
              For buying a piece of software over the phone,
              the server would be the telephone sales clerk.
              The protocol would be to select from a catalog,
              provide the sales clerk with your credit card information,
              and say goodbye.
            </p>
          </li>
          <li>
            <p>
              For buying a piece of software over the Internet,
              the server would be the computer that handles the transaction.
              The protocol would be to select the item from a Web-based form,
              provide the form with personal and payment information,
              and click on the Buy button. \end{ANSBL}
            </p>
          </li>
          <li>
            <p>
              To play sounds along with slides in the <c>SlideShowFrame</c>, you would make the following modifications to the code:
   <program language="java"><input>
  private Clip soundClip[] = new Clip[NIMGS];
  private Clip currentClip = null;
   </input></program>Declare an array of <c>URL</c> s to store the URLs of the audio files you want to play.
              Assign Clips to the array at the same time you input the images:
   <program language="java"><input>
  for (int k=0; k &lt; NIMGS; k++) {
    url =
     new URL( "http://www.cs.trincoll.edu/&#126;ram/jjj/slide" +
                                                k + ".gif");
    slide[k] = imageIO.read( url );
    URL soundURL =
     new URL("http://www.cs.trincoll.edu/&#126;ram/jjj/sound" +
                                                 k + ".au");
    AudioInputStream audio =
      AudioSystem.getAudioInputStream(url);
    DataLine.Info info = new DataLine.Info(Clip.class,
                 audio.getFormat());
    soundClip[k] = (Clip) AudioSystem.getLine(info);}
   </input></program>Change the nextSlide() code to the following
   <program language="java"><input>
  public void nextSlide() {
      currentClip.stop(); // stop sound playback
      currentClip = soundClip[nextImg]; // get next soundClip
      currentClip.setFramePosition(0); // start clip at beginning
      currentImage = slide[nextImg];
      nextImg = ( nextImg + 1) % NIMGS;
      repaint ();}
   </input></program>Each time an image is displayed in <c>paint()</c>, play the corresponding sound by using the URL from the array:
   <program language="java"><input>
  public void paint(Graphics g) {
      if (currentImage != null) {
          g.drawImage(currentImage,10,10,this);
          currentClip.start();
      }}
   </input></program>
            </p>
          </li>
          <li>
            <p>
              The scramble service would be implemented by defining two new classes: The <c>ScrambleServer</c> class is a subclass of <c>Server</c>, and the <c>ScrambleClient</c> class is a subclass of <c>Client</c>. The <c>ScrambleClient</c> would implement the <c>requestService()</c> method and the <c>ScrambleServer</c> would implement the
  <c>provideService()</c> method.
            </p>
          </li>
          <li>
            <p>
              \begin{ANSBL}
            </p>
          </li>
          <li>
            <p>
              If you specify the wrong host name or port,
              you will get the following exception:
  <c>java.net.ConnectException: Connection refused</c>.
            </p>
          </li>
          <li>
            <p>
              If you leave off the <c>\n</c> in the <c>writeToSocket()</c> call,
              nothing will go wrong because the <c>writeToSocket()</c> method will catch this error and add the end-of-line character to the string before sending it to the server.
              The server reads lines from the client,
              so every communication must end with <c>\n</c> or the protocol will break down. \end{ANSBL}
            </p>
          </li>
        </ul>
</subsection>      
</section>          