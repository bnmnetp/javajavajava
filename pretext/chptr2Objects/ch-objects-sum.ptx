<section xml:id="ch-objects-sum">
    <title>Chapter Summary</title>
    <subsection>
      <title>Technical Terms</title> 
      <p>
       <tabular>
       <row>
      <cell>access modifier</cell>
      <cell>method call and return</cell>
       </row>
       <row>
      <cell>class-level variable</cell>
      <cell>null pointer</cell>
       </row>
       <row>
      <cell>default value</cell>
      <cell>null pointer exception</cell>
       </row>
       <row>
      <cell>delimiter</cell>
      <cell>pointer</cell>
       </row>
       <row>
      <cell>empty string</cell>
      <cell>reference</cell>
       </row>
       <row>
      <cell>flow of control</cell>
      <cell>reference variable</cell>
       </row>
       <row>
      <cell>interface</cell>
      <cell>static modifier</cell>
       </row>
       <row>
      <cell>local variable</cell>
      <cell>user interface</cell>
       </row>
      </tabular>
    </p>
</subsection>
<subsection>
 <title>Important Points</title>
    <ul>
      <li>
        <p>
          Dot notation is used to refer to an object's public elements.
        </p>
      </li>
      <li>
        <p>
          Designing a class is a matter of deciding what role it will play and what information and actions it will have.
        </p>
      </li>
        <li>
          <p>
            Writing a Java program is a matter of defining one or more classes. A class definition serves as a template for creating instance of the class.
          </p>
        </li>
        <li>
          <p>
            Classes typically contain two kinds of elements, variables and methods. An object's state is defined by its instance variables.
          </p>
        </li>
        <li>
          <p>
            Class elements that are declared <c>public</c> can be accessed by other objects. Elements that are declared <c>private</c> are hidden from other objects.
          </p>
        </li>
        <li>
          <p>
            A class's instance variables are usually declared <c>private</c> so they cannot be accessed directly by other objects.
          </p>
        </li>
        <li>
          <p>
            An object's public instance methods can be called by other objects.
            Thus, they make up the object's interface with other objects.
          </p>
        </li>
        <li>
          <p>
            Object instantiation is the process of creating an object,
            using the <c>new</c> operator in conjunction with a constructor method.
          </p>
        </li>
        <li>
          <p>
            A class definition consists of a header and a body. The header gives the class a name, specifies its accessibility (<c>public</c>), and its place in the Java class hierarchy (<c>extends
Object</c>). The class body contains declarations of the class's variables and definitions of its methods.
          </p>
        </li>
        <li>
          <p>
            By default, a newly defined class is consider a subclass of <c>Object</c>.
          </p>
        </li>
        <li>
          <p>
            Class elements that are declared <c>static</c>, such as the <c>main()</c> method, are associated with the class(not with its instances).
          </p>
        </li>
        <li>
          <p>
            A Java application program must contain a <c>main()</c> method, which is where it begins execution.
          </p>
        </li>
        <li>
          <p>
            Methods that are used solely for the internal operations of the class should be declared <c>private</c>.
          </p>
        </li>
        <li>
          <p>
            An instance variable declaration reserves memory for the instance variable within the object, associates a name and a type with the location, and specifies its accessibility.
          </p>
        </li>
        <li>
          <p>
            A method definition consists of two parts: a header, which names the method and provides other general information about it, and a body, which contains its executable statements.
          </p>
        </li>
        <li>
          <p>
            Declaring a variable creates a name for an object but does not create the object itself.
            An object is created by using the <c>new</c> operator and a constructor method.
          </p>
        </li>
    </ul>
  </subsection>  


  <solutions scope="chapter-objects" divisional="solution" project="solution" inline="solution"> 
    <title>Solutions to Self-Study Exercises</title>
    <!-- self-generated from any <exercise> that has a <solution> 
         divisional means inside <exercises>
         inline means an <exercise> that's not inside <exercises>
         project means inside <activity>
         For each type, you can list "statement hint solution answer", 
         but statement includes the whole problem and even ones that don't have solutions.
         <title> included automatically.
    -->
  </solutions>
    

         
         
      
 
</section>