<section xml:id="casestudy-designinga-basic-gui">
  <title>CASE STUDY: Designing a Basic GUI</title>
  <introduction>
    <p>
      What elements make up a basic user interface?
      If you think about all of the various interfaces you've encountered<mdash/>and don't just limit yourself to computers<mdash/>they all have the following elements:
      <ul>
        <li>
          <p>
            Some way to provide help/guidance to the user.
          </p>
        </li>
        <li>
          <p>
            Some way to allow input of information.
          </p>
        </li>
        <li>
          <p>
            Some way to allow output of information.
          </p>
        </li>
        <li>
          <p>
            Some way to control the interaction between the user and the device.
          </p>
        </li>
      </ul>
    </p>
    <p>
      Think about the interface on a beverage machine.
      Printed text on the machine will tell you what choices you have,
      where to put your money, and what to do if something goes wrong.
      The coin slot is used to input money.
      There's often some kind of display to tell you how much money you've inserted.
      And there's usually a bunch of buttons and levers that let you control the interaction with the machine.
    </p>
    <p>
      These same kinds of elements make up the basic computer interface.
      Designing a Graphical User Interface is primarily a process of choosing components that can effectively perform the tasks of input,
      output, control, and guidance.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:User Interface</title>
      <p>
        A user interface must effectively perform the tasks of input,
        output, control, and guidance.
      </p>
    </principle>
    <p>
      In the programs we designed in the earlier chapters,
      we used two different kinds of interfaces.
      In the <em>command-line</em> interface,
      we used printed prompts to inform the user,
      typed commands for data entry and user control,
      and printed output to report results.
      Our GUI interfaces used <c>JLabel</c> s to guide and prompt the user,
<c>JTextField</c> s and <c>JTextArea</c> s as basic input and output devices,
      and either <c>JButton</c> s or <c>JTextField</c> s for user control.
    </p>
    <p>
      Let's begin by building a basic GUI in the form of a Java application.
      To keep the example as close as possible to the GUIs we've already used,
      we will build it out of the following Swing components: <c>JLabel</c>, <c>JTextField</c>, <c>JTextArea</c>, and <c>JButton</c>.
    </p>
  </introduction>
  <subsection xml:id="fig-p483f1">
    <title>The Metric Converter Application</title>
    <introduction>
      <p>
        Suppose the coach of the cross-country team asks you to write a Java application that can be used to convert miles to kilometers.
        The program should let the user input a distance in miles,
        and the program should report the equivalent distance in kilometers.
        <image width="73%" source="chptr13/p483f1.png"/>
      </p>
      <p>
        Before we design the interface for this,
        let's first define a <c>MetricConverter</c> class that can be used to perform the conversions (Fig.<nbsp/>13.9).
        For now at least,
        this class's only task will be to convert miles to kilometers,
        for which it will use the formula that 1 kilometer equals 0.62 miles:
      </p>
 <program language="java"><input>
public class MetricConverter {
    public static double milesToKm(double miles) {
        return miles / 0.62;
    }}
 </input></program>
      <p>
        Note that the method takes a <c>double</c> as input and returns a <c>double</c>. Also,
        by declaring the method <c>static</c>, we make it a class method,
        so it can be invoked simply by
      </p>
 <program language="java"><input>
MetricConverter.milesToKm(10);
 </input></program>
    </introduction>
    <subsubsection>
      <title>Choosing the Components</title>
      <p>
        Let's now design a GUI to handle the interaction with the user.
        First, let's choose Swing components for each of the four interface  tasks of input,
        output, control, and guidance.
        For each component,
        it might be useful to refer back to <xref ref="fig-swing2-guis">Figure</xref>
        to note its location in the Swing hierarchy.
        <ul>
          <li>
            <p>
              A <c>JLabel</c> is a display area for a short string of text,
              an image, or both.
              Its AWT counterpart,
              the <c>Label</c>, cannot display images.
              A JLabel does not react to input.
              Therefore, it is used primarily to display a graphic or small amounts of static text.
              It is perfectly suited to serve as a prompt,
              which is what we will use it for in this interface.
            </p>
          </li>
          <li>
            <p>
              A <c>JTextField</c> is a component that allows the user to edit a single line of text.
              It is identical to its AWT counterpart,
              the <c>TextField</c>. By using its <c>getText()</c> and <c>setText()</c> methods,
              a <c>JTextField</c> can be used for either input or output, or both.
              For this problem,
              we'll use it to perform the interface's input task.
            </p>
          </li>
          <li>
            <p>
              A <c>JTextArea</c> is a multiline text area that can be used for either input or output.
              It is almost identical to the AWT <c>TextArea</c> component.
              One difference, however,
              is that a <c>JTextArea</c> does not contain scrollbars by default.
              For this program,
              we'll use the <c>JTextArea</c> for displaying the results of conversions.
              Because it is used solely for output in this program,
              we'll make it <em>uneditable</em>
              to prevent the user from typing in it.
            </p>
          </li>
          <li>
            <p>
              Let's use a <c>JButton</c> as our main control for this interface.
              By implementing the <c>ActionListener</c> interface we will handle the user's action events.
            </p>
          </li>
        </ul>
      </p>
    </subsubsection>
    <subsubsection>
      <title>Choosing the Top-Level Window</title>
      <p>
        The next issue we must decide is what kind of top-level  window to use for this interface.
        For applet interfaces,
        the top-level component would be a <c>JApplet</c>. For Java applications,
        you would typically use a <c>JFrame</c> as the top-level window.
        Both of these classes are subclasses of <c>Container</c>, so they are suitable for holding the components that make up the interface (Fig.
        <xref ref="fig-swing1-guis"></xref>).
      </p>
      <p>
        Also, as noted earlier, <c>JApplet</c> s and <c>JFrame</c> s are both examples of heavyweight components,
        so they both have windows associated with them.
        To display a <c>JFrame</c> we just have to give it a size and make it visible.
        Because a frame runs as a stand-alone window,
        not within a browser context,
        it should also be able to exit the application when the user closes the frame.
      </p>
    </subsubsection>
    <subsubsection xml:id="fig-p484f1">
      <title>Designing a Layout</title>
      <p>
        The next step in designing the interface is deciding how to arrange the  components so that they will be visually appealing and comprehensible,
        as well as easy to use.
      </p>
      <figure xml:id="fig-metricgui">
        <caption>A design and layout for the Metric
        Converter GUI.<nbsp/>The <em>containment hierarchy</em> (also called a <em>widget
        hierarchy</em>) shows the containment relationships among the components.</caption>
        <image width="73%" source="chptr13/9f6.png"/>
      </figure>
      <p>
        <xref ref="fig-metricgui">Figure</xref>
        shows a design for the layout.
        The largest component is the output text area,
        which occupies the center of the
<c>JFrame</c>. The prompt,
        input text field,
        and control button are arranged in a row above the text area.
        This is a simple and straightforward layout.
      </p>
      <p>
        <xref ref="fig-metricgui">Figure</xref>
        also provides a <term>containment hierarchy</term>,
            <idx><h>containment hierarchy</h></idx>
        also called a <term>widget hierarchy</term>,
            <idx><h>widget hierarchy</h></idx>
        which shows the containment relationships among the various components.
        Although it might not seem so for this simple layout,
        the containment hierarchy plays an important role in showing how the various components are grouped in the interface.
        For this design, we have a relatively simple hierarchy,
        with only one level of containment.
        All of the components are contained directly in the <c>JFrame</c>.
      </p>
      <p>
        Figure<nbsp/>13.11 shows the design of the <c>Converter</c> class,
        which extends the <c>JFrame</c> class and implements the <c>ActionListener</c> interface.
        As a <c>JFrame</c> subclass,
        a <c>Converter</c> can contain GUI components.
        As an implementor of the <c>ActionListener</c> interface,
        it also will be able to handle action events through the <c>actionPerformed()</c> method.
      </p>
      <p>
        <image width="73%" source="chptr13/p484f1.png"/>
      </p>
      <p>
        <xref ref="fig-converterclass">Figure</xref>
        gives the implementation of the <c>Converter</c> class.
        Note the three packages that are imported.
        The first contains definitions of the Swing classes,
        and the other two contain definitions of AWT events and layout managers that are used in the program.
      </p>
      <figure xml:id="fig-converterclass">
        <caption>The <c>Converter</c> class implements a simple GUI interface.</caption>
 <program language="java"><input>
import javax.swing.*;             // Packages used
import java.awt.*;
import java.awt.event.*;
public class Converter extends JFrame
                            implements ActionListener{
  private JLabel prompt =
                  new JLabel("Distance in miles: ");
  private JTextField input = new JTextField(6);
  private JTextArea display = new JTextArea(10,20);
  private JButton convert = new JButton("Convert!");
  public Converter() {
    getContentPane().setLayout(new FlowLayout());
    getContentPane().add(prompt);
    getContentPane().add(input);
    getContentPane().add(convert);
    getContentPane().add(display);
    display.setLineWrap(true);
    display.setEditable(false);
    convert.addActionListener(this);
  } // Converter()
  public void actionPerformed( ActionEvent e ) {
    double miles =
       Double.valueOf(input.getText()).doubleValue();
    double km = MetricConverter.milesToKm(miles);
    display.append(miles + " miles equals " +
                     km + " kilometers\n");
  } // actionPerformed()
  public static void main(String args[]) {
    Converter f = new Converter();
    f.setSize(400, 300);
    f.setVisible(true);
    f.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        System.exit(0); // Quit the application
      }
    });
  } // main()} // Converter
 </input></program>
      </figure>
      <p>
        We have to do all initializing tasks in the constructor.
        First, we have to set the <c>JFrame</c>'s layout to <c>FlowLayout</c>. A <em>layout manager</em>
            <idx><h>layout manager</h></idx>
        is the object that is responsible for sizing and arranging the components in a container so that the elements are organized in the best possible manner.
        A flow layout is the simplest arrangement: The components are arranged left to right in the window,
        wrapping around to the next
        <q>row</q>
        if necessary.
      </p>
      <p>
        Second, note the statements used to set the layout and to add components directly to the <c>JFrame</c>. Instead of adding components directly to the <c>JFrame</c>, we must add them to its content pane:
      </p>
 <program language="java"><input>
getContentPane().add(input);
 </input></program>
      <p>
        A <term>content pane</term>
            <idx><h>content pane</h></idx>
        is a <c>JPanel</c> that serves as the working area of the <c>JFrame</c>. It contains all of the frame's components.
        Java will raise an exception if you attempt to add a component directly to a <c>JFrame</c>.
      </p>
      <principle>
        <title>DEBUGGING TIP:Content Pane</title>
        <p>
          A <c>JFrame</c> cannot directly contain GUI elements.
          Instead, they must be added to its content pane,
          which can be retrieved using the <c>getContentPane()</c> method.
        </p>
      </principle>
      <p>
        The <c>JFrame</c> and all the other top-level Swing windows have an internal structure made up of several distinct objects that can be manipulated by the program.
        Because of this structure, GUI elements can be organized into different layers within the window to create many types of sophisticated layouts.
        Also, one layer of the structure makes it possible to associate a menu with the frame.
      </p>
      <p>
        Finally, note how the <c>Converter</c> frame is instantiated,
        made visible,
        and eventually exited in the application's <c>main()</c> method:
      </p>
 <program language="java"><input>
public static void main(String args[]) {
   Converter f = new Converter();
   f.setSize(400, 300);
   f.setVisible(true);
   f.addWindowListener(new WindowAdapter() {
                         // Quit the application
       public void windowClosing(WindowEvent e) {
           System.exit(0);
       }
   });} // main()
 </input></program>
      <p>
        It is necessary to set both the size and visibility of the frame,
        since these are not set by default.
        Because we are using a
<c>FlowLayout</c>, it is especially important to give the frame an appropriate size.
        Failure to do so can cause the components to be arranged in a confusing way and might even cause some components to not appear in the window.
        These are limitations we will fix when we learn how to use some of the other layout managers.
      </p>
    </subsubsection>
  </subsection>
  <subsection>
    <title>Inner Classes and Adapter Classes</title>
    <p>
      In this section we introduce two new language features,
      <em>inner classes</em> and <em>adapter classes</em>,
      which are used in the <c>main()</c> method shown above to handle the closing of the
<c>Converter</c> application's window when the program is exited:
    </p>
 <program language="java"><input>
f.addWindowListener(new WindowAdapter() {
       public void windowClosing(WindowEvent e) {
           System.exit(0);
       }
 });
 </input></program>
    <p>
      This code segment provides a listener that listens for  window closing events.
      When such an event occurs,
      it exits the application by calling <c>System.exit()</c>.
    </p>
    <p>
      The syntax used here is an example of an
      <em>anonymous inner class</em>.
      An <term>inner class</term> is a class defined within another class.
      The syntax is somewhat ugly,
      because it places the class definition right where a reference to a window listener object would go.
      In effect what the code is doing is defining a subclass of <c>WindowAdapter</c> and creating an instance of it to serve as a listener for window closing events.
    </p>
    <p>
      Anonymous inner classes provide a useful way of creating classes and objects on the fly to handle just this kind of listener task.
      The syntax used actually enables us to write one expression that both defines a class and creates an instance of it to listen for window closing events.
      The new subclass has local scope limited here to the
<c>main()</c> method.
      It is anonymous, meaning we aren't even giving it a name,
      so you can't create other instances of it in the program.
      Note that the body of the class definition is placed right after the <c>new</c> keyword,
      which takes the place of the argument to the <c>addWindowListener()</c> method.
      For more details on the inner and anonymous classes, see Appendix<nbsp/>F.
    </p>
    <p>
      \BOXtwo{Inner Class.}{An inner class is a class defined within another class.
      Inner classes are mostly used to handle a task that supports the work of the containing class.}
    </p>
    <p>
      An <term>adapter class</term> is a wrapper class that implements trivial  versions of the abstract methods that make up a particular interface.
      (Remember from Chapter<nbsp/>4 that a wrapper class contains methods for converting primitive data into objects and for converting data from one type to another.)
    </p>
    <p>
      The <c>WindowAdapter</c> class implements the methods of the <c>WindowListener</c> interface.
      When you implement an interface,
      such as
<c>ActionListener</c>, you must implement all the abstract methods defined in the interface.
      For <c>ActionListener</c> there's just one method,
      the <c>actionPerformed()</c> method,
      so we can implement it as part of our applet or frame class.
      However, we want to use only one of the seven methods available in the <c>WindowListener</c> interface,
      the <c>windowClosing()</c> method,
      which is the method implemented in the anonymous inner class:
    </p>
 <program language="java"><input>
public void windowClosing(WindowEvent e) {
    System.exit(0);}
 </input></program>
    <p>
      The <c>WindowAdapter</c> is defined simply as
    </p>
 <program language="java"><input>
public abstract class WindowAdapter
                          implements WindowListener {
    public void windowActivated(WindowEvent e) {}
    public void windowClosed(WindowEvent e) {}
    ...
    // Five other window listener methods}
 </input></program>
    <p>
      Note that each method is given a trivial implementation ().
      To create a subclass of <c>WindowAdapter</c>, you must override at least one of its trivially implemented methods.
    </p>
    <p>
      Another way to manage the application's window closing event is to define a subclass of <c>WindowAdapter</c>:
    </p>
 <program language="java"><input>
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
public class WindowCloser extends WindowAdapter {
    public void windowClosing(WindowEvent e) {
        System.exit(0);
    }}
 </input></program>
    <p>
      Given this class,
      we can then place the following statement in <c>Converter</c>'s <c>main()</c> method:
    </p>
 <program language="java"><input>
f.addWindowListener(new WindowCloser());
 </input></program>
    <p>
      This is somewhat more familiar looking than the inner class construct.
      If you prefer this way of handling things,
      you can use this method in place of the inner classes here and in other examples.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Anonymous Adapter Classes</title>
      <p>
        Anonymous adapter classes provide a useful way of creating an object to handle one particular kind of event within a program.
      </p>
    </principle>
  </subsection>
  <subsection xml:id="fig-convertscreen">
    <title>GUI Design Critique</title>
    <p>
      Figure<nbsp/>13.13 shows the converter interface.
      <image width="73%" source="chptr13/9f8.png"/> Although our basic GUI design satisfies the demands of input,
      output, control,
      and guidance, it has a few significant design flaws.
    </p>
    <p>
      First, it forces the user to manually clear the input field after each conversion.
      Unless it is important that the user's input value remain displayed until another value is entered,
      this is just an inconvenience to the user.
      In this case,
      the user's input value is displayed along with the result in the <c>JTextArea</c>, so there's no reason not to clear the input text field:
    </p>
 <program language="java"><input>
input.setText("");  // Clear the input field
 </input></program>
    <principle>
      <title>EFFECTIVE DESIGN:Reduce the User's Burden</title>
      <p>
        A GUI should aim to minimize the responsibility placed on the user.
        In general, the program should perform any task that it can perform, unless,
        of course,
        there is a compelling reason that the user should do the task.
      </p>
    </principle>
    <p>
      A second problem with our design is that it forces the user to switch between the keyboard
      (for input)
      and the mouse
      (for control).
      Experienced users will find this annoying.
      An easy way to fix this problem is to make both the <c>JTextField</c> and the
<c>JButton</c> serve as controls.
      That way, to get the program to do the conversion,
      the user can just press the Enter key after typing a number into the text field.
    </p>
    <p>
      To give the interface this type of control,
      we only need to add an
<c>ActionListener</c> to the <c>JTextField</c> during the initialization step:
    </p>
 <program language="java"><input>
input.addActionListener(this);
 </input></program>
    <p>
      A <c>JTextField</c> generates an <c>ActionEvent</c> whenever the Enter key is pressed.
      We don't even need to modify the <c>actionPerformed()</c> method,
      since both controls will generate the same action event.
      This will allow users who prefer the keyboard to use just the keyboard.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:User Interface</title>
      <p>
        A GUI should aim to minimize the number of different input devices (mouse,
        keyboard) that the user has to manipulate to perform a particular task.
      </p>
    </principle>
    <p>
      Given that the user can now interact with the interface with just the keyboard,
      a question arises over whether we should keep the button at all.
      In this case,
      it seems justifiable to keep both the button and the text field controls.
      Some users dislike typing and prefer to use the mouse.
      Also, having two independent sets of controls is a desirable form of redundancy.
      You see it frequently in menu-based systems that allow menu items to be selected either by mouse or by special control keys.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Desirable Redundancy</title>
      <p>
        Certain forms of redundancy in an interface,
        such as two sets of independent controls
        (mouse and keyboard),
        make it a more flexible or more widely usable program.
      </p>
    </principle>
    </subsection><subsection><title>Self-Study Exercises</title>
      <ol>
        <li>
          <p>
            Another deficiency in the converter interface is that it doesn't round off its result,
            leading sometimes to numbers with 20 or so digits.
            Develop Java code to fix this problem.
          </p>
        </li>
        <li>
          <p>
            Give an example of desirable redundancy in automobile design.
          </p>
        </li>
      </ol>
 </subsection>
  <subsection xml:id="sec-keypad">
    <title>Extending the Basic GUI: Button Array</title>
    <p>
      Suppose the coach likes our program but complains that some of the folks in the office are terrible typists and would prefer not to have to use the keyboard at all.
      Is there some way we could modify the interface to accommodate these users?
    </p>
    <p>
      This gets back to the point we were just making about incorporating  redundancy into the interface.
      One way to satisfy this requirement would be to implement a numeric keypad for input,
      similar to a calculator keypad.
      Regular <c>JButton</c> s can be used as the keypad's keys.
      As a user clicks keypad buttons,
      their face values<mdash/>0 through 9<mdash/>are inserted into the text field.
      The keypad will also need a button to clear the text field and one to serve as a decimal point.
    </p>
    <p>
      This new feature will add 12 new <c>JButton</c> components to our  interface.
      Instead of inserting them into the <c>JFrame</c> individually,
      it will be better to organize them into a separate panel and to insert the entire panel into the frame as a single unit.
      This will help reduce the complexity of the display,
      especially if the keypad buttons can be grouped together visually.
      Instead of having to deal with 16 separate components,
      the user will see the keypad as a single unit with a unified function.
      This is an example of the abstraction principle,
      similar to the way we break long strings of numbers (1-888-889-1999) into subgroups to make them easier to remember.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Reducing Complexity</title>
      <p>
        Organizing elements into distinct groups by function helps to reduce the GUI's complexity.
      </p>
    </principle>
    <p>
      <xref ref="fig-metricgui2">Figure</xref>
      shows the revised converter interface design.
      The containment hierarchy shows that the 12 keypad <c>JButton</c> s are contained within a <c>JPanel</c>. In the frame's layout,
      the entire panel is inserted just after the text area.
    </p>
    <figure xml:id="fig-metricgui2">
      <caption>A widget hierarchy showing the
      containment relationships among the components.</caption>
      <image width="73%" source="chptr13/9f9.png"/>
    </figure>
    <p>
      Incorporating the keypad into the interface requires several changes in the program's design.
      Because the keypad has such a clearly defined role,
      let's make it into a separate object by defining a <c>KeyPad</c> class (Fig.<nbsp/>13.15).
      The <c>KeyPad</c> will be a subclass of <c>JPanel</c> and will handle its own <c>ActionEvent</c> s.
      As we saw in Chapter<nbsp/>4,
      a <c>JPanel</c> is a generic container.
      It is a subclass of
<c>Container</c> via the <c>JComponent</c> class (Fig.
      <xref ref="fig-swing2-guis"></xref>).
      Its main purpose is to contain and organize <image width="73%" source="chptr13/p490f1.png"/> components that appear together on an interface.
    </p>
    <p>
      In this case,
      we will use a <c>JPanel</c> to hold the keypad buttons.
      As you might recall from Chapter<nbsp/>4,
      to add elements to a <c>JPanel</c>, you use the <c>add()</c> method,
      which is inherited from <c>Container</c>. (A <c>JApplet</c> is also a subclass of <c>Container</c> via the <c>Panel</c> class.)
    </p>
    <p>
      As a subclass of <c>JPanel</c>, the <c>KeyPad</c> will take care of holding and organizing the <c>JButton</c> s in the visual display.
      We also need some way to organize and manage the 12 keypad buttons within the program's memory.
      Clearly, this is a good job for an array.
      Actually, two arrays would be even better,
      one for the buttons and one for their labels:
    </p>
 <program language="java"><input>
private JButton buttons[];
private String labels[] = // An array of button labels
            { "1","2","3",
              "4","5","6",
              "7","8","9",
              "C","0","." };
 </input></program>
    <p>
      The <c>label</c> array stores the strings that we will use as the buttons' labels.
      The main advantage of the array is that we can use a loop to instantiate the buttons:
    </p>
 <program language="java"><input>
buttons = new JButton[NBUTTONS]; // Create the array
                          // For each labeled button
for(int k = 0; k &lt; buttons.length; k++) {
 buttons[k] = new JButton(labels[k]); // Create button
 buttons[k].addActionListener(this); // and a listener
 add(buttons[k]);           // and add it to the panel} // for
 </input></program>
    <p>
      This code should be placed in the <c>KeyPad()</c> constructor.
      It begins by instantiating the array itself.
      It then uses a for loop, bounded by the size of the array,
      to instantiate each individual button and insert it into the array.
      Note how the loop variable here,
      <em>k</em>, plays a dual role.
      It serves as the index into both the button array (<c>buttons</c>) and the array of strings that serves as the buttons' labels (<c>labels</c>).
      In that way the labels are assigned to the appropriate buttons.
      Note also how each button is assigned an <c>ActionListener</c> and added to the panel:
    </p>
 <program language="java"><input>
buttons[k].addActionListener(this); // Add listener
add(buttons[k]);            //  Add button to panel
 </input></program>
    <p>
      An important design issue for our <c>KeyPad</c> object concerns how it will interact with the <c>Converter</c> that contains it.
      When the user clicks a keypad button,
      the key's label has to be displayed in the
<c>Converter</c>'s text area.
      But because the text area is private to the converter,
      the <c>KeyPad</c> does not have direct access to it.
      To address this problem,
      we will use a Java interface to implement a <term>callback design</term>.
          <idx><h>callback design</h></idx>
      In this design,
      whenever a <c>KeyPad</c> button is pressed,
      the <c>KeyPad</c> object calls a method in the
<c>Converter</c> that displays the key's label in the text area.
    </p>
    <p>
      <xref ref="fig-p493f1">Figure</xref>
      provides a summary of the callback design.
      Note that the association between the <c>Converter</c> and the <c>KeyPad</c> is bi-directional.
      This means that each object has a reference to the other and can invoke the other's public methods.
      This will be effected by having the <c>Converter</c> pass a reference to itself when it constructs the <c>KeyPad</c>:
    </p>
    <figure xml:id="fig-p493f1">
      <caption>In a callback design, the <c>Converter</c> implements
      the <c>KeyPadClient</c> interface. It passes a reference to
      itself when it creates the <c>KeyPad</c> object. The <c>KeyPad</c>
      object can then invoke the <c>keypressCallback()</c> method whenever
      a keypad button is pressed, and the <c>Converter</c> can display the
      result of the keypress.</caption>
      <image width="73%" source="chptr13/p493f1.png"/>
    </figure>
 <program language="java"><input>
private KeyPad keypad = new KeyPad(this);
 </input></program>
    <p>
      Another important design issue is that the <c>KeyPad</c> needs to know the name of the callback method and the <c>Converter</c> needs to have an implementation of that method.
      This is a perfect job for an abstract interface:
    </p>
 <program language="java"><input>
public abstract interface KeyPadClient {
    public void keypressCallback(String s);}
 </input></program>
    <p>
      The <c>KeyPad</c> can interact with any class that implements the <c>KeyPadClient</c> interface.
      Note that the <c>KeyPad</c> has a reference to the <c>KeyPadClient</c>, which it will use to invoke the
<c>keypressCallback()</c> method.
    </p>
    <p>
      The implementation of <c>KeyPad</c> is shown in Figure<nbsp/>13.17.
      Note that its constructor takes a reference to a <c>KeyPadClient</c> and saves it in an instance variable.
      Its <c>actionPerformed()</c> method then passes the key's label to the <c>KeyPadClient</c>'s callback method.
    </p>
    <figure xml:id="fig-keypad">
      <caption>The <c>KeyPad</c> object implements a 12-key keypad
      in a <c>JPanel</c>. It has a reference to the <c>KeyPadClient</c> that
      contains the keypad.</caption>
      
 <program language="java"><input>
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class KeyPad extends JPanel implements ActionListener{
  private final static int NBUTTONS = 12;
  private KeyPadClient kpc;  // Owner of the KeyPad
  private JButton buttons[];
  private String labels[] =  // An array of button labels
                { "1","2","3",
                  "4","5","6",
                  "7","8","9",
                  "C","0","." };
  public KeyPad(KeyPadClient kpc) {
    this.kpc = kpc;
    buttons = new JButton[NBUTTONS];         // Create the array
    for(int k = 0; k &lt; buttons.length; k++) { // For each button
      buttons[k] = new JButton(labels[k]);   //  Create a button
      buttons[k].addActionListener(this);     //  and a listener
      add(buttons[k]);                    // and add it to panel
    } // for
  } // KeyPad()
  public void actionPerformed(ActionEvent e) {
    String keylabel = ((JButton)e.getSource()).getText();
    kpc.keypressCallback(keylabel);
  } // actionPerformed()} // KeyPad
 </input></program>
    </figure>
    <p>
      Given the <c>KeyPad</c> design,
      we need to revise our design of the <c>Converter</c> class (Fig.
      <xref ref="fig-p493f1"></xref>).
      The <c>Converter</c> will now implement the <c>KeyPadClient</c> interface,
      which means it must provide an implementation of the
<c>keypressCallback()</c> method:
    </p>
 <program language="java"><input>
public void keypressCallback(String s) {
    if (s.equals("C"))
        input.setText("");
    else
        input.setText(input.getText() + s);}
 </input></program>
    <p>
      Recall that whenever the <c>KeyPad</c> object calls the
<c>keypressCallback()</c> method,
      it passes the label of the button that was pressed.
      The <c>Converter</c> object simply appends the key's label to the input text field,
      just as if the user typed the key in the text field.
    </p>
    <p>
      The complete implementation of this revised version of the interface is shown in Figure<nbsp/>13.18 on the next page.
      The appearance of the interface itself is shown in Figure<nbsp/>3.19.
    </p>
    <figure xml:id="fig-convertclass2">
      <caption>The second version of the <c>Converter</c> class, which
      implements the GUI shown in Figure 13.19.</caption>
      
 <program language="java"><input>
import javax.swing.*;      // Packages used
import java.awt.*;
import java.awt.event.*;
public class Converter extends JFrame   // Version 2
                 implements ActionListener, KeyPadClient {
  private JLabel prompt = new JLabel("Distance in miles: ");
  private JTextField input = new JTextField(6);
  private JTextArea display = new JTextArea(10,20);
  private JButton convert = new JButton("Convert!");
  private KeyPad keypad = new KeyPad(this);
  public Converter () {
    getContentPane().setLayout(new FlowLayout());
    getContentPane().add(prompt);
    getContentPane().add(input);
    getContentPane().add(convert);
    getContentPane().add(display);
    getContentPane().add(keypad);
    display.setLineWrap(true);
    display.setEditable(false);
    convert.addActionListener(this);
    input.addActionListener(this);
  } // Converter()
  public void actionPerformed(ActionEvent e) {
    double miles =
      Double.valueOf(input.getText()).doubleValue();
    double km = MetricConverter.milesToKm(miles);
    display.append(miles + " miles equals " +
                   km + " kilometers\n");
    input.setText("");
  } // actionPerformed()
  public void keypressCallback(String s) {
    if (s.equals("C"))
        input.setText("");
     else
        input.setText(input.getText() + s);
  }
  public static void main(String args[]) {
    Converter f = new Converter();
    f.setSize(400, 300);
    f.setVisible(true);
    f.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        System.exit(0);  // Quit the application
      }
    });
  } // main()} // Converter
 </input></program>
    </figure>
  </subsection>
  <subsection xml:id="fig-convertscreen2">
    <title>GUI Design Critique</title>
    <p>
      Figure<nbsp/>3.19 shows that despite our <image width="73%" source="chptr13/9f12.png"/> efforts to group the keypad into a rectangular array,
      it doesn't appear as a single entity in the interface itself,
      which indicates a layout problem.
      The default layout for our <c>KeyPad</c>
      (which is a
<c>JPanel</c>)
      is <c>FlowLayout</c>, which is not appropriate for a numeric keypad that needs to be arranged into a two-dimensional grid pattern,
      which is the kind of layout our design called for (Fig.
      <xref ref="fig-metricgui2"></xref>).
    </p>
    <p>
      Fortunately,
      this flaw can easily be fixed by using an appropriate layout manager from the AWT. In the next version of the program,
      we employ the <c>java.awt.GridLayout</c>, which is perfectly suited for a two-dimensional keypad layout (Section<nbsp/>13.7.2).
    </p>
    <p>
      The lesson to be learned from this example is that screen layout is an important element of an effective GUI.<nbsp/>If not done well,
      it can undermine the GUI's effort to guide the user toward the appointed tasks.
      If done poorly enough,
      it can even keep the user from doing the task at all.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Layout Design</title>
      <p>
        The appropriate layout and management of GUI elements is an important part of interface design.
        It contributes to the interface's ability to guide the user's action toward the interface's goals.
      </p>
    </principle>
  </subsection>
</section>