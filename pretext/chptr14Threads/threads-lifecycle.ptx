<section xml:id="thread-statesand-life-cycle">
  <title>Thread States and Life Cycle</title>
  
<introduction>
<figure xml:id="fig-lifecycle">
      <caption>A depiction of a thread's life cycle.</caption>
      <image width="73%" source="chptr14/13f9.png"/>
</figure>
  <p>
    Each thread has a <term>life cycle</term>
        <idx><h>life cycle</h></idx>
    that consists of several different states,
    which are summarized in <xref ref="fig-lifecycle">Figure</xref> and 
    <xref ref="tab-threadstates">Table</xref>.
    Thread states are represented by labeled ovals,
    and the transitions between states are represented by labeled arrows.
  </p>
  <p>
    Much of a thread's life cycle is under the control of the operating system 
    and the Java Virtual Machine. Those transitions represented by method 
    names<mdash/>such as <c>start()</c>, <c>stop()</c>, <c>wait()</c>, <c>sleep()</c>, 
    <c>notify()</c><mdash/>can be controlled by the program.
    Of these methods,
    the <c>stop()</c> method has been deprecated because it is inherently unsafe 
    to stop a thread in the middle of its execution.
    Other transitions<mdash/>such as
    <em>dispatch, I/O request, I/O done, time expired,
    done sleeping</em><mdash/>are under the control of the CPU scheduler.
  </p>
  <p>
    When first created a thread is in the ready state,
    which means that it is ready to run.
    In the ready state, a thread is waiting,
    perhaps with other threads, in the <term>ready queue</term>,
        <idx><h>ready queue</h></idx>
    for its turn on the CPU. A <term>queue</term>
        <idx><h>queue</h></idx>
    is like a waiting line.
    When the CPU becomes available,
    the first thread in the ready queue will be <term>dispatched</term>
        <idx><h>dispatched</h></idx>
    <mdash/>that is,
    it will be given the CPU.<nbsp/>It will then be in the running state. 
  </p>
  <table xml:id="tab-threadstates">
    <title>A summary of the different thread states.</title>
    
    <tabular>
      <row bottom="minor" left="minor">
        <cell>{State}</cell>
        <cell>{Description}</cell>
      </row>
      <row>
        <cell>Ready</cell>
        <cell>The thread is ready to run and waiting for the CPU.</cell>
      </row>
      <row>
        <cell>Running</cell>
        <cell>The thread is executing on the CPU.</cell>
      </row>
      <row>
        <cell>Waiting</cell>
        <cell>The thread is waiting for some event to happen.</cell>
      </row>
      <row>
        <cell>Sleeping</cell>
        <cell>The thread has been told to sleep for a time.</cell>
      </row>
      <row>
        <cell>Blocked</cell>
        <cell>The thread is waiting for I/O to finish.</cell>
      </row>
      <row bottom="minor">
        <cell>Dead</cell>
        <cell>The thread is terminated.</cell>
      </row>
    </tabular>
    \endTB
  </table>
  </introduction>
  <subsection><title>Thread Control</title>

  <p>
    Transitions between the ready and running states happen under the control of the CPU scheduler,
    a fundamental part of the Java runtime  system.
    The job of scheduling many threads in a fair and efficient manner is a little like sharing a single bicycle among several children.
    Children who are ready to ride the bike wait in line for their turn.
    The grown up (scheduler) lets the first child (thread) ride for a period of time before the bike is taken away and given to the next child in line.
    In round-robin scheduling,
    each child (thread) gets an equal amount of time on the bike (CPU).
  </p>
  <p>
    When a thread calls the <c>sleep()</c> method,
    it voluntarily gives up the CPU, and when the sleep period is over,
    it goes back into the ready queue.
    This would be like one of the children deciding to rest for a moment during his or her turn.
    When the rest was over, the child would get back in line.
  </p>
  <p>
    When a thread calls the <c>wait()</c> method,
    it voluntarily gives up the CPU, but this time it won't be ready to run 
    again until it is  notified by some other thread.
  </p>
  <p>
    This would be like one child giving his or her turn to another child.
    When the second child's turn is up,
    it would notify the first child,
    who would then get back in line.
  </p>
  <p>
    The system also manages transitions between the <term>blocked</term>
        <idx><h>blocked</h></idx>
    and ready states.
    A thread is put into a blocked state when it does some kind of I/O operation.
    I/O devices, such as disk drives,
    modems, and  keyboards,
    are very slow compared to the CPU.<nbsp/>Therefore, I/O operations are handled by 
    separate processors known as <em>controllers</em>.
  </p>
  <p>
    For example,
    when a thread wants to read data from a disk drive,
    the system will give this task to the disk controller,
    telling it where to place the data.
    Because the thread can't do anything until the data are read,
    it is blocked, and another thread is allowed to run.
    When the disk controller completes the I/O operation,
    the blocked thread is unblocked and placed back in the ready queue.
  </p>
  <p>
    In terms of the bicycle analogy,
    blocking a thread would be like giving the bicycle to another child when the 
    rider has to stop to tie his or her shoe.
    Instead of letting the bicycle just sit there,
    we let another child ride it.
    When the shoe is tied,
    the child is ready to ride again and goes back into the ready line.
    Letting other threads run while one thread is waiting for an I/O operation 
    to complete improves the overall utilization of the CPU.
  </p>
  <exercises>
  <title>Self-Study Exercise</title>
  <exercise>
  <title>Thread Scheduling</title>
  <statement>
          <p>
          True or false, round-robin scheduling is always the best way
          to allocate access to the CPU.
          </p>
  </statement>
         <choices>
        <choice correct="no">
            <statement>
                <p>True</p>
            </statement>
            <feedback>
                <p>How would that work for performing I/O?</p>
            </feedback>
        </choice>        
        <choice correct="yes">
            <statement>
                <p>False</p>
            </statement>
            <feedback>
                <p>Right, priority scheduling is necessary for I/O.</p>
            </feedback>
        </choice>
      </choices>
      <solution>
      <p>
          <em>Priority scheduling</em>
          is used for I/O threads, which are given higher 
          priority in order to improve the responsiveness of an interactive program.
      </p>
      </solution>
      </exercise>
    </exercises>
</subsection>
</section>