<section xml:id="java-gu-is-from-aw-tto-swing">
  <title>Java GUIs: From AWT to Swing</title>
  <introduction>
    <p>
      
      <em>java.sun.com/j2se/1.5.0/docs/api/</em>} \tBOXseven{Ever since the release} of version 1.2 of the Java Development Kit (JDK) in 2000, Java has contained two distinct libraries of GUI components.
      The <em>Abstract Windowing Toolkit (AWT)</em>
      has been part of Java since the original 1.0 version of the JDK 1.0.
      The more advanced <em>Swing component set</em>
      was first introduced in JDK 1.1 and was extensively revised in JDK 1.2.
    </p>
    <p>
      Although the original version of the AWT was suitable for developing Java applets,
      it wasn't powerful enough to support full-fledged applications.
      Commonly used programs, such as word processors and spreadsheets,
      have GUI requirements that were just too much for the original AWT. The main problem was that the AWT was dependent on the underlying operating system.
      That meant that Java GUI programs were forced to rely on GUI elements that were part of the underlying operating system.
      A Java GUI program running on a Windows platform had to depend on Windows code for implementations of its buttons and text fields.
      A Java program running on Unix depended upon underlying Unix code for its GUI components.
      Such dependence on the underlying operating system made the AWT less portable and less efficient.
    </p>
    <p>
      In contrast, the Swing GUI components are part of the
      <em>Java Foundation Classes (JFC)</em>,
      a collection of classes that do not depend as much on the underlying platform.
      The Swing library makes it possible to write GUI programs entirely in Java.
      Because they are rendered entirely by Java code, Swing components make it possible to design GUIs that are truly platform independent.
      Such programs are much more portable than those which rely on AWT components and the underlying platform.
      A program that uses Swing components will have the same look and feel on a Mac, Windows,
      or Unix platform.
    </p>
  </introduction>
  <subsection>
    <title>Heavyweight Versus Lightweight Components</title>
    <p>
      AWT components are based on the <term>peer model</term>,
      a design in which every AWT component has a corresponding class (a
      <em>peer</em>) written in the underlying  system's code.
      For example,
      the <c>java.awt.Button</c> class has a peer named
<c>java.awt.peer.Button</c>. The peer class serves as the interface between the Java code and the computer's underlying windowing system.
      The methods in the peer class are written in so-called
      <em>native</em> code<ndash/>that is,
      the non-Java code of the underlying operating system.
      Therefore, AWT components are inherently platform dependent.
    </p>
    <p>
      AWT components are called <em>heavyweight</em>
      because they depend on the native (peer) system for their drawing and rendering.
      Since every AWT component has an associated peer component,
      a Java AWT component would look just like the peer component.
      This is why an AWT button on a Windows platform looks just like a Windows button.
      In effect, the AWT button, via its peer,
      creates and uses a Windows button.
      When you change the Java button's label,
      it must call a method in the peer class that changes the label of the peer button.
      This interaction between Java and the native windowing system requires a good deal of overhead,
      thereby affecting the overall efficiency of the system.
    </p>
    <p>
      By contrast, a <term>lightweight component</term>
      is one that is written entirely  in Java.
      Instead of depending on a native component for its rendering,
      a lightweight component is drawn and rendered entirely by Java code.
      Because they do not depend on underlying system code, Swing components are more efficient and more portable than corresponding AWT components.
    </p>
    <figure xml:id="fig-swing1-guis">
      <caption>Swing classes, part 1: Relationship between
      the AWT and the top-level Swing windows. REVISION: <c>JWindow</c>
      extends <c>Window</c>.</caption>
      <image width="73%" source="chptr13/p472f1.png"/>
    </figure>
    <p>
      <xref ref="fig-swing1-guis">Figures</xref>
      and <xref ref="fig-swing2-guis"></xref>
      show the relationship between AWT and Swing classes.
      The top-level Swing classes<mdash/>the <c>JApplet</c>, <c>JDialog</c>, <c>JFrame</c>, and <c>JWindow</c><mdash/>are direct subclasses of their corresponding AWT counterparts.
      These are the top-level GUI windows.
      The remaining Swing components (Fig.
      <xref ref="fig-swing2-guis"></xref>) are subclasses of <c>java.awt.Component</c> and <c>java.awt.Container</c>. As you can see,
      the names of Swing and AWT components are very similar.
      Swing components that have corresponding AWT components have names that begin with
      <q>J.</q>
    </p>
    <p>
      One might think that because Swing components are superior to their AWT counterparts,
      the AWT package will eventually be dropped.
      However, this is not likely.
      Even if a Java program uses Swing components exclusively,
      that will still not break the dependence on the AWT.
    </p>
    <figure xml:id="fig-swing2-guis">
      <caption>Swing classes, part 2: Swing GUI components are
      derived from the <c>JComponent</c> class.</caption>
      <image width="73%" source="chptr13/p473f1.png"/>
    </figure>
    <p>
      There are several reasons for this dependence.
      First, Swing's top-level window classes<mdash/><c>JApplet</c>, <c>JDialog</c>, <c>JFrame</c>, and <c>JWindow</c><mdash/>are defined as extensions to their AWT counterparts.
      This means that Swing-based GUIs are still dependent on the AWT. Java programs need to have some way to map their windows to the windowing system used on the native (Windows, Unix,
      or Macintosh) platform.
      The AWT's top-level windows<mdash/><c>Window</c>, <c>Frame</c>,
<c>Dialog</c>, and <c>Panel</c><mdash/>provide that mapping.
    </p>
    <p>
      Second, the <c>JComponent</c> class,
      which is the basis for all Swing components,
      is derived from <c>java.awt.Container</c>. There are many more such dependencies.
      Fundamentally, Swing components are based on the AWT.
    </p>
    <p>
      Finally, all GUI applications and applets use layout managers (<c>java.\-awt.FlowLayout</c>), fonts (<c>java.awt.Font</c>), colors ( <c>java.awt.Color</c>), and other non-component classes that are defined in the AWT. There is just no way to design a GUI without using AWT classes.
      Therefore, the programs presented in this and subsequent chapters will use Swing components instead of corresponding AWT components,
      but they also will use layouts and other elements from the AWT.
    </p>
    <principle>
      <title>PROGRAMMING TIP:Swing Documentation</title>
      <p>
        Complete documentation of the Swing classes is available for downloading or browsing on Sun's Web site at
<c>http://java.sun.com/reference/api/index.html</c>
      </p>
    </principle>
  </subsection>
</section>