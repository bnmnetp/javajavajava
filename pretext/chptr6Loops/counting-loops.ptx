<section xml:id="counting-loops">
  <title>Counting Loops</title>
  <introduction>
    <p>
      A <term>counting loop</term>,
      or <term>counter-controlled loop</term>,
      is a loop in which you know beforehand how many times it will be repeated.
      Among the examples in the last section,
      the first two were counting loops.
    </p>
    </introduction>
    <subsection><title>Counting with While Loops</title>
    <p>
     In a counting loop, you can use a counter since you know the exact number of times the loop is to repeat.
      For example, if you want to print the word
      <q>Hello</q>
      10 times, you can use the following <c>while</c> structure:
    </p>
    <activity label="while-count"><statement>
      <p>Run the while loop below. Can you change it to repeat 20 times? Click on Show CodeLens to step through the code with the Next button.
</p>
    </statement>
 <program language="java" interactive="activecode"><input>
  public class CountWhile
  {
     public static void main(String[] args)
     { 
        int k = 0;
        while (k &lt; 10) 
        {
            System.out.println("Hello");
            k++;
        }
      }
  }
 </input></program>
 </activity>
    <p>
      In this case, the counter is the variable <em>k</em>,
      which counts from 0 through 9<mdash/>that is, it counts 10 times.
      Note that we start counting from 0 instead of 1.
      Counting from 0 is known as <term>zero indexing</term>
      and it is a common programming convention for counting loops.
      Although it doesn't really make any practical difference in this case,
      later on we will use loops to process  structures,
      such as strings and arrays, which use zero indexing.
      It will be easier to process these structures if our loop counter also starts at<nbsp/>0.
    </p>
    <p>
      The variable <em>k</em> in this example is called a <term>counter variable</term>
      or <term>loop counter</term>.
      Although it is certainly possible to name the counter variable anything we like,
      it is customary to use single letters like <em>i, j</em>,
      and <em>k</em> as loop counters.
      The fundamental feature of a counting loop is that we must know beforehand exactly how many iterations the loop will take.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Loop Design</title>
      <p>
        A <term>counting loop</term> can be used whenever you know exactly how many times a process must be repeated.
      </p>
    </principle>
</subsection>

<subsection xml:idx="for loop"><title>Counting with For Loops</title>

    <p>
      Although we can use a <c>while</c>-structure to code a counting loop, 
      Java's <c>for</c> statement is ideally suited for this purpose.
      For example,
      the following <c>for</c> statement will also print the word
      <q>Hello</q>
      10 times:
    </p>

    <activity label="for-count"><statement>
      <p>Run the for loop below. Can you change it to repeat 20 times? Click on Show CodeLens to step through the code with the Next button.
</p>
    </statement>
 <program language="java" interactive="activecode"><input>
  public class CountFor
  {
     public static void main(String[] args)
     { 
        for (int k = 0; k &lt; 10; k++) 
        {
            System.out.println("Hello");
        }
      }
  }
 </input></program>
 </activity>
    <p>
      In fact, this <c>for</c> loop is equivalent to the preceding <c>while</c> loop.
      The <c>for</c> loop is almost a shortcut way to write a <c>while</c> loop with all three steps that you need in one line.</p>
    
    <principle>
      <title>For Statement</title>
      <p>
        The <term>for statement</term> has the following syntax:
      </p>
       <p>
        <program language="java"><input>
           for(    initializer; loop entry condition ; updater   ) 
           {        for loop body     }
          </input></program>
       </p>
      
    </principle>
    <p>
      The for statement begins with the keyword <c>for</c>, which is followed by a parenthesized list of three expressions separated by semicolons:
      an <term>initializer</term>,
      a <term>loop entry condition</term>,
      and an <term>updater</term>.
      Following the parenthesized list is the for <term>loop body</term>,
      which is either a single statement or a sequence of statements contained in curly brackets, <c>{</c><ellipsis/><c>}</c>.
    </p>
  
</subsection>
  <subsection>
    <title>The For Structure</title>
    <figure xml:id="fig-forloop">
      <caption>Flowchart of the <c>for</c> statement.</caption>
      <image width="73%" source="chptr06/6f1.png"/>
    </figure>
    <p>
      <xref ref="fig-forloop">Figure</xref>
      shows how the <c>for</c> statement works.
      It might be useful to compare this flowchart with the flowchart for the the
<c>while</c> structure (<xref ref="fig-whileflow6"></xref>),
      which was introduced in Chapter<nbsp/>3.
      You see that it has exactly the same structure.
      First, the initializer is evaluated.
      Thus, the initializer sets the integer variable <em>k</em> to 0.
      Then the loop entry condition,
      which must be a boolean expression, is evaluated.
      If it is true, the body of the loop is executed;
      if it is false,
      the body of the loop is skipped and control passes to the next statement following the <c>for</c> statement.
      The updater is evaluated after the loop body is executed.
      After completion of the updater,
      the loop entry condition is reevaluated and the loop body is either executed again or not,
      depending on the truth value of the loop entry condition.
      This process is repeated until the loop entry condition becomes false.
    </p>
    <figure xml:id="fig-whileflow6">
      <caption>Flowchart of the <c>while</c> statement and <c>while</c>
      structure.</caption>
      <image width="73%" source="chptr03/whileflow.png"/>
    </figure>
    <p>
      Tracing the order in which the <c>for</c> loop components are evaluated gives this sequence:
    </p>
 <program language="java"><input>
evaluate initializer
 evaluate loop entry condition ==> True
 execute for loop body;
 evaluate updater
 evaluate loop entry condition ==> True
 execute for loop body;
 evaluate updater
 evaluate loop entry condition ==> True
 execute for loop body;
 evaluate updater
 .
 .
 .
 evaluate loop entry condition ==> False
 </input></program>
    <p>
      As this trace shows,
      the loop entry condition controls entry to the body of the loop and will,
      therefore, be the last thing done before the loop terminates.
    </p>
    <p>
      We have followed the standard convention of declaring the counter variable in the header of the <c>for</c> statement.
      This restricts the  variable's <em>scope</em>
      to the <c>for</c> statement itself.
      It would be a syntax error to use <em>k</em>
      outside the scope of the <c>for</c> loop,
      as in this example:
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; 100; k++)
  System.out.println("Hello");
        // Syntax error, k undeclared
System.out.println("k = " + k);
 </input></program>
    <p>
      For some problems,
      it might be necessary to use the loop variable outside the scope of the <c>for</c> statement,
      in which case the variable should be declared before the <c>for</c> statement.
      For example,
      if we want to print the value of the loop variable,
<c>k</c>, after the loop completes,
      we have to declare it before the loop:
    </p>
 <program language="java"><input>
int k = 0;         // Declare the loop variable here
for (k = 0; k &lt; 100; k++)
    System.out.println("Hello");
System.out.println("k = " + k); // To use it here
 </input></program>
    <p>
      In this example,
      the loop will exit when <c>k</c> becomes 100, so
      <q>k = 100</q>
      will be printed.
    </p>
  </subsection>
  <subsection>
    <title>Loop Bounds</title>
    <p>
      A counting loop starts at some initial value and counts 0 or more iterations.
      A <term>loop bound</term> is a value that controls how many times a loop is repeated.
      A loop will repeat until its loop bound is reached.  In a counting loop,
      the <em>loop entry condition</em>
      should be a boolean expression that tests whether the loop's bound has been reached.
      Similarly, in a counting loop,
      the <em>updater</em> should modify the loop counter so that it makes progress toward reaching its bound.
      Counting loops often increment or decrement their counter by 1, depending on whether the loop is counting forward or backward.
      The following method contains a countdown loop,
      which prints <c>10 9 8 7 6 5 4 3 2 1 BLASTOFF</c>. In this case,
      progress toward the loop bound is made by decrementing the loop counter:
    </p>
    <activity label="countdown-loop"><statement>
      <p>Run the for loop below. Can you change it to repeat 20 times? Click on Show CodeLens to step through the code with the Next button.
</p>
    </statement>
 <program language="java" interactive="activecode"><input>
  public class CountDown
  {
     public static void main(String[] args)
     { 
        for (int k = 10; k > 0; k--)
            System.out.print(k + " ");
        System.out.println("BLASTOFF");
      } 
  }
 </input></program>
 </activity>
    <p>
      Note in this case that we are using
      <term>unit indexing</term>
       instead of zero indexing,
      because countdowns repeat,
      or <em>iterate</em>, from 10 down to 1, not from 10 down to 0.
    </p>
  </subsection>
  <subsection>
    <title>Infinite Loops</title>
    <p>
      If the loop bound is never reached,
      the loop entry condition will never become false and the loop will repeat forever.
      This is known as an <term>infinite loop</term>.
      Can you see why each of the following <c>for</c> statements will result in an infinite loop?
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; 100; k--)       // Infinite loop
    System.out.println("Hello");
for (int k = 1; k != 100; k+=2)     // Infinite loop
    System.out.println("Hello");
for (int k = 98; k &lt; 100; k = k / 2)// Infinite loop
    System.out.println("Hello");
 </input></program>
    <p>
      In the first example, <em>k</em>
      starts out at 0 and is decremented on each iteration,
      taking on values <m>-1, -2, -3</m>,
      and so on, so <em>k</em> will never reach its loop bound.
    </p>
    <p>
      In the second example, <em>k</em>
      starts out at 1 and is incremented by 2 on each iteration,
      taking on the values 3, 5, 7, and so on.
      Because all these values are odd,
      <em>k</em> will never equal 100.
      A much safer loop bound in this case would be
      <em>k <m>\lt</m>= 100</em>.
    </p>
    <p>
      In the third example, <em>k</em>
      starts out at 98 and is halved on each iteration,
      taking on the values 49, 24, 12, 6, 3, 1, 0, 0, and so on, forever.
      Thus, it too will be stuck in an infinite loop.
    </p>
    <p>
      Encountering an unintended infinite loop when developing a program can be very frustrating.
      If the program is stuck in a loop  that generates output,
      it will be obvious that it is looping,
      but if no output is being generated,
      the computer will appear to
      <q>freeze,</q>
      no longer responding to your keyboard or mouse commands.
      Some programming environments allow you to break out of a looping program by typing 
      a special keyboard command such as <c>CONTROL-C</c> or <c>CTRL-ALT-DELETE</c> or <c>CONTROL-APPLE-ESCAPE</c> or refreshing the page in an online environment, but if that doesn't work you will have to reboot the computer,
      possibly causing a loss of data.
      The best way to avoid infinite loops is to determine that the loop's updater expression will cause the loop to eventually reach its bound.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Loop Design</title>
      <p>
        To guard against infinite loops,
        make sure that the loop bound will eventually be reached.
      </p>
    </principle>
  </subsection>
  <subsection>
    <title>Loop Indentation</title>
    <p>
      Note how indentation is used to distinguish the loop body from both the heading and 
      from the statement that follows the loop:
    </p>
 <program language="java"><input>
for (int k = 10; k > 0; k--)     // Loop heading
    System.out.print (k + " ");  //  Indent the body
System.out.println( "BLASTOFF" ) // After the loop
 </input></program>
    <p>
      Indenting the loop body is a stylistic convention intended to make the code more readable.
      However, the indentation itself has no effect on how the code is interpreted by Java.
      Each of the following code segments would still produce the same countdown:
    </p>
 <program language="java"><input>
for (int k = 10; k > 0; k--)
System.out.print (k + " ");
System.out.println("BLASTOFF");

for (int k = 10; k > 0; k--) System.out.print(k +" ");
System.out.println("BLASTOFF");

for
(int k = 10; k > 0; k--)
System.out.print (k + " ");
System.out.println("BLASTOFF");
 </input></program>
    <p>
      In each case the statement, <c>System.out.println("BLASTOFF")</c>, is not part of the <c>for</c> loop body and is executed only once when the loop terminates.
    </p>
    <principle>
      <title>PROGRAMMING TIP: Loop Indentation</title>
      <p>
        To make loops more readable,
        indent the loop body to set it off from the heading and to highlight which statement(s) will be repeated.
      </p>
    </principle>
    <principle>
      <title>DEBUGGING TIP: Loop Indentation</title>
      <p>
        Loop indentation has no effect on how Java interprets the loop.
        The loop body is either 1 statement ending in a semicolon (;) or indicated by braces {}.
      </p>
    </principle>
    <p>
      The loop body can be a single statement,
      such as a <c>println()</c> statement, or
     the loop body may consist of any Java statement,
      including an <c>if</c> or <c>if-else</c> statement or a compound statement,
      which contains a sequence of statements enclosed within braces.
      Consider the following examples.
      The first example prints the sequence 0, 5, 10, 15, <m>\dots</m> 95.
      Its loop body consists of a single <c>if</c> statement:
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; 100; k++)// Print 0 5 10...95
  if (k % 5 == 0) // Loop body: single if statement
     System.out.println("k= " + k);
 </input></program>
    <p>
      The next example prints the lowercase letters of the alphabet.
      In this case,
      the loop counter is of type <c>char</c>, and it counts the letters of the alphabet.
      The loop body consists of a single <c>print()</c> statement:
    </p>
 <program language="java"><input>
for (char k = 'a'; k &lt;= 'z'; k++)// Print 'a' 'b'...'z'
  System.out.print (k + " ");  // Loop body: single print()
 </input></program>
    <p>
      The next example prints the sequence 5, 10, 15, <m>\dots</m> 50,
      but it uses several statements within the loop body:
    </p>
 <program language="java"><input>
for (int k = 1; k &lt;= 10; k++) {// Print 5 10 15...50
   int m = k * 5;                  // Begin body
   System.out.print (m + " ");
}                                  // End body
 </input></program>
    <p>
      In this example, the scope of the local variable <em>m</em>,
      declared within the loop body,
      is limited to the loop body and cannot be used outside of that scope.
    </p>
    <principle>
      <title>Loop Body</title>
      <p>
        The body of a
<c>for</c> statement consists of the statement that immediately follows the <c>for</c> loop heading.
        This statement can be either a simple statement or a compound statement<mdash/>
        a sequence of statements enclosed within braces, { <ellipsis/> }.
      </p>
    </principle>
    <p>
      Although braces are not required when the body of a <c>for</c> loop consists of a single statement,
      some coding styles recommend that braces should always be used for the body of a loop statement.
      For example,
      it is always correct to code the <c>for</c> loop as
    </p>
 <program language="java"><input>
for (int k = 1; k &lt;= 10; k++) {// Print 1 2 ... 10
  System.out.print (k + " ");     // Begin body
}                                // End body
 </input></program>
    <p>
      Another advantage of this coding style is that you can easily place additional statements in the loop body by placing them within the braces.
    </p>
    <principle>
      <title>DEBUGGING TIP: Missing Braces</title>
      <p>
        A common programming error for novices is to forget to use braces to group the statements they intend to put in the loop body.
        When braces are not used only the first statement after the loop heading will be iterated.
      </p>
    </principle>
    </subsection>
    <exercises xml:id="self-study-exercisesA18"><title>Self-Study Exercises</title>
    
        <p>
          Identify and fix the syntax error in the following <c>for</c> loop statements.
        </p>

<exercise label="bugforloop1">
  <statement>
          <p>Fix the bugs in the following for loop. 
    </p>
        </statement>        
<program language="java" interactive="activecode"><input>
  public class Debug
  {
     public static void main(String[] args)
     {  
        for (int k = 5, k &lt; 100, k++)
            System.out.println(k);
     }
    }
 </input></program>
</exercise>

 <exercise label="bugforloop2"><statement>
  <p>Fix the bugs in the following for loop. </p>
</statement>
               <program language="java" interactive="activecode"><input>
                public class Debug
                {
                   public static void main(String[] args)
                   {
                      for (int k = 0; k &lt; 12 ; k--;)
                          System.out.println(k);
                   }
                }
 </input></program>
</exercise>


<exercise><statement>
        <p>
          Identify those statements that result in infinite loops.
         </p>
             </statement>
                </exercise>
                 <program language="java"><input>
for (int k = 0; k &lt; 100; k = k )
     System.out.println(k);
 </input></program>
              
                 <program language="java"><input>
for (int k = 1; k == 100; k = k + 2 )
     System.out.println(k);
 </input></program>
             
                 <program language="java"><input>
for (int k = 1; k >= 100; k = k - 2 )
     System.out.println(k);
 </input></program>
              
      
     <exercise><statement>
        <p>
          What is the value of the variable <em>j</em> when the following loop terminates?
 </p></statement>
 </exercise>

 <program language="java"><input>
for (int i = 0; i &lt; 10; i++) {
    int j;
    j = j + 1;
 }
 </input></program>
        
     
     
    
    <exercise label="count4"><statement>
      <p> Suppose you're helping your little sister learn to count by fours.
        Write a <c>for</c> loop in the active code window below that 
        prints the following sequence of numbers: 1, 5, 9, 13, 17, 21, 25.</p></statement>
                   <program language="java" interactive="activecode"><input>
                    public class CountBy4
                    {
                       public static void main(String[] args)
                       {
                          /*  Write a for loop that counts by 4 and 
                              prints the following sequence of numbers: 
                              1, 5, 9, 13, 17, 21, 25.
                            */



                       }
                    }
     </input></program>
    </exercise>
</exercises>

  <subsection>
    <title>Nested Loops</title>
    <p>
      A <term>nested loop</term> is a structure in which one loop is contained inside the body of another loop,
      such as when a <c>for</c> loop body contains a <c>for</c> loop.
      For example, suppose you are working for Giant Auto Industries,
      and your boss wants you to print a table for buyers to figure the cost of buying multiple quantities of a certain part.
      The cost of individual parts ranges from $1 to $9.
      The cost of <em>N</em> items is simply the unit price times the quantity.
      Thus, you'll want to print something like the following table of numbers,
      where the prices per unit are listed in the top row,
      and the prices for 2, 3 and 4 units are listed in subsequent rows:
    </p>
 <program language="java"><input>
 1  2  3  4  5  6  7  8  9
 2  4  6  8  10 12 14 16 18
 3  6  9  12 15 18 21 24 27
 4  8  12 16 20 24 28 32 36
 </input></program>
    <p>
      To produce this multiplication table,
      we could use the following nested <c>for</c> loops:
    </p>
    <p>
      
    </p>
    <activity label="mult-table"><statement>
      <p>Run the code below to see 4x9 multiplication table. Can you change it to be 5x10 multiplcation table?</p>
    </statement>
    <program language="java" interactive="activecode"><input>
    public class MultTable
    {             
        public static void main(String[] args)
        {
            for (int row = 1; row &lt;= 4 ; row++) { // For each of 4 rows
                for (int col = 1; col &lt;= 9; col++) // For each of 9 columns
                     System.out.print(col * row + "\t" );      // Print number
                System.out.println();              // Start a new row         
            } // for row
        }
    }
 </input></program>
 </activity>
    <p>
      Note how indenting is used here to distinguish the levels of nesting and to make the code more readable.
      In this example, the <em>outer loop</em>
       controls the number of rows in the table, hence,
      our choice of <c>row</c> as its loop counter.
      The <c>println()</c> statement is executed after the
      <em>inner loop</em> is done iterating,
      which allows us to print a new row on each iteration of the outer loop.
      The inner loop prints the nine values in each row by printing the expression
      <em>col * row</em>.
      Obviously, the value of this expression depends on both loop variables.
    </p>
    <p>
      Let's dissect this example a bit.
      How many times is the inner <c>for</c> statement executed?
      The inner loop is executed once for each iteration of the outer loop.
      Thus, it is executed four times.
      How many times is the body of the inner loop executed?
      The body of the inner loop is executed 36 times<mdash/>9 times for each execution of line 2.
    </p>
    <p>
      Sometimes it is useful to use the loop variable of the outer loop as  the bound for the inner loop.
      For example, consider the following pattern:
    </p>
 <program language="java"><input>
 # # # # #
 # # # #
 # # #
 # #
 #
 </input></program>
    <p>
      Note that the number of # symbols in each row varies inversely with the row number.
      In row 1, we have five symbols;
      in row 2 we have four;
      and so on down to row 5, where we have one #.
    </p>
    <p>
      To produce this kind of two-dimensional pattern, we need two counters:
      one to count the row number,
      and one to count the number of # symbols in each row.
      Because we have to print each row's symbols before moving on to the next row,
      the outer loop will count row numbers,
      and the inner loop will count the symbols in each row.
      But note that the inner loop's bound will depend on the row number.
      Thus, in row 1 we want five symbols;
      in row 2 we want four symbols; and so on.
      If we let <c>row</c> be the row number,
      then in each row we want to print 6 <m>-</m> <em>row</em> symbols.
      The following table shows the relationship we want:
    </p>
    <table>
      <tabular>
        <row  bottom="minor">
          <cell>Row</cell>
          <cell>Bound (6-row)</cell>
          <cell>Number of Symbols</cell>
        </row>
        <row>
          <cell>1</cell>
          <cell>6-1</cell>
          <cell>5</cell>
        </row>
        <row>
          <cell>2</cell>
          <cell>6-2</cell>
          <cell>4</cell>
        </row>
        <row>
          <cell>3</cell>
          <cell>6-3</cell>
          <cell>3</cell>
        </row>
        <row>
          <cell>4</cell>
          <cell>6-4</cell>
          <cell>2</cell>
        </row>
        <row>
          <cell>5</cell>
          <cell>6-5</cell>
          <cell>1</cell>
        </row>
      </tabular>
    </table>
    <p>
      If we let <em>j</em> be the counter for the inner loop,
      then <em>j</em> will be bound by the expression 6 <m>-</m> <em>row</em>.
      This leads to the following nested loop structure:
    </p>
    <activity label="nested-pattern"><statement>
      <p> Run the code below. Try changing the bounds of the loops to change the pattern.</p>
    </statement>
<program language="java" interactive="activecode"><input>
public class Pattern
{                   
    public static void main(String[] args)
    {
        for (int row = 1; row &lt;= 5; row++) { // For each row
          for (int j = 1; j &lt;= 6 - row; j++)// Print the row
            System.out.print('#');
          System.out.println();    // Start a new line
        } // for row
    }
}
 </input></program>
 </activity>

    <p>
      Note that the bound of the inner loop varies according to the value of <em>row</em>,
      the loop counter for the outer loop.
    </p>
    </subsection>
 
    <exercises  xml:id="self-study-exerciseN18"><title>Self-Study Exercise</title>
      
          <p>
            As the engineer hired to design ski jumps,
            write a nested <c>for</c> loop to print the following pattern in the 
            active code window below:</p>
 <program language="java"><input>
#
# #
# # #
# # # #
# # # # #
 </input></program>
 <exercise label="nested-pattern-exercise"><statement>
  <p>Write nested for loops to print a right triangle with a base of 5 # symbols.</p>
</statement>
<program language="java" interactive="activecode"><input>
public class Pattern
{                   
  public static void main(String[] args)
  {
      // Write nested for loops to print a right triangle with a base of 5 # symbols.



  }
}
</input></program>
</exercise>

  </exercises>
</section>