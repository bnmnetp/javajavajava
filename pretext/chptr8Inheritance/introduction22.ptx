<section xml:id="introduction22">
  <title>Introduction</title>
  <p>
    Among the most important concepts in object oriented programming are the concepts of 
    <term>inheritance</term> and <term>polymorphism</term>.
    We first introduced the idea of inheritance in Chapter<nbsp/>0.
    There we compared inheritance to the natural form of inheritance,
    in which horses and cows share certain inherited characteristics,
    such as being warm-blooded, by virtue of their being mammals.
    <!-- We also gave the example of a hierarchy of chess pieces and showed how different kinds of chess pieces,
    such as
<c>Pawn</c> and <c>Bishop</c>, inherited certain shared characteristics from their <c>ChessPiece</c> superclass.
    -->
  </p>
  <p>
    We took a more technical look at inheritance in Chapter<nbsp/>3,
    where we talked about the <c>toString()</c> method and how it is inherited from the <c>Object</c> class.
    We illustrated there how subclasses of <c>Object</c> could override the inherited <c>toString()</c> method in order to customize it for their purposes.
    We also introduced the idea of polymorphism, in which a method call,
    such as <c>obj.toString()</c>, can have different behaviors depending on the type of object, <c>obj</c>, on which it is called.
  </p>
  <p>
    In Chapter 4, we continued introducing inheritance and polymorphism,
    when we learned about Java's Abstract Windowing Toolkit (AWT) and Swing hierarchies,
    the class hierarchies that are used to create Graphical User Interfaces (GUIs).
    We also learned how to extend a class to create our own subclass,
    and we made limited use of inheritance in the design of the <c>SimpleGUI</c> class.
    We were also introduced to the concept of a Java interface,
    and we learned how to use the <c>ActionListener</c> interface to enable a <c>SimpleGUI</c> to handle action events while the GUI is running.
  </p>
  <p>
    In this chapter we will take a much closer look at these important object-oriented concepts.
    We will learn how Java's <term>dynamic binding</term>
    mechanism works and how it makes polymorphism possible.
    Most importantly,
    we will see why inheritance and polymorphism are important elements of object-oriented design,
    and we will learn how to use these important tools to design several different programs.
    In keeping with our running games example,
    we will develop a <c>TwoPlayerGame</c> hierarchy and show how it can simplify the implementation of <c>OneRowNim</c> and other two-player games.
  </p>
</section>