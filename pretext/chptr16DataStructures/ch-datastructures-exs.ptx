<section xml:id="ch-datastructures-exs">
    <title>Exercises</title>
<subsection>
  <p>
       <term>Note:</term> For programming exercises, <term>first</term> draw a UML class diagram describing 
       all classes and their inheritance relationships and/or associations.
  </p>
  <ol>
    <li>
      <p>
        Explain the difference between each of the following pairs of terms:
        <ol>
        <li>
            <p>
          <em>Stack</em> and <em>queue</em>.
            </p>
        </li>
        <li>
            <p>
         <em>Static structure</em> and <em>dynamic structure</em>.
            </p>
        </li>
        <li>
            <p>
		<em>Data structure</em> and <em>Abstract Data Type</em>.
            </p>
        </li>
        <li>
            <p>
		<em>Push</em> and <em>pop</em>.
            </p>
        </li>
        <li>
            <p>
		<em>Enqueue</em> and <em>dequeue</em>.
            </p>
        </li>
        <li>
            <p>
		<em>Linked list</em> and <em>node</em>.
            </p>
          </li>     
        </ol>
      </p>
     </li>
    <li>
      <p>
        Fill in the blanks.
        <ol>
          <li>
            <p>
              An <em>Abstract Data Type</em> consists of two main parts: <c>__________</c> and <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              An object that contains a variable that refers to an object of the same class is a <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              One application for a <c>__________</c> is to manage the method call and returns in a computer program.
            </p>
          </li>
          <li>
            <p>
              One application for a <c>__________</c> is to balance the parentheses in an arithmetic expression.
            </p>
          </li>
          <li>
            <p>
              A <c>__________</c> operation is one that starts at the beginning of a list and processes each element.
            </p>
          </li>
          <li>
            <p>
              A vector is an example of a <c>__________</c> data structure.
            </p>
          </li>
          <li>
            <p>
              An array is an example of a <c>__________</c> data structure.
            </p>
          </li>
          <li>
            <p>
              By default, the initial value of a reference variable is <c>__________</c> .
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Add a <c>removeAt()</c> method to the <c>List</c> class to return the object at a certain index location in the list.
        This method should take an <c>int</c> parameter,
        specifying the object's position in the list,
        and it should return an <c>Object</c>.
      </p>
    </li>
    <li>
      <p>
        Add an <c>insertAt()</c> method to the <c>List</c> class that will insert an object at a certain position in the list.
        This method should take two parameters,
        the <c>Object</c> to be inserted,
        and an
<c>int</c> to designate where to insert it.
        It should return a
<c>boolean</c> to indicate whether the insertion was successful.
      </p>
    </li>
    <li>
      <p>
        Add a <c>removeAll()</c> method to the <c>List</c> class.
        This <c>void</c> method should remove all the members of the list.
      </p>
    </li>
    <li>
      <p>
        Write an <c>int</c> method named <c>size()</c> that returns the number of elements in a <c>List</c>.
      </p>
    </li>
    <li>
      <p>
        Write an <c>boolean</c> method named <c>contains(Object o)</c> that returns
<c>true</c> if its <c>Object</c> parameter is contained in the list.
      </p>
    </li>
    <li>
      <p>
        The <em>head</em> of a list is the first element in the list.
        The <em>tail</em> of a list consists of all the elements except the head.
        Write a method named <c>tail()</c> that returns a reference to the tail of the list.
        Its return value should be <c>Node</c>.
      </p>
    </li>
    <li>
      <p>
        Write a program that uses the <c>List</c>ADT to store a list of 100 random floating-point numbers.
        Write methods to calculate the average of the numbers.
      </p>
    </li>
    <li>
      <p>
        Write a program that uses the <c>List</c>ADT to store a list of <c>Student</c> records,
        using a variation of the Student class defined in Chapter 11.
        Write a method to calculate the mean grade point average for all students in the list.
      </p>
    </li>
    <li>
      <p>
        Write a program that creates a copy of a <c>List</c>. It is necessary to copy each node of the list.
        This will require that you create new nodes that are copies of the nodes in the original list.
        To simplify this task,
        define a copy constructor for your node class and then use that to make copies of each node of the list.
      </p>
    </li>
    <li>
      <p>
        Write a program that uses a <c>Stack</c>ADT to determine if a string is a palindrome<mdash/>spelled the same way backward and forward.
      </p>
    </li>
    <li>
      <p>
        Design and write a program that uses a <c>Stack</c> to determine whether a parenthesized expression is well-formed.
        Such an expression is well formed only if there is a closing parenthesis for each opening parenthesis.
      </p>
    </li>
    <li>
      <p>
        Design and write a program that uses <c>Stack</c> s to determine whether an expression involving both parentheses and square brackets is well formed.
      </p>
    </li>
    <li>
      <p>
        Write a program that links two lists together,
        appending the second list to the end of the first list.
      </p>
    </li>
    <li>
      <p>
        Design a <c>Stack</c> class that uses a <c>Vector</c> instead of a linked list to store its elements.
        This is the way Java's <c>Stack</c> class is defined.
      </p>
    </li>
    <li>
      <p>
        Design a <c>Queue</c> class that uses a <c>Vector</c> instead of a linked list to store its elements.
      </p>
    </li>
    <li>
      <p>
        Write a program that uses the <c>List&lt;E&gt;</c> and <c>LinkedList&lt;E&gt;</c> classes to store a list of <c>Student</c> records,
        using a variation of the <c>Student</c> class defined in Chapter 11.
        Write a method to calculate the mean grade point average for all students in the list.
      </p>
    </li>
    <li>
      <p>
        Write an implementation of the <c>insert()</c> method of the <c>PhoneTree</c> class described at the end of this chapter.
      </p>
    </li>
    <li>
      <p>
        Write an implementation of the <c>insert()</c> method of the <c>PhoneTreeNode</c> class described at the end of this chapter.
      </p>
    </li>
    <li>
      <p>
    <em>Challenge:</em> Design a <c>List</c> class,
        similar in functionality to the one we designed in this chapter,
        that uses an <em>array</em> to store the list's elements.
        Set it up so that the middle of the array is where the first element is placed.
        That way you can still insert at both the front and rear of the list.
        One limitation of this approach is that,
        unlike a linked list, an array has a fixed size.
        Allow the user to set the initial size of the array in a constructor,
        but if the array becomes full,
        don't allow any further insertions.
    </p>
    </li>
    <li>
      <p>
        <em>Challenge:</em> Add a method to the program in the previous exercise that 
        lets the user increase the size of the array used to store the list.
      </p>
    </li>
    <li>
      <p>
        <em>Challenge:</em> Recursion is a useful technique for list processing.
        Write recursive versions of the <c>print()</c> method and the lookup-by-name method for the <c>PhoneList</c>.
         (<em>Hint</em>: The base case in processing a list is the empty list.
        The recursive case should handle the head of the list and then recurse on the tail of the list.
        The tail of the list is everything but the first element.) Challenge: Design an <c>OrderedList</c> class.
        An ordered list is one that keeps its elements in order.
        For example, if it's an ordered list of integers,
        then the first integer is less than or equal to the second,
        the second is less than or equal to the third, and so on.
        If it's an ordered list of employees,
        then perhaps the employees are stored in order according to their social security numbers.
        The <c>OrderedList</c> class should contain an <c>insert(Object o)</c> method that inserts its object in the proper order.
        One major challenge in this project is designing your class so that it will work for any kind of object.
        (<em>Hint:</em> Define an <c>Orderable</c> interface that defines an abstract <c>precedes()</c> method.
        Then define a subclass of <c>Node</c> that implements <c>Orderable</c>. This will let you compare any 
        two <c>Node</c> s to see which one comes before the other.)
      </p>
    </li>
  </ol>
</subsection>
</section> 