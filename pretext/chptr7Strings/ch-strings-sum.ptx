<section xml:id="ch-strings-sum">
    <title>Chapter Summary</title>
    <subsection>
        <title>Technical Terms</title>
        <tabular>
         <row>
           <cell>baseline</cell>
           <cell>concatenation</cell>
           <cell>copy cosntructor</cell>
        </row>
        <row>
    <cell>data structure</cell>
    <cell>delimited string</cell>
    <cell>delimiter</cell>
</row>
<row>    
    <cell>empty string</cell>
    <cell>garbage collection</cell>
    <cell>glyph</cell>
</row>
<row>
    <cell>lexicographic order</cell>
    <cell>logical font</cell>
    <cell>off-by-one error</cell>
</row>
<row>
    <cell>orphan object</cell>
    <cell>physical font</cell>
    <cell>read only</cell>
</row>
<row>    
    <cell>string</cell>
    <cell>string index</cell>
    <cell>string literal</cell>
</row>
<row>
    <cell>token</cell>
    <cell>unit indexed</cell>
    <cell>zero indexed</cell>
</row>
    </tabular>
    </subsection>
    <subsection>
            <title>Important Points}</title>
    <p>
      <ul>
        <li>
          <p>
            A <c>String</c> literal is a sequence of 0 or more characters enclosed within double quotation marks.
            A <c>String</c> object is a sequence of 0 or more characters,
            plus a variety of class and instance methods and variables.
          </p>
        </li>
        <li>
          <p>
            A <c>String</c> object is created automatically by Java the first time it encounters a
            <em>literal string</em>, such as
            <q>Socrates,</q>
            in a program.
            Subsequent occurrences of the literal do not cause additional objects to be instantiated.
            Instead, every occurrence of the literal
            <q>Socrates</q>
            refers to the initial object.
          </p>
        </li>
        <li>
          <p>
            A <c>String</c> object is created whenever the <c>new</c> operator is used in conjunction with a <c>String()</c> constructor<mdash/>for example, <c>new String("hello")</c>.
          </p>
        </li>
        <li>
          <p>
            The <c>String</c> concatenation operator is the overloaded <m>+</m> symbol;
            it is used to combine two <c>String</c> s into a single
<c>String</c>:
            <q>hello</q>
            +
            <q>world</q>
             <c>==></c>
            <q>helloworld</q>. Strings are indexed starting at 0.
            The <c>indexOf()</c> and <c>lastIndexOf()</c> methods
              <idx><h>String methods</h></idx>
            are used for finding the first or last occurrence of a character or substring within a <c>String</c>. The <c>valueOf()</c> methods convert a nonstring into a <c>String</c>. The <c>length()</c> method determines the number of characters in a <c>String</c>. The <c>charAt()</c> method returns the single character at a particular index position.
            The various <c>substring()</c> methods return the substring at particular index positions in a <c>String</c>.
          </p>
        </li>
        <li>
          <p>
            The overloaded <c>equals()</c> method returns <c>true</c> if two
            <c>String</c> s contain the same exact sequence of characters.
            The <c>==</c> operator,
            when used on <c>String</c> s, returns true if two references designate the same <c>String</c> object.
            String objects are <em>immutable</em>.
            They cannot be modified.
          </p>
        </li>
        <li>
          <p>
            A <c>StringBuffer</c> is a string object that can be 
            modified using methods such as <c>insert()</c> and <c>append()</c>.
          </p>
        </li>
        <li>
          <p>
            A <c>StringTokenizer</c> is an object that can be used to 
            break a <c>String</c> into a collection of <em>tokens</em>
            separated by <em>delimiters</em>.
            The whitespace characters<mdash/>tabs,
            blanks, and newlines<mdash/>are the default delimiters.
          </p>
        </li>
        <li>
          <p>
            The <c>FontMetrics</c> class is used to obtain the specific 
            dimensions of the the various <c>Font</c> s.
            It is useful when you wish to center text.  <c>Font</c> s are 
            inherently platform dependent.
            For maximum portability, it is best to use default fonts.
          </p>
        </li>
      </ul>
    </p>
</subsection>

<solutions scope="chapter-strings" divisional="solution" project="solution" inline="solution">
  <title>Solutions to Self-Study Exercises</title>
</solutions>
</section>