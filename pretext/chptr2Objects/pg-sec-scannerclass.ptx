<section xml:id="pg-sec-scannerclass">
  <title>From the Java Library: <c>java.util.Scanner</c></title>
  <introduction>
    <p>
      If we wish to write useful interactive programs,
      we need to send and receive information to and from the user.
      In the previous chapter, we learned how to send
      output from a program to the console using the <c>System.out.print()</c> and
      <c>System.out.println()</c> statements.
    </p>
    <p>
      In this section we introduce the <c>java.util.Scanner</c> class 
      for handling keyboard input.
<!--      Receiving input from the keyboard,
      together with sending output to the console window,
      creates one of the standard user interfaces for programs.
-->
    </p>
    <p>
      Recall that in Java
      any source or destination for I/O is considered a stream of bytes or characters.
      To perform keyboard input,
      we will extract characters from <c>System.in</c>, the input stream connected to the keyboard.
    </p>
<!--
    <p>  
      Getting keyboard input from <c>System.in</c> involves two complications that 
      are not present in dealing with <c>System.out.println()</c>. First,
      normal keyboard input consists of a sequence 
      of characters or digits which represent a word,
      or phrase, or integer, or real number.
      Normally, an entire sequence of characters typed by the user will represent data to be stored in 
      a single variable with the user hitting the return or enter key to signal the end of a 
      piece of requested data.
    </p>
    <p>
      Java's <c>BufferedReader</c> class collects characters into a <term>buffer</term> 
      until it detects the return or enter key.
    </p>
  -->
    <figure xml:id="fig-scanneruml">
      <caption>The <c>Scanner</c> class.</caption>
       <image width="40%" source="chptr02/scanneruml.png"/>
    </figure>  
<!--
    <p>
      A second complication involves how to handle 
      data that is in wrong format.
      The <c>BufferedReader</c> class handles this problem by using <em>exceptions</em>,
      a special kind of error message,
      that must be handled by the programmer.
      Chapter 11 is devoted to exceptions and we will avoid their use,
      as far as possible, until that time.
    </p>
  -->
  <!--
      The <c>Scanner</c> class in the <c>java.util</c> package 
      permits keyboard input without forcing the programmer to handle exceptions.
      We introduce the <c>Scanner</c> class in the next subsection and then describe how a 
      user defined class introduced in Chapter<nbsp/>4 can function in an equivalent fashion to permit simple keyboard input.
    </p>
  -->
  </introduction>

  <subsection>
    <title>Keyboard Input with the <c>Scanner</c>Class</title>

    <p>
      A partial definition of <c>Scanner</c> is shown in <xref ref="fig-scanneruml">Figure</xref>.
      The methods listed there are but a small subset of the 
      public methods of this class.
      Because the Scanner class is in the <c>java.util</c> package we need 
      to import it as follows when we want to use it:
    </p>
 <program language="java"><input>
import java.util.Scanner;
 </input></program>
    <p>
      To use a <c>Scanner</c> object for keyboard input,
      we must create an instance and associate it with <c>System.in</c>. 
      The following statement will
      declare and instantiate an object that can be used for keyboard input:
    </p>
 <program language="java"><input>
Scanner sc = new Scanner(System.in);
 </input></program>
    <p>
      After we create a <c>Scanner</c> object,
      we can make a call to <c>nextInt()</c>, <c>nextDouble()</c>, or <c>next()</c>, 
      depending on the type of input data we want <mdash/> 
      an integer, a real number, or a string.
      The program in <xref ref="list-scannerprog">Listing</xref>
      demonstrates how an integer would be read and used.
    </p>
    <listing xml:id="list-scannerprog">
      <caption>A very brief program with a Scanner object used for keyboard input</caption>
 <program language="java"><input>
import java.util.Scanner;
public class TestScanner
{
  public static void main(String[] args)
  {               
    Scanner sc = new Scanner(System.in);   // Create Scanner object
    System.out.print("Input an integer:"); // Prompt
    int num = sc.nextInt();                // Read an integer
    System.out.println(num + " squared = " + num * num);
  } //main()
} // TestScanner class
 </input></program>
</listing>
    <p>
      When the <c>nextInt()</c>
      method is called,
      no further statements are executed until an <c>int</c> value is read from
      the keyboard and assigned to <c>num</c>. 
      Normally this does not happen until the user has typed in the digits of an 
      integer and hit the return or enter key.
      Thus executing the <c>main()</c> method of the <c>TestScanner</c> class will result in the 
      following interaction:
    </p>
 <pre>
Input an integer:123
123 squared = 15129
 </pre>
    <p>
      Keyboard input of real numbers and strings would be handled in a similar manner.
    </p>
    <p>
      Keyboard input will allow us to create examples of <term>command line interfaces</term> 
      for interactive programs.
      For example, the code
    </p>
 <program language="java"><input>
Scanner sc = new Scanner(System.in);
Riddle riddle = new Riddle(
  "What is black and white and red all over?",
  "An embarrassed zebra.");
System.out.println("Here is a riddle:");
System.out.println(riddle.getQuestion());
System.out.print("To see the answer, ");  // Prompt
System.out.println("type a letter and enter.");
String str = sc.next();         // Wait for input
System.out.println(riddle.getAnswer());
 </input></program>
    <p>
      will display a riddle question and prompt the user to type a letter and to 
      hit the enter key to see the answer.
      In the next chapter,
      we will develop new methods for the <c>OneRowNim</c> class that will 
      be able to use <c>int</c> values input from the keyboard for the next move.
    </p>
</subsection>
<subsection>
  <title>Scanner Peculiarities</title>
    <p>
      The <c>Scanner</c> class is designed to work with a wide variety of input streams, not just
      keyboard input. Because of this, it has some features that don't work well with simple 
      keyboard input.
    </p>
    <p>
      One such peculiarity is that by default a <c>Scanner</c> object assumes that individual 
      chunks of data 
      are separated by (or, <term>delimited</term> by) <term>white space</term> <mdash/> i.e., by blank spaces 
      or tabs or carriage returns or new lines. This poses
      a problem when using a <c>Scanner</c> to read a string that contains spaces. 
      For example, consider the following code segment:
    </p>
      <program language="java"><input>
        System.out.print("Input the name of the first president of the USA:");
        String str = sc.next();
      </input></program>
<!--
      has a set of character strings that separate or <term>delimit</term>
      the chunks of data that it is looking for.
      By default, this set of delimiters consists of any non-empty sequence of
      <em>white space</em> characters,
      that is, the space, tab, return, and newline characters.
      This will allow a user to input several integers separated by spaces before hitting the enter key.
      This might be handled by code like:
    </p>
 <program language="java"><input>
System.out.print("Input two integers and an enter:");
int num1 = sc.nextInt();
int num2 = sc.nextInt();
 </input></program>
    <p>
      White space as delimiters also means that the <c>next()</c> method cannot return an empty string nor can it return a string that contains any spaces.
      For example, consider the code:
    </p>
  -->
    <p>
      If you type "George Washington" and hit the enter key,
      the string <c>str</c> will store only "George", because the <c>Scanner</c> will stop 
      inputting when it encounters the blank space.
    </p> 
    <p>
      In order to get a <c>Scanner</c> object to read strings that contain spaces,
      we must call the <c>useDelimiter()</c> method to tell <c>Scanner</c> to include 
      only carriage returns and enter keys as its delimiters.
      For example, the following statement, which works on most Windows systems,
    </p>
 <program language="java"><input>
sc = sc.useDelimiter("\r\n");
 </input></program>
    <p>
      will enable the <c>next()</c> method to input strings that contain spaces. It will
      accept all keyboard input up to but not including the enter key. (The <q>\r</q> and
      <q>\n</q> are the <url href="https://en.wikipedia.org/wiki/ASCII" visual="">ASCII</url> characters for 
      carriage return and new line, respectively.) 
    </p>

  </subsection>
  <subsection>
    <title>Exceptions</title>
    <p>
      There are lots of things that csn go wrong when performing input. For example, if your
      program calls <c>nextInt()</c> to input an integer and the user types <q>hello</q>,
      the program will be terminated with an error message.
    </p>
    <p>
      Generally, Java programs use <term>Exceptions</term> to handle such situations. We deliberately
      chose the <c>Scanner</c> class because it doesn't require us to deal with exceptions
      right now. We'll cover that topic in chapter 11.
    </p>
    <p>
      But it's important to realize that our strategy for handling keyboard input with
      the <c>Scanner</c> class is a temporary solution.
    </p>
  </subsection>
<!--
  <subsection xml:id="fig-kbreaderuml">
    <title>Keyboard Input with the <c>KeyboardReader</c>Class</title>
    <p>
      <image width="73%" source="chptr02/kbreaderuml.png"/> If you are using an older version of Java that does not have the <c>Scanner</c> class,
      a user-defined class can be used instead.
      A <c>KeyboardReader</c> class that uses the <c>BufferedReader</c> class will be developed in Chapter<nbsp/>4.
      It has methods that read data from the keyboard in a manner very similar to those of the <c>Scanner</c> class.
      A partial list of its public methods is given in the UML class diagram shown in Figure<nbsp/>2.27.
      To use the <c>KeyboardReader</c> class for keyboard input,
      copy the source code <c>KeyboardReader.java</c> from Chapter<nbsp/>4 into the same directory as the source code of your current Java class
      (and add it to your current project if you are using a integrated development environment).
    </p>
    <p>
      To use a <c>KeyboardReader</c> object,
      we need to create an instance of the class with a constructor.
      Then calling one of the three methods will return an <c>int</c>, <c>double</c>, or <c>String</c> when data is input from the keyboard.
      Any of the three methods of a <c>KeyboardReader</c> object will attempt to process the entire string input from the keyboard up to the point that the enter key is hit.
      That is, the character or characters generated by hitting the return or enter key is the delimiter used by <c>KeyboardReader</c>. The <c>TestKeyboardReader</c> class definition in <xref ref="fig-kbreaderprog">Figure</xref>
    </p>
    <figure xml:id="fig-kbreaderprog">
      <caption>A very brief program with a KeyboardReader object used for keyboard input.</caption>
 <program language="java"><input>
public class TestKeyboardReader
{
  public static void main(String[] args)
  {             // Create KeyboardReader object
    KeyboardReader kb = new KeyboardReader();
    System.out.print("Input an integer:"); // Prompt
    int num = kb.getKeyboardInteger(); // Read an integer
    System.out.println(num + " squared = " + num*num);
  } //main()} // TestKeyboardReader class
 </input></program>
    </figure>
    <p>
      reads an integer from the keyboard and squares it just like the <c>TestScanner</c> class.
      In the remainder of the text,
      any time the <c>Scanner</c> class is used for keyboard input,
      the same program can be run using the <c>KeyboardReader</c> class after making the obvious substitutions.
    </p>
  </subsection>
-->
  <subsection>
  <title>Self-Study Exercise</title>
    <p>
      <ol>
        <li>
          <p>
            Modify the <c>main()</c> method of the <c>TestScanner</c> class (<xref ref="list-scannerprog">Listing</xref>)
             so that it reads a real number from the keyboard rather than an integer.
          </p>
        </li>
      </ol>
    </p>

  </subsection>

</section>