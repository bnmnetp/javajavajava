<section xml:id="ch1-compiling">
  <title>Editing, Compiling, and
  Running a Java Program</title>
  <introduction>
    <p>
      In this section we give a brief averview of how to compile and run a Java program.
      For a more detailed discussion see <xref ref="appendix-jdk">Appendix</xref>.

      We begin with a brief overview of the types of programming environments one might encounter.
    </p>
  </introduction>
  <subsection>
    <title>Java Development Environments</title>
    <p>
      Java is owned and maintained by Oracle. It is available free for various platforms, including Linux, Windows, and macOS. 
      Since 1998 Java has gone through many versions. The current version as of this writing is Java 18.  
    </p>
    <p>
      Everything needed to write Java programs <mdash/> except for a text editor <mdash/>  is available for free in the 
      <url href="https://www.oracle.com/java/technologies/downloads/#jdk18-mac" visual="">Java Development Kit (JDK)</url>. 
    </p>
    <p>
      There are also several <em>integrated development environments (IDEs)</em> available for developing Java programs.
      IDEs integrate the JDK with a text editor, giving you everything you need in one software package.
      These include the open source <url href="https://www.eclipse.org/ide/" visual="">Eclipse IDE</url> and Oracle's own 
      <url href="https://www.oracle.com/tools/technologies/netbeans-ide.html" visual="">NetBeans IDE</url>. 
    </p>
    <figure xml:id="fig_compile">
      <caption>Editing, compiling, and running<c>HelloWorld.java</c>.</caption>
      <image width="50%" source="chptr01/compile.png"/>
    </figure>
    <p>
      <xref ref="fig_compile">Figure</xref>
      illustrates the steps involved in creating and running a Java program. 
      It assumes you are using the plain Java JDK as your development environment, not an IDE. 
      The three basic steps are:
      <ol>
       <li>
        <p>Edit the Java source code using a text editor.</p>
       </li>
       <li>
        <p>Compile the Java source code into bytecode using <c>javac</c>.</p>
       </li>
       <li>
        <p>Run the Java bytecode using <c>java</c>.</p>
       </li>
      </ol>
    </p>
  </subsection>
  <subsection>
    <title>Editing a Program</title>
    <p>
      Any text editor can be used to edit a Java program.
      Popular Linux editors include <c>vim</c> and <c>emacs</c>, which are also available on macOS and Windows.
      Free macOS editors include <url href="https://www.barebones.com/products/bbedit/index.html" visual="">BBEdit</url> 
      and <url href="https://support.apple.com/guide/textedit/welcome/mac" visual="">TextEdit</url>, 
      which is also available for <url href="https://textedit.en.lo4d.com/windows" visual="">Windows computers</url>.  
      <url href="https://notepad-plus-plus.org/" visual="">Notepad++</url> is also a popular Windows text editor.
    </p>
    <p> 
      Let's take another look at the HelloWorld program (<xref ref="lstng_helloworld"></xref>).
      After editing the <c>HelloWorld</c> program, it must be stored in a 
      file named <c>HelloWorld.java</c>. 
    </p>
    <principle>
      <title>File Names</title>
      <p>
        A text file that defines a <c>public</c>Java class named <c>ClassName</c> 
        must be saved in a text file named exactly <c>ClassName.java</c>. There can be only one 
        <c>public</c> class per file.
      </p>
    </principle>
    <p>
      The file name must exactly match the public class name. For example, if the file 
      containing the <c>HelloWorld</c> class were named <c>helloworld.java</c> or <c>Helloworld.java</c>,
      that would cause an error. Java would be looking for a file named <c>HelloWorld.java</c>.
    </p>
    <principle>
      <title>Case Sensitivity</title>
      <p>
        Java is case sensitive,
        which means that it treats <c>helloWorld</c> and <c>Helloworld</c> as different names.
      </p>
    </principle>
  </subsection>
  <subsection>
    <title>Compiling a Program</title>
    <p>
      Before you can run a Java source program you have to compile it into the Java bytecode,
      the intermediate code understood by the Java Virtual Machine (JVM). The compilation step converts
      Java <term>source code</term> into Java <term>bytecode</term> (<xref ref="fig_compile">Figure</xref>). 
    </p>
    <p>
      The Java compiler is named <c>javac</c>.  It is included in the JDK.
      To compile <c>HelloWorld.java</c>, you would simply type the following command on the MacOS or Linux or
      Windows command line, where '$' represents the command prompt:
    </p>
    <c>
    $ javac HelloWorld.java
    </c>
    <p>
      Assuming there are no  errors, <c>javac</c> will create a Java bytecode file 
      named <c>HelloWorld.class</c><mdash/>a file that has the same name as the source file 
      but with the extension <c>class</c> instead of <c>java</c>. By default,
      the bytecode file will be placed in the same directory as the source file.
      After compiling, the directory would look something like this:
    </p>
    <c>
    HelloWorld.class
    HelloWorld.java
    </c>
    <p>
      If <c>javac</c> detects errors in the Java code, 
      a list of error messages will be printed on the console <mdash/>e.g.:
    </p> 
    <c>
    HelloWorld.java:11: error: ';' expected
	   System.out.println(greeting)           //  Output statement
				       ^
    1 error
    </c>
    <p>
    In this case the error is a missing semicolon on line 11.
    </p>
  </subsection>
  <subsection>
    <title>Running a Java Program</title>
    <p>
      Once the program successfully compiles and generates the <c>HelloWorld.class</c>
      bytecode file, it can be executed using the <c>java</c> command, also included in the JDK:
    </p>
    <c>
    $ java HelloWorld
    Hello World!
    </c>
    <p>
      As you see (<xref ref="fig_stdout">Figure</xref>), the program prints <q>Hello World!</q> on the console. 
      Note that we do not use the <c>.class</c> extension with the <c>java</c> command,
      just the file's name.
    </p>
    <figure xml:id="fig_stdout">
      <caption>(WRONG IMAGE) Compiling and running the HelloWorld program.</caption>
      <image width="50%" source="chptr01/1f4.png"/>
    </figure>

    <p> 
      The <c>java</c> command works as follows.  It first loads the Java Virtual Machine (JVM) into the computer's main
      memory.  The JVM then loads the Java bytecode into memory and runs it. 
   </p>
   <p>
      Once a Java program is compiled it can be run on Windows, MacOS, Linux or 
      any other computer system that supports the JVM. This <term>platform 
      independence</term> is one of Java's main strengths. Once compiled, Java bytecode is
      portable. This is not the case for other compiled languages, such as C and C++, which 
      must be compiled separately for each different type of computer.
   </p>

<listing xml:id="hellocanvas">
<caption>The HelloWorldCanvas program.</caption>
 <program language="java"><input>
/** File: HelloWorldCanvas program */
import javax.swing.JFrame; // Import class names
import java.awt.Graphics;
import java.awt.Canvas;
public class HelloWorldCanvas extends Canvas // Class header
{
    // Start of body
    public void paint(Graphics g)  // The paint method
    {
        g.drawString("Hello, World!", 10, 10);
    }  // End of paint

    public static void main(String[] args)   // The main() method
    {   HelloWorldCanvas c = new HelloWorldCanvas();
        JFrame f = new JFrame();
        f.add(c);
        f.setSize(150,150);
        f.setVisible(true);
    }  // End of main
}  // End of HelloWorldCanvas
 </input></program>
</listing>

   <p>
    The steps involved in running the <c>HelloWorldCanvas</c> program (<xref ref="hellocanvas">Figure</xref>) are identical:
 <program language="java"><input>
$ javac HelloWorldCanvas.java 
$ java HelloWorldCanvas
 </input></program>
</p>

<p>
In this case however, the program's output would not appear on the command line. Instead,
as shown in <xref ref="fig_popup">Figure</xref>, it would
be displayed in a pop-up window, a Java <c>JFrame</c>.
</p>

<p>    
    <figure xml:id="fig_popup">
      <caption>(WRONG IMAGE) Out from the HelloWorldCanvas program.</caption>
      <image width="50%" source="chptr01/1f6.png"/>
    </figure>
</p>
  </subsection>
</section>