<section xml:id="ch-recursion-exs">
    <title>Exercises</title>
<subsection>
<p><term>Note:</term> For programming exercises,first draw a UML class diagram describing all classes and 
their inheritance relationships and/or associations.
</p>
    <ol>
      <li>
        <p>
          Explain the difference between the following pairs of terms:
            <ol>
            <li>
             <p>
               <em>Iteration</em> and <em>recursion</em>.
              </p>
            </li>
            <li>
               <p>
               <em>Recursive method</em> and <em>recursive definition</em>.
               </p>
             </li>
             <li>
               <p>
                <em>Base case</em> and <em>recursive case</em>.
               </p>
             </li>
             <li>
               <p>
                <em>Head</em> and <em>tail</em>.
               </p>
             </li>
             <li>
               <p>
                <em>Tail</em> and <em>nontail</em> recursive.
               </p>
             </li>
           </ol>
        </p>
      </li>
      <li>
        <p>
          Describe how the <em>method call stack</em>
          is used during a method call and return.
        </p>
      </li>
      <li>
        <p>
          Why is a recursive algorithm generally less efficient than an iterative algorithm?
        </p>
      </li>
      <li>
        <p>
          A tree, such as a maple tree or pine tree,
          has a recursive structure.
          Describe how a tree's structure displays
          <em>self-similarity</em>
          and <em>divisibility</em>.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to print each element of an array of <c>double</c>.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to print each element of an array of <c>double</c> from the last to the first element.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method that will concatenate the elements of an array of <c>String</c> into a single <c>String</c> delimited by blanks.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method that is passed a single <c>int</c> parameter,
          <m>N \geq 0</m>,
          and prints all the odd numbers between 1 and <em>N</em>.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method that takes a single <c>int</c> parameter <m>N \geq 0</m> and prints the sequence of even numbers between <em>N</em> down to 0.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method that takes a single <c>int</c> parameter
          <m>N \geq 0</m> and prints the multiples of 10 between 0 and <em>N</em>.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to print the following geometric pattern:
 <program language="java"><input>
#
# #
# # #
# # # #
# # # # #
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Write recursive methods to print each of the following patterns.
 <program language="java"><input>
# # # # # # # #     # # # # # # # #
  # # # # # # #     # # # # # # #
    # # # # # #     # # # # # #
      # # # # #     # # # # #
        # # # #     # # # #
          # # #     # # #
            # #     # #
              #     #
 </input></program>
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to print all multiples of <em>M</em>
          up to <em>M</em> * <em>N</em>.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to compute the sum of grades stored in an array.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to count the occurrences of a substring within a string.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to remove the HTML tags from a string.
        </p>
      </li>
      <li>
        <p>
          Implement a recursive version of the <c>Caesar.decode()</c> method from Chapter<nbsp/>8.
        </p>
      </li>
      <li>
        <p>
          The Fibonacci
            <idx><h>Fibonacci sequence</h></idx>
          sequence (named after the Italian mathematician Leonardo of Pisa,
          ca. 1200) consists of the numbers <c>0,1,1,2,3,5,8,13,<ellipsis /> </c> in which each number
          (except for the first two)
          is the sum of the two preceding numbers.
          Write a recursive method <c>fibonacci(N)</c> that prints the first
          <em>N</em> Fibonacci numbers.
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to rotate a <c>String</c> by
          <em>N</em> characters to the right.
          For example, <c>rotateR("hello", 3)</c> should return
          <q>llohe.</q>
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to rotate a <c>String</c> by
          <em>N</em> characters to the left.
          For example, <c>rotateL("hello", 3)</c> should return
          <q>lohel.</q>
        </p>
      </li>
      <li>
        <p>
          Write a recursive method to convert a <c>String</c> representing a binary number to its decimal equivalent.
          For example,
<c>binTodecimal("101011")</c> should return the <c>int</c> value 43.
        </p>
      </li>
      <li xml:id="fig-btree">
        <p>
          A palindrome is a string that is equal to its reverse<mdash/>
          <q>mom,</q>
          <q>i,</q>
          <q>radar</q>
          and
          <q>able was i ere i saw elba.</q>
          Write a recursive
<c>boolean</c> method that determines whether its <c>String</c> parameter is a palindrome.
        </p>
      </li>
        <li>
        <p>
          <image width="73%" source="chptr12/btree.png"/>  Challenge:  Incorporate a <c>drawBinaryTree()</c> method into the <c>RecursivePatterns</c> program.
          A level-one binary tree has two branches.
          At each subsequent level,
          two smaller branches are grown from the endpoints of every existing branch.
          The geometry is easier if you use 45-degree angles for the branches.
          Figure<nbsp/>12.36 shows a level-four binary tree drawn upside down.
        </p>
      </li>
      <li>
        <p>
          Challenge: Towers of Hanoi.
          According to legend,
          some Buddhist monks were given the task of moving 64 golden disks from one diamond needle to another needle,
          using a third needle as a backup.
          To begin with,
          the disks were stacked one on top of the other from largest to smallest (Fig.<nbsp/>12.37).
          The rules were that only one disk can be moved at a time and that a larger disk can never go on top of a smaller one.
          The end of the world was supposed to occur when the monks finished the task!
          Write a recursive method,
<c>move(int N, char A, char B, char C)</c>, that will print out directions the monks can use to solve the towers of Hanoi problem.
          For example,
          here's what it should output for the three-disk case,
<c>move(3, "A", "B", "C")</c>: <image width="73%" source="chptr12/hanoi.png"/> \caption{The towers of Hanoi problem.
          Move all the disks from needle A to needle B.<nbsp/>Only one disk can be moved at a time,
          and a larger disk can never go on top of a smaller one. }
 <program language="java"><input>
Move 1 disk from A to B.
Move 1 disk from A to C.
Move 1 disk from B to C.
Move 1 disk from A to B.
Move 1 disk from C to A.
Move 1 disk from C to B.
Move 1 disk from A to B.
 </input></program>
        </p>
      </li>
    </ol>
    </subsection>
</section> 