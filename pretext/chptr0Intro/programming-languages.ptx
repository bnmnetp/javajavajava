<section xml:id="programming-languages">
  <title>Programming Languages</title>
  <introduction>
  <p>
    Most computer programs today are written in a <term>high-level language
        <idx><h>high-level language</h></idx>
    </term>, such as Java, Python, C, C++, or FORTRAN. 
  </p>
  <p>
    A programming language is considered high level if its statements resemble English-language statements.
    For example,
    all of the languages just mentioned have some form of an
    <q>if</q>
    statement, which says,
    <q>if some condition holds, then take some action.</q>
  </p>
  <p>
    Computer scientists have invented hundreds of high-level programming languages,
    although relatively few of these have been put to practical use.
  </p>
  <p>
    Some of the widely used languages have special features that make them suitable for one type of programming application or another.
    COBOL (COmmon Business-Oriented Language),
    for example, is still used in commercial applications.
    FORTRAN (FORmula TRANslator) is still preferred by some engineers and scientists.
    C and C++ are still the primary languages used by operating system programmers.
  </p>
  <p>
    In addition to having features that make them suitable for certain types of applications,
    high-level languages use symbols and notation that make them easily readable by humans.
    For example,
    arithmetic operations in Java make use of familiar operators such as
    <q><m>+</m></q>
    and
    <q><m>-</m></q>
    and
    <q>/</q>, so that arithmetic expressions look more or less the way they do in algebra.
    So, to take the average of two numbers,
    you might use the expression
  </p>
    <c>
    (a + b) / 2
    </c>
  </introduction>
<subsection>
<title>Machine Languages</title>
  <p>
    The problem is that computers cannot directly understand high-level languages..
    In order for a computer to run a program,
    it must first be translated into the computer's <term>machine language
        <idx><h>machine language</h></idx>
    </term>, which is the language understood by its CPU or microprocessor.
  </p>
  <p>
    Each type of microprocessor has its own particular machine language.
    That's why when you buy software it typically runs on either a Macintosh
    or on a Windows machine, but not on both.
    If a program can run on just one type of chip,
    it is known as <term>platform dependent
        <idx><h>platform independence</h></idx>
    </term>.
  </p>
  <p>
    In general, machine languages are based on the <term>binary code</term>,
    a two-valued system that is well suited for electronic devices.
    In a binary representation scheme,
    everything is represented as a sequence of 1's and 0's, which corresponds closely to the computer's electronic
    <q>on</q>
    and
    <q>off</q>
    states.
  </p>
  <p>
    For example,
    in binary code, the number 13 would be represented as 1101.
    Similarly, a particular address in the computer's memory might be represented as 01100011,
    and an instruction in the computer's instruction set might be represented as 001100.
  </p>
  <p>
    The instructions that make up a computer's machine language are very simple and basic.
    For example,
    a typical machine language might include instructions for 
    ADD, SUBTRACT, DIVIDE, and MULTIPLY, but it wouldn't contain an instruction for AVERAGE. 
  </p>
  <p>
    In most cases,
    a single instruction, called an <term>opcode</term>,
    carries out a single machine operation on one or more pieces of data,
    called its <term>operands</term>.
    Therefore, the process of averaging two numbers would have to be broken down into two or more steps.
  </p>
  <p>
    A machine language instruction itself might have something similar to the following format,
    in which an opcode is followed by several operands,
    which refer to the locations in the computer's primary memory where the data are stored.
    The following instruction says ADD the number in LOCATION1 to the number in LOCATION2 and store the result in LOCATION3:
  </p>
  <tabular>
    <row>
      <cell>Opcode</cell>
      <cell>Operand 1</cell>
      <cell>Operand 2</cell>
      <cell>Operand 3</cell>
    </row>
    <row>
      <cell><c>011110</c></cell>
      <cell><c>110110</c></cell>
      <cell><c>111100</c></cell>
      <cell><c>111101</c></cell>
    </row>
    <row>
      <cell>(ADD)</cell>
      <cell>(LOCATION 1)</cell>
      <cell>(LOCATION 2)</cell>
      <cell>(LOCATION 3)</cell>
    </row>
  </tabular>
  <p>
    Given the primitive nature of machine language,
    an expression like <m>(a + b)/2</m> would have to be translated into a sequence of several machine language instructions that,
    in binary code, might look as follows:
  </p>
<tabular>
             <row><cell>011110110110111100111101</cell></row>
             <row><cell>000101000100010001001101</cell></row>
             <row><cell>001000010001010101111011</cell></row>
</tabular>
  <p>
    In the early days of computing,
    before high-level languages were developed,
    computers had to be programmed directly in their machine languages,
    an extremely tedious and error-prone process.
    Imagine how difficult it would be to detect an error that consisted of putting a 0 in the preceding program where a 1 should occur!
  </p>
</subsection>
<subsection>
<title>Translating High-level Programs</title>
  <p>
    Fortunately,
    we no longer have to worry about machine languages,
    because special system software can be used to translate a high-level or <term>source code
        <idx><h>source code</h></idx>
    </term> program into machine language code or <term>object code
        <idx><h>object code</h></idx>
    </term>, which is the only code that can be
    <term>executed</term> or run by the computer.
  </p>
  <p>
    In general, a program that translates source code to object code is known as a <term>translator
        <idx><h>translator</h></idx>
    </term> (<xref ref="fig-translator"></xref>).
    Thus, with suitable translation software for Java or C++ we can write programs as if the computer could understand Java or C++ directly.
  </p>
  <figure xml:id="fig-translator">
    <caption>Translator software translates high-level
    <term>source code</term> to machine language <term>object code</term>.</caption>
    <image width="73%" source="chptr00/0f3.png"/>
  </figure>
  <p>
    Source code translators come in two varieties.
    An <term>interpreter
        <idx><h>interpreter</h></idx>
    </term> translates a single line of source code directly into machine language and executes the code before going on to the next line of source code.
    A <term>compiler
        <idx><h>compiler</h></idx>
    </term> translates the entire source code program into
    <term>executable</term> object code,
    which means that the object code can then be run directly without further translation.
  </p>
  <p>
    There are advantages and disadvantages to both approaches.
    Interpreted programs generally run less efficiently than compiled programs,
    because they must translate and execute each line of the program before proceeding to the next line.
    If a line of code is repeated,
    an interpreter would have to translate the line each time it is encountered.
    By contrast, once compiled,
    an object program is just executed without any need for further translation.
  </p>
  <p>
    It is also much easier to refine compiled code to make it run more efficiently.
    But interpreters are generally quicker and easier to develop and provide somewhat better error messages when things go wrong.
  </p>
  <p>
    Some languages that you may have heard of,
    such as BASIC, LISP, Python, and Perl,
    are mostly used in interpreted form,
    although compilers are also available for these languages.
    Programs written in COBOL, FORTRAN, C, C++, and Pascal are compiled.
  </p>
  <p>
    As we will see in the next section, Java programs use both compilation and interpretation in their translation process.
  </p>
</subsection>
</section>