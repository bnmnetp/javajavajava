<section  xml:id="ch-loops-sum"><title>Chapter Summary</title>
<subsection><title> Technical Term</title>
    <p>
        <tabular>
        <row>
  <cell>
    conditional loop
  </cell>
  <cell>
    loop bound
  </cell>
  <cell>
    sentinel bound
  </cell>
  </row>

  <row>
  <cell>
    counting loop
  </cell>
  <cell>
    loop entry condition
  </cell>
  <cell>
    unit indexing
  </cell>
  </row>

  <row>
  <cell>
    do-while statement
  </cell>
  <cell>
    nested loop
  </cell>
  <cell>
    updater
  </cell>
  </row>

  <row>
  <cell>
    infinite loop
  </cell>
  <cell>
    postcondition
  </cell>
  <cell>
    while statement
  </cell>
  </row>

  <row>
  <cell>
    initializer
  </cell>
  <cell>
    precondition
  </cell>
  <cell>
    zero indexing
  </cell>
  </row>

  <row>
  <cell>
    limit bound
  </cell>
  <cell>
    priming read
  </cell>
</row>
  <row>
  <cell>
    loop body
  </cell>
    <cell>
    repetition structure
  </cell>
  </row>
  </tabular>
    
  </p>
  </subsection>

  <subsection><title>Summary of Important Points</title>
    <ul>
      <li>
        <p>
          A <em>repetition structure</em> is a control structure
            <idx><h>repetition structure</h></idx>
          that allows a statement or sequence of statements to be repeated.
        </p>
      </li>
      <li>
        <p>
          All loop structures involve three elements<mdash/>an <em>initializer</em>,
          a <em>loop entry condition</em>
          or a <em>loop boundary condition</em>, and an <em>updater</em>.
        </p>
      </li>
      <li>
        <p>
          When designing a loop,
          it is important to analyze the loop structure to make sure that the loop bound will eventually be satisfied.
        </p>
      </li>
      <li>
        <p>
          The <c>for</c> statement
            <idx><h>for statement</h></idx>
          has the following syntax:
 <program language="java"><input>
for (  initializer ;  loop entry condition ; updater )
{  
    for loop body 
} 
 </input></program>
 
 A summary of various loop bounds:
          <tabular>
            <row bottom="minor">
              <cell>Bound</cell>
              <cell>Example</cell>
            </row> 
            <row>
              <cell><em>Counting</em></cell> <cell><em>k <m>\lt</m> <m>100</m></em></cell>
              </row>
              <row><cell><em>Sentinel</em></cell><cell><em>input</em> != 9999
                </cell>
                </row>
                <row><cell> <em>Flag</em></cell>
              <cell><em>done</em> != <em>true</em></cell></row>
              <row><cell> <em>Limit</em></cell>
              <cell><em>amount <m>\lt</m> <m>0.5</m></em></cell>
            </row>
           
          </tabular>
        
        </p>
      </li>
      <li>
        <p>
          The <c>while</c> statement takes the following form:
 <program language="java"><input>
 while ( loop entry condition )
 {
     loop body
 } 
 </input></program>
        </p>
      </li>
      <li>
        <p>
          The <c>do-while</c> statement has the following general form:
 <program language="java"><input>
do
{ 
    loop body 
} while ( loop condition );
 </input></program>
        </p>
      </li>
      <li>
        <p>
          When designing a loop,
          it is important to analyze the loop structure to make sure that the loop bound will eventually be satisified.
          The table below summarizes the types of loop bounds that we have identified.
        </p>
      </li>
      <li>
        <p>
          <em>Structured programming
            <idx><h>structured programming</h></idx>
          </em> is the practice of writing programs that are built up from a small set of predefined control structures<mdash/>the
          <em>sequence</em>, <em>selection</em>,
          <em>repetition</em>, and <em>method-call</em> structures.
          An important feature of these structures is that each has a single entry and exit.
        </p>
      </li>
      <li>
        <p>
          A <em>precondition</em> is a condition that must be true before a certain code segment executes.
          A <em>postcondition</em> is a condition that must be true when a certain code segment is finished.
          Preconditions and postconditions should be used in the design, coding,
          documentation, and debugging of algorithms and methods.
        </p>
      </li>
    </ul>
    </subsection>

    <solutions scope="chapter-loops" divisional="solution" project="solution" inline="solution"> 
      <title>Solutions to Self-Study Exercises</title>
      <!-- self-generated from any <exercise> that has a <solution> 
           divisional means inside <exercises>
           inline means an <exercise> that's not inside <exercises>
           project means inside <activity>
           For each type, you can list "statement hint solution answer", 
           but statement includes the whole problem and even ones that don't have solutions.
           <title> included automatically.
      -->
    </solutions>
 
    </section>