<section xml:id="nw-security">
  <title>Java Network Security Restrictions</title>
  <p>
    One of the most attractive features of Java is that extensive effort has been made to make it a
    <em>secure</em> language.
    This is especially important for a language that makes it so easy to implement networking applications.
    After all, nobody wants to download a Java applet that proceeds to erase the hard disk.
    Such an applet might be written by a cyber terrorist,
    deliberately aiming to cause severe damage,
    or it might be written by a cyber doofus,
    who inadvertently writes code that does severe damage.
  </p>
  <p>
    What are some of Java's techniques for guarding against either deliberate or inadvertent insecure code?
    One level of security is  Java's
    <em>bytecode verification</em> process,
    which the Java Virtual Machine performs on any
    <q>untrusted</q>
    code that it receives.
    Java checks every class that it loads into memory to make sure it doesn't contain illegal or insecure code.
    Another line of defense is the so-called
    <term>sandbox security model</term>,
        <idx><h>sandbox security model</h></idx>
    which refers to the practice of restricting the kinds of things that certain programs can do.
    For  example, the
    <q>sandbox</q>
    environment for Java applets restricts them from having any access whatsoever to the local file system.
  </p>
  <p>
    Another restriction imposed on applets is to limit their networking capabilities.
    For example,
    a Java applet cannot create a network connection to any computer except the one from which its code was downloaded.
    Also, a Java applet cannot listen for,
    or accept,  connections on privileged ports<mdash/>those numbered 1024 or lower.
    Together, these two restrictions severely limit the kinds of client/server programs that can be built as applets.
  </p>
  <p>
    Java sets aside certain locations as repositories for
    <term>trusted code</term>.
        <idx><h>trusted code</h></idx>
    For example,
    the Java class libraries would be placed in such a location,
    as would the directories where your Java programs are stored.
    Any class loaded from some other directory is considered <em>untrusted</em>.
    By this definition,
    applets downloaded over the Internet would be considered untrusted code.
  </p>
  <p>
    In addition to the restrictions for applets,
    which  apply to all untrusted code, Java defines a number of other limitations:
    <ul>
      <li>
        <p>
          Untrusted code cannot make use of certain system facilities,
          such as <c>System.exit()</c> and classes in the <c>java.security</c> package.
        </p>
      </li>
      <li>
        <p>
          Untrusted code cannot make use of certain AWT methods,
          such as methods that access the system clipboard.
          Another AWT restriction is that any window created by untrusted code must display a message informing the user that it is untrusted.
          You might have seen such messages on windows opened from applets.
        </p>
      </li>
      <li>
        <p>
          Untrusted code is limited in the kinds of threads it can create.
        </p>
      </li>
    </ul>
  </p>
  <p>
    Security enhancements introduced in JDK 1.2 are based on the concepts of
    <q>permission</q>
    and
    <q>policy.</q>
    Code is assigned
    <q>permissions</q>
    based on the security policy currently in effect.
    Each permission specifies the type of access allowed for a particular resource
    (such as
    <q>read</q>
    and
    <q>write</q>
    access to a specified file or directory, or
    <q>connect</q>
    access to a given host and port).
    The policy that controls permissions can be initialized from an external configurable policy file.
    Unless a permission is explicitly granted to code,
    it cannot access the resource that is guarded by that permission.
    These new enhancements offer a more fine-grained and extensible approach to security for both applets and applications.
  </p>
  <p>
    As this brief overview illustrates,
    the Java Virtual Machine is designed with security as one of its primary issues.
    This doesn't guarantee 100 percent security,
    but it is a big improvement over some of the languages and systems that preceded Java.
    Moreover, security is an ongoing concern of the Java development process.
    Flaws in the existing security system are fixed very quickly.
    Advanced methods are constantly being developed and incorporated into the system.
    One such enhancement is the use of encryption to guarantee the integrity of classes transferred over the network.
  </p>
</section>