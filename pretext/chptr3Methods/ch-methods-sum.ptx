<section xml:id="ch-methods-sum">
    <title>Chapter Summary</title>
    <subsection>
      <title>Technical Terms</title> 
      <p>
       <tabular>
       <row>
      <cell>accessor method</cell>
      <cell>loop structure</cell>
      <cell>repetition structure</cell>
       </row>
       <row>
      <cell>class scope</cell>
      <cell>method overloading</cell>
      <cell>scope</cell>
       </row>
       <row>
      <cell>formal parameter</cell>
      <cell>method signature</cell>
      <cell>selection</cell>
       </row>
       <row>
      <cell>if statement</cell>
      <cell>mutator method</cell>
      <cell>side effect</cell>
       </row>
       <row>
      <cell>if/else statement</cell>
      <cell>multiway selection</cell>
      <cell>while statement</cell>
       </row>
       <row>
      <cell>inherit</cell>
      <cell>override</cell>
      <cell>while structure</cell>
       </row>
       <row>
      <cell>local scope</cell>
      <cell>polymorphism</cell>
      <cell></cell>
       </row>
      </tabular>
    </p>
</subsection>
<subsection>
 <title>Important Points</title>
    <ul>
      <li>
        <p>
           A <em>formal parameter
            <idx><h>parameter</h></idx>
          </em> is a variable in a method declaration.
          It always consists of a type followed by a variable identifier.
          An <em>argument</em> is a value that is passed to a method via a formal parameter when the method is invoked.
          A method's <em>parameters</em> constrain the type of information that can be passed to a method.       
        </p>
      </li>
      <li>
        <p>
          When an argument of primitive type is passed to a method,
          it cannot be modified within the method.
          When an argument of reference type is passed to a method,
          the object it refers to can be modified within the method.        
        </p>
      </li>
      <li>
        <p>
          Except for <c>void</c> methods,
          a <em>method invocation</em> or <em>method call</em>
          is an expression which has a value of a certain type.
          For example, <c>nim.getSticks()</c> returns a <c>int</c> value.        
        </p>
      </li>
      <li>
        <p>
          The <em>signature <idx><h>signature</h></idx> </em> of a method consists of its name,
          and the number, types, and order of its formal parameters.
          A class may not contain more than one method with the same signature.        
        </p>
      </li>
       <li>
        <p>
          A <em>constructor
            <idx><h>constructor</h></idx>
          </em> is a method that is invoked when an object is created.
          If a class does not contain a constructor method,
          the Java compiler supplies a <em>default constructor</em>.
        </p>
      </li>
     <li>
        <p>
          Restricting access to certain portions of a class is a form of
          <em>information hiding<idx><h>Information Hiding Principle</h></idx>
          </em>.
          Generally, instance variables are hidden by declaring them
<c>private</c>. The class's <c>public</c> methods make up its interface.
        </p>
      </li>
      <li>
        <p>
          The <em>if statement</em> executes a statement only if its boolean condition is true.
          The <em>if-else statement</em> executes one or the other of its statements 
          depending on the value of its boolean condition.
          <em>Multiway selection</em> allows one and only one of several choices to be selected 
          depending on the value of its boolean condition.        
        </p>
      </li>
      <li>
        <p>
          The <c>while</c> statement is used for coding loop structures that repeatedly execute 
          a block of code while a boolean condition is satisfied.       
        </p>
      </li>
    </ul>
  </subsection>  

  <solutions scope="chapter-methods" divisional="solution" project="solution" inline="solution"> 
    <title>Solutions to Self-Study Exercises</title>
    <!-- self-generated from any <exercise> that has a <solution> 
         divisional means inside <exercises>
         inline means an <exercise> that's not inside <exercises>
         project means inside <activity>
         For each type, you can list "statement hint solution answer", 
         but statement includes the whole problem and even ones that don't have solutions.
         <title> included automatically.
    -->
  </solutions>

   

  
</section>