<section xml:id="fromthe-java-libraryand-file-input-optional">
  <title>From the Java Library: <c>java.io.File</c>
  and File Input (Optional)</title>
  <introduction>
    <p>
      In addition to command-line and GUI user interfaces,
      there is one more standard user interface, files.
      In this section we show how the <c>Scanner</c> class,
      that was used in Chapter<nbsp/>2 for keyboard input,
      can also read input from files.
      Reading input from a file is relevant to only certain types of programming problems.
      It is hard to imagine how a file would be used in playing the One Row Nim game but a file might very well be useful to store a collection of riddles that could be read and displayed by a Java program.
      We will develop such a program later in this section.
    </p>
    <p>
      Java has two types of files, <em>text files</em>
      and <em>binary files</em>.
      A <term>text file</term> stores a sequence of characters and is the type of file created by standard text editors like
      <em>NotePad</em> and <em>WordPad</em>
      on a Windows computer or <em>SimpleText</em> on a Macintosh.
      A <term>binary file</term> has a more general format that can store numbers and other data the way they are <image width="73%" source="chptr11/fileuml.png"/> stored in the computer.
      In this section we will consider only text files.
      Binary files are considered in Chapter<nbsp/>11.
    </p>
  </introduction>
  <subsection xml:id="fig-scanner2uml">
    <title>File Input with the <c>File</c> and <c>Scanner</c>Classes</title>
    <p>
      An instance of the <c>java.io.File</c> class stores information that a <c>Scanner</c> object needs to create an input stream that is connected to the sequence of characters in a text file.
      A partial list of the public methods of the <c>File</c> class is given in the UML class diagram in Figure<nbsp/>4.26.
      We will need to use only the <c>File()</c> constructor in this section.
      The <c>File</c> instance created with the statement
    </p>

<program language="java">
    <input>
File theFile = new File("riddles.txt");
    </input>
</program>

    <p>
      <image width="73%" source="chptr04/scanner2uml.png"/>
    </p>
    <p>
      will obtain and store information about the "riddles.txt" file in the same directory as the java code being executed,
      if such a file exists.
      If no such file exists,
      the <c>File</c> object stores information needed to create such a file but does not create it.
      In Chapter<nbsp/>11, we will describe how other objects can use a file object to create a file in which to write data.
      If we wish to create a <c>File</c> object that describes a file in a directory other than the one containing the Java program,
      we must call the constructor with a string argument that specifies the file's complete path name<mdash/>that is,
      one that lists the sequence of directories containing the file.
      In any case, while we will not use it at this time,
      the <c>exists()</c> method of a <c>File</c> instance can be used to determine whether or not a file has been found with the specified name.
    </p>
    <p>
      In order to read data from a file with a <c>Scanner</c> object we will need to use methods that were not discussed in Chapter<nbsp/>2.
      An expanded list of methods of the <c>Scanner</c> class is given in Figure<nbsp/>4.27.
      Note the there is a <c>Scanner()</c> constructor with a
<c>File</c> object as an argument.
      Unlike the other <c>create()</c> method that was used in Chapter<nbsp/>2,
      this <c>create()</c> throws an exception that must be handled.
      The following code will create a <c>Scanner</c> object that will be connected to an input stream that can read from a file:
    </p>

<program language="java">
    <input>
try
{   File theFile = new File("riddles.txt");
    fileScan = new Scanner(theFile);
    fileScan = fileScan.useDelimiter("\r\n");} catch (IOException e)
{    e.printStackTrace();} //catch()
    </input>
</program>

    <p>
      We will discuss the <c>try-catch</c> commands when exceptions are covered in Chapter<nbsp/>10.
      Until then, the <c>try-catch</c> structures can be copied exactly as above,
      if you wish to use a <c>Scanner</c> object for file input.
      In the code above,
      the <c>useDelimiter()</c> method has been used to set the <c>Scanner</c> object so that spaces can occur in strings that are read by the <c>Scanner</c> object.
      For the definition of a class to read riddles from a file,
      the above code belongs in a constructor method.
    </p>
    <p>
      After we create a <c>Scanner</c> object connected to a file,
      we can make a call to <c>nextInt()</c>, <c>nextDouble()</c>, or <c>next()</c> method to read,
      respectively, an integer, real number, or string from the file.
      Unlike the strategy for using a <c>Scanner</c> object to get keyboard input,
      it is suggested that you test to see if there is more data in a file before reading it.
      This can be done with the <c>hasNext()</c>, <c>hasNextInt()</c>, and <c>hasNextDouble()</c> methods.
      These methods return the value <c>true</c> if there are more data in the file.
    </p>
    <p>
      The program in <xref ref="fig-fileprog">Figure</xref>
      is the complete listing of a class that reads riddles from a file
    </p>
    <listing xml:id="fig-fileprog">
      <caption>A program which reads riddles from a file and displays them.</caption>

<program language="java">
    <input>
import java.io.*;
import java.util.Scanner;
public class RiddleFileReader
{  private Scanner fileScan; // For file input
   private Scanner kbScan;   // For keyboard input
   public RiddleFileReader(String fName)
   {   kbScan = new Scanner(System.in);
       try
       {   File theFile = new File(fName);
           fileScan = new Scanner(theFile);
           fileScan = fileScan.useDelimiter("\r\n");
       } catch (IOException e)
       {    e.printStackTrace();
       } //catch()
   } //RiddleFileReader() constructor
   public Riddle readRiddle()
   {   String ques = null;
       String ans = null;
       Riddle theRiddle = null;
       if (fileScan.hasNext())
           ques = fileScan.next();
       if (fileScan.hasNext())
       {   ans =  fileScan.next();
           theRiddle = new Riddle(ques, ans);
       } // if
       return theRiddle;
   } // readRiddle()
   public void displayRiddle(Riddle aRiddle)
   {   System.out.println(aRiddle.getQuestion());
       System.out.print("Input any letter to see answer:");
       String str = kbScan .next();  //Ignore KB input
       System.out.println(aRiddle.getAnswer());
       System.out.println();
   } // displayRiddle()
   public static void main(String[] args)
   {   RiddleFileReader rfr =
           new RiddleFileReader("riddles.txt");
       Riddle riddle = rfr.readRiddle();
       while (riddle != null)
       {   rfr.displayRiddle(riddle);
           riddle = rfr.readRiddle();
       } // while
   } //main()}  //RiddleFileReader class
    </input>
</program>

    </listing>
    <p>
      and displays them.
      Note that, in the body of the method <c>readRiddles()</c>, the statements:
    </p>

<program language="java">
    <input>
String ques = null;
String ans = null;
Riddle theRiddle = null;
    </input>
</program>

    <p>
      make explicit the fact that variables that refer to objects are assigned <c>null</c> as a value when they are declared.
      The statements:
    </p>

<program language="java">
    <input>
if (fileScan.hasNext())
    ques = fileScan.next();
if (fileScan.hasNext())
{   ans =  fileScan.next();
    theRiddle = new Riddle(ques, ans);}
    </input>
</program>

    <p>
      will read <c>String</c> s into the variables <c>ques</c> and <c>ans</c> only if the file contains lines of data for them.
      Otherwise the
<c>readRiddle()</c> method will return a <c>null</c> value.
      The <c>main()</c> method uses this fact to terminate a <c>while</c> loop when it runs out of string data to assign to <c>Riddle</c> questions and answers.
      There is a separate method, <c>displayRiddle()</c> using a separate instance of
<c>Scanner</c> attached to the keyboard to display the question of a riddle before the answer.
    </p>
    <p>
      The contents of the "riddles.txt" file should be a list of riddles with each question and answer on a separate line.
      For example The following three riddles saved in a text file would form a good example to test the <c>RiddleFileReader</c> class.
    </p>
    <p>

    </p>

<program language="java">
    <input>
What is black and white and red all over?
  An embarrassed zebra
  What is black and white and read all over?
  A newspaper
  What other word can be made with the letters of ALGORITHM?
  LOGARITHM
    </input>
</program>

    <p>
      When the <c>main()</c> method is executed,
      the user will see output in the console window that looks like:
    </p>

<program language="java">
    <input>
What is black and white and red all over?
  Input any letter to see answer: X
  An embarrassed zebra
  What is black and white and read all over?
  Input any letter to see answer:
    </input>
</program>

    <p>
      Files are covered in depth in Chapter<nbsp/>11.
      Information on writing data to a file and reading data from a file without using the <c>Scanner</c> class can be found in that chapter.
    </p>
</subsection>
<subsection>
<title>Self-Study Exercises</title>
      <ol>
        <li>
          <p>
            Modify the <c>RiddleFileReader</c> class to create a program
<c>NumberFileReader</c> that opens a file named "numbers.txt" and reports the sum of the squares of the integers in the file.
            Assume that the file "numbers.txt" contains a list of integers in which each integer is on a separate line.
            The program should print the sum of the squares in the <c>System.out</c> console window.
            In this case,
            there is no need to have a method to display the data being read or a <c>Scanner</c> object connected to the keyboard.
            You will want a constructor method and a method that reads the numbers and computes the sum of squares.
          </p>
        </li>
      </ol>

  </subsection>
</section>
