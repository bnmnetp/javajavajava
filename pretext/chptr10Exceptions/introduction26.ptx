<section xml:id="ch-10-intro">
  <title>Introduction</title>
  <p>
    Mistakes happen.
    Making mistakes is the norm rather than the exception.
    This is not to say that we make mistakes more often than we get it right.
    It is to say that (almost) nothing we do or build is ever perfectly correct,
    least of all computer software.
    No matter how well-designed a program is,
    there is always the chance that some kind of error will arise during its execution.
  </p>
  <p>
    An <term>exception</term>
        <idx><h>exception</h></idx>
    is an erroneous or anomalous condition that arises  while a program is running.
    Examples of such conditions that we have discussed in this text include attempting to divide by 0
    (arithmetic exception),
    reading a decimal value when an integer is expected
    (number format exception),
    attempting to write to a file that doesn't exist (I/O exception),
    or referring to a nonexistent character in a string
    (index out of bounds exception).
    The list of potential errors and anomalies is endless.
  </p>
  <p>
    A well-designed program should include code to guard against errors and other exceptional conditions when they arise.
    This code should be incorporated into the program from the very first stages of its development.
    That way it can help identify problems during development.
    In Java, the preferred way of handling such conditions is to use
    <term>exception handling</term>,
        <idx><h>exception handling</h></idx>
    a  divide-and-conquer approach that separates a program's normal code from its error-handling code.
  </p>
  <p>
    This chapter describes Java's exception handling features.
    We begin by contrasting the traditional way of handling errors within a program with Java's default exception-handling mechanism.
    We show how exceptions are raised (thrown) and handled (caught) within a program and identify the rules that apply to different kinds of exceptions.
    We then focus on some of the key design issues that govern when, where,
    and how to use exceptions in your programs.
    Finally, we show how to design and implement one's own <c>Exception</c> subclass.
  </p>
</section>