<section xml:id="retrieving-partsof-strings">
  <title>Retrieving Parts of Strings</title>
  <p>
    Programmers often need to retrieve an individual character or a part of a string from a string, as,
    for example,
    in a word processing program when a part of a string is copied or deleted.
    In this section we look at methods that help us with these kinds of tasks.
  </p>
  <subsection><title>charAt() and <c>subString()</c> methods</title>
  <p>
    The <c>charAt(int index)</c> method is a <c>String</c> instance 
    method that can be used to retrieve the character stored at a certain index.
    The several varieties of the <c>substring()</c> method can be used to 
    retrieve a substring of characters from a <c>String</c>. 
    These methods are defined as follows:
  </p>
 <program language="java"><input>
public char charAt(int index)
public String substring(int startIndex)
public String substring(int startIndex, int endIndex)
 </input></program>
  <p>
    The <c>charAt()</c> method
        <idx><h>charAt() method</h></idx>
    returns the character located at the index supplied as its parameter.
    Thus, <c>str.charAt(0)</c> retrieves the first character 
    in <c>str</c>, while <c>str.charAt(str.length()-1)</c> retrieves the last character.
  </p>
  <p>
    The <c>substring()</c> methods
        <idx><h>substring() method</h></idx>
    work in a similar way,
    except that you need to specify both the starting and the ending index 
    of the substring you wish to retrieve.
    The first version of <c>substring(int startIndex)</c> takes a 
    single parameter and returns a <c>String</c> consisting 
    of all the characters beginning with <c>startIndex</c> and 
    continuing up to the end of the <c>String</c>. 
  </p>
  <p>
    For example,
    if the <c>str</c> is
    <q>HelloWorld</q>, then <c>str.substring(5)</c> would return
    <q>World</q>
    and <c>str.substring(3)</c> would return
    <q>loWorld</q>:
  </p>
 <program language="java"><input>
String str = "HelloWorld";
str.substring(5)            ==> "World"
str.substring(3)            ==> "loWorld"
 </input></program>
  <p>
    The <c>substring(int, int)</c> version requires that you specify 
    both the starting and ending index of the substring.
    The second index always points to the character that is one 
    beyond the last character in the <c>String</c> you want to retrieve.
    For example,
  </p>
 <program language="java"><input>
 //   INDEX:   0123456789
 String str = "HelloWorld";
 str.substring(5,7)               ==> "Wo"
 str.substring(0,5)               ==> "Hello"
 str.substring(5, str.length())   ==> "World"
 </input></program>
  <p>
    Note here that when we want to retrieve
    <q>Wo</q>
    from <c>str</c>, we specify its substring as indexes 5 and 7;
    the 7 points to the character just beyond
    <q>Wo.</q>
    Similarly,
    <c>substring(0,5)</c>, picks out the first five characters (<q>Hello</q>).
    In the third example,
    the <c>length()</c> method specifies the substring beginning 
    at index 5 and extending to the end of the string.
    This is equivalent to <c>str.substring(5)</c>:
  </p>
 <program language="java"><input>
//    INDEX:   0123456789
 String str = "HelloWorld";
 str.substring(5, str.length())   ==> "World"
 str.substring(5)                 ==> "World"
 </input></program>
  <p>
    The fact that the second parameter in <c>substring()</c> refers to 
    the character one beyond the desired substring may seem a bit confusing at first,
    but it is actually a very useful way to designate a substring.
    For example,
    many string-processing problems have to do with retrieving substrings from a
    <term>delimited string</term>,
    which is a string that contains special characters that 
    separate the string into certain substrings.  For example,
    consider the string
    <q>substring1:substring2,</q>
    in which the <em>delimiter</em>
    is the colon, <c>':'</c>. The following code retrieves the substring preceding the delimiter:
  </p>
 <program language="java"><input>
String str = "substring1:substring2";
int n = str.indexOf(':');
str.substring(0,n)               ==> "substring1"
 </input></program>
  <p>
    Thus, by making the second index of <c>substring()</c> refer to the 
    character one beyond the last character in the desired substring,
    we can use <c>indexOf()</c> and <c>substring()</c> together to process delimited strings.
    Note that it is not necessary to use a temporary variable <em>n</em>
    to store the index of the delimiter,
    because the two method calls can be nested:
  </p>
 <program language="java"><input>
String str = "substring1:substring2";
str.substring(0,str.indexOf(':'))  ==> "substring1"
 </input></program>
  <principle>
    <title>DEBUGGING TIP: <c>substring(int p1, int p2)</c></title>
    <p>
      Don't forget that the second parameter in the <c>substring()</c> 
      methods refers to the character just past the last character in the substring.
    </p>
  </principle>
  </subsection>
  <subsection>
  <title>Self-Study Exercises</title>
    <exercise label="str-substring-1">
      <title>String substring() expressions</title>
        <statement>
          <p>Given this <c>String</c> declaration</p>
            <program language="java"><input>
            String s = "abcdefghijklmnopqrstuvwxyz";
            </input></program>
          <p>evaluate each of the following expressions.</p>
          <p><term>(Note: All your answers should be enclosed within "" marks.)</term></p>
        <ul>
          <li>
              <c>s.substring(20)</c> <var/>
          </li>
          <li>
              <c>s.substring(1, 5)</c> <var/>
          </li>
          <li>
              <c>s.substring(23)</c> <var/>
          </li>
          <li>
              <c>s.substring(23, 25)</c> <var/>
          </li>
          <li>
              <c>s.substring(s.indexOf('x'))</c> <var/>
          </li>
        </ul>
    </statement>
        <setup>
          <var>
            <condition string="&quot;uvwxyz&quot;">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. Substring starting at index 20 up to 
                the end of the string.</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition string="&quot;bcde&quot;">
              <feedback>
                <p>Correct. You don't include the character at index 5.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. Remember, you don't include the character at index 5.</p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition string="&quot;xyz&quot;">
              <feedback>
                <p>Correct. The substring from 'x' to the end of the string. </p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. The substring should start from 'x' to the end 
                of the string. </p>
              </feedback>
            </condition>
          </var>   
          <var>
              <condition string="&quot;xy&quot;">
                <feedback>
                  <p>Correct. The letter 'z' is not included</p>
                </feedback>
              </condition>
              <condition string=".*">
                <feedback>
                  <p>Incorrect. Remember, the character at index 25 is not included.</p>
                </feedback>
              </condition>
            </var>           
          <var>
              <condition string="&quot;xyz&quot;">
                <feedback>
                  <p>Correct. Good job! </p>
                </feedback>
              </condition>
              <condition string=".*">
                <feedback>
                  <p>Incorrect. Did you first evaluate <c>indexOf(x)</c>?</p>
                </feedback>
              </condition>
            </var>                                   
        </setup>
      </exercise>

    <exercise label="str-substring-2">
      <title>String substring() expressions</title>
        <statement>
          <p>Given this <c>String</c> declaration</p>
            <program language="java"><input>
            String s = "abcdefghijklmnopqrstuvwxyz";
            </input></program>
          <p>evaluate each of the following expressions.</p>
          <p><term>(Note: All your answers should be enclosed within "" marks.)</term></p>
        <ul>
          <li>
              <c>s.substring(20, s.length())</c> <var/>
          </li>
          <li>
              <c>s.substring(s.indexOf('b'), s.indexOf('f'))</c> <var/>
          </li>
          <li>
              <c>s.substring(s.indexOf("xy"))</c> <var/>
          </li>
          <li>
               <c>s.substring(s.indexOf(s.charAt(23)))</c> <var/>
          </li>
          <li>
              <c>s.substring(s.length() - 3)</c> <var/>
          </li>
        </ul>
    </statement>
        <setup>
          <var>
            <condition string="&quot;uvwxyz&quot;">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. This is equivalent to <c>s.substring(20)</c>.</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition string="&quot;bcde&quot;">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect.  This is equivalent to <c>s.substring(1, 5)</c>.</p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition string="&quot;xyz&quot;">
              <feedback>
                <p>Correct. The substring from 'x' to the end of the string. </p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect.  This is equivalent to <c>s.substring(23)</c>. </p>
              </feedback>
            </condition>
          </var>   
          <var>
              <condition string="&quot;xyz&quot;">
                <feedback>
                  <p>Correct.</p>
                </feedback>
              </condition>
              <condition string=".*">
                <feedback>
                  <p>Incorrect.  This is equivalent to the preceding expression.</p>
                </feedback>
              </condition>
            </var>           
          <var>
              <condition string="&quot;xyz&quot;">
                <feedback>
                  <p>Correct. Good job! </p>
                </feedback>
              </condition>
              <condition string=".*">
                <feedback>
                  <p>Incorrect. This is equivalent to the preceding expression.</p>
                </feedback>
              </condition>
            </var>                                   
        </setup>
      </exercise>
  </subsection>
</section>