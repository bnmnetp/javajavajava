<section xml:id="example-keyword-search">
  <title>Example: Keyword Search</title>
  <introduction>
    <p>
      One of the most widely used Web browser functions is the search utility.
      You probably know how it works.
      You type in a keyword and click on a button,
      and it returns with a list of Web pages that contain the keyword.
    </p>
    <p>
      Suppose you were writing a browser in Java.
      How would you implement this function?
      Of course, we don't know yet how to read files or Web pages,
      and we won't cover that until Chapter<nbsp/>11.
      But, for now,
      we can write a method that will search a string for all occurrences of a given keyword.
      That's at least part of the task that the browser's search engine would have to do.
    </p>
    <p>
      So we want a method, <c>keywordSearch()</c>, that takes two <c>String</c> parameters,
      one for the string that's being searched,
      and the other representing the keyword.
      Let's have the method return a
      <c>String</c> that lists the number of keyword occurrences,
      followed by the index of each occurrence.
    </p>
    <p>
      For example,
      if we asked this method to find all occurrences of <em>is</em> in
      <q>This is a test,</q>
      it should return the string
      <q>2: 2 5</q>
      because there are two occurrences of <em>is</em>,
      one starting at index 2 and the other at index 5 in the string.
    </p>
    <p>
      The algorithm for this method will require a loop,
      because we want to know the location of every occurrence of the keyword in the string.
      One way to do this would be to use the <c>indexOf()</c> method to search 
      for the location of substrings in the string.
      If it finds the  keyword at index <em>N</em>,
      it should record that location and then continue searching for 
      more occurrences starting at index <m>N+1</m> in the string.
      It should continue in this way until there are no more occurrences.
    </p>
    <algorithm>
    <title>Keyword search</title>
 <program language="java"><input>
Suppose S is our string and K is the keyword.
Initialize a counter variable and result string.
Set Ptr to the indexOf() the first occurrence of K in S.
While (Ptr != -1)
    Increment the counter
    Insert Ptr into the result string
    Set Ptr to the next location of the keyword in S
Insert the count into the result string
Return the result string as a String
 </input></program>
 </algorithm>
    <p>
      As this pseudocode shows,
      the algorithm uses a while loop  with a
      <em>sentinel bound</em>.
      The algorithm terminates when the
<c>indexOf()</c> method returns a <m>-1</m>,
      indicating that there are no more occurrences of the keyword in the string.
    </p>
    <p>
      Translating the pseudocode into Java gives us the method shown in 
      <xref ref="lst-keywordsearch">Listing</xref>.
      Note how string concatenation is used to build the resultStr . Each time an occurrence is found,
      its location (<c>ptr</c>) is concatenated to the right-hand side of the
      <c>resultStr</c>. When the loop terminates,
      the number of occurrences (<c>count</c>) is concatenated to the left-hand side of the
      <c>resultStr</c>.
    </p>
    <listing xml:id="lst-keywordsearch">
      <caption>The <c>keywordSearch()</c> method.</caption>
 <program language="java"><input>
/**
 * Pre:  s and keyword are any Strings
 * Post: keywordSearch() returns a String containing the
 *  number of occurrences of keyword in s, followed
 *  by the starting location of each occurrence
 */
public String keywordSearch(String s, String keyword) 
{
  String resultStr = "";
  int count = 0;
  int ptr = s.indexOf(keyword);
  while (ptr != -1) {
    ++count;
    resultStr = resultStr + ptr + " ";
    ptr = s.indexOf(keyword, ptr + 1);// Next occurrence
  }
  resultStr = count + ": " + resultStr;// Insert the count
  return resultStr;                  // Return as a String
} // keywordSearch()
 </input></program>
    </listing>
  </introduction>
  <subsection>
    <title>Testing and Debugging</title>
    <p>
      What test data should we use for the <c>keywordSearch()</c> method?  One important consideration in this case is to test that the method works for all possible locations of the keyword within the string.
      Thus, the method should be tested on strings that contain keyword occurrences at the beginning,
      middle, and end of the string.
      We should also test the method with a string that doesn't contain the keyword.
      Such tests will help verify that the loop will terminate properly in all cases.
    </p>
    <p>
      Given these considerations, <xref ref="tab-keywordtest">Table</xref> shows 
      the tests that were made.
      As you can see from these results,
      the method did produce the expected outcomes.
      While these tests do not guarantee its correctness,
      they provide considerable evidence that the algorithm works correctly.
    </p>
    <table xml:id="tab-keywordtest">
      <title>Testing the <c>keywordSearch()</c> method.</title>
      
      <tabular>
        <row bottom="minor" left="minor">
          <cell>Test Performed</cell>
          <cell>Expected Result</cell>
        </row>
        <row>
          <cell><c>keywordSearch("this is a test","is")</c></cell>
          <cell>2: 2 5</cell>
        </row>
        <row>
          <cell><c>keywordSearch("able was i ere i saw elba","a")</c></cell>
          <cell>4: 0 6 18 24</cell>
        </row>
        <row bottom="minor">       
          <cell><c>keywordSearch("this is a test","taste")</c></cell>
          <cell>0:</cell>
        </row>
      </tabular>
    </table>
    <principle>
      <title>EFFECTIVE DESIGN: Test Data</title>
      <p>
        In designing test data to check the correctness of a string searching algorithm,
        it's important to use data that test all possible outcomes.
      </p>
    </principle>
  </subsection>
</section>