<section  xml:id="ch-loops-exs"><title>Exercises</title>
     
  <ol>
    <li>
      <p>
        Explain the difference between the following pairs of terms: 
        
      </p>
      <ol>
        <li>Counting loop and <em>conditional loop</em>.</li>
        <li> For statement and <em>while statement</em>.</li>
        <li> While statement and <em>do-while statement</em>. </li>
        <li>Zero indexing and <em>unit indexing</em>. </li>
        <li>Sentinel bound and <em>limit bound</em>. </li>
        <li>Counting bound and <em>flag bound</em>. </li>
        <li>Loop initializer and <em>updater</em>. </li>
        <li>Named constant and <em>literal</em>. </li>
        <li>Compound statement and <em>null statement</em>.</li>
      </ol>
    </li>
    <li>
      <p>
        Fill in the blank.
        <ol>
          <li>
            <p>
              The process of reading a data item before entering a loop is known as a <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              A loop that does nothing except iterate is an example of <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              A loop that contains no body is an example of a <c>__________</c> statement.
            </p>
          </li>
          <li>
            <p>
              A loop whose entry condition is stated as
              <m>( k \lt 100\; ||\; k >= 0)</m> would be an example of an <c>__________</c> loop.
            </p>
          </li>
          <li>
            <p>
              A loop that should iterate until the user types in a special value should use a <c>__________</c> bound.
            </p>
          </li>
          <li>
            <p>
              A loop that should iterate until its variable goes from 5 to 100 should use a <c>__________</c> bound.
            </p>
          </li>
          <li>
            <p>
              A loop that should iterate until the difference between two values is less than 0.005 is an example of a <c>__________</c> bound.
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Identify the syntax errors in each of the following:
        <ol>
          <li>
            <p>
              for (int k = 0; k &lt; 100; k++) System.out.println(k)
            </p>
          </li>
          <li>
            <p>
              for (int k = 0; k &lt; 100; k++); System.out.println(k);
            </p>
          </li>
          <li>
            <p>
              int k = 0 while k &lt; 100 { System.out.println(k); k++;}
            </p>
          </li>
          <li>
            <p>
              int k = 0; do { System.out.println(k);
              k++;} while k &lt; 100 ;
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Determine the output and/or identify the error in each of the following code segments:
        <ol>
          <li>
            <p>
              for (int k = 1; k == 100; k += 2) System.out.println(k);
            </p>
          </li>
          <li>
            <p>
              int k = 0; while (k &lt; 100) System.out.println(k); k++;
            </p>
          </li>
          <li>
            <p>
              for (int k = 0; k &lt; 100; k++) ; System.out.println(k);
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Write pseudocode algorithms for the following activities,
        paying particular attention to the <em>initializer</em>,
        <em>updater</em>, and <em>boundary condition</em> in each case.
        <ol>
          a softball game a five-question quiz looking up a name in the phone book
        </ol>
      </p>
    </li>
    <li>
      <p>
        Identify the pre- and postconditions for each of the statements that follow.
        Assume that all variables are <c>int</c> and have been properly declared.
        <ol>
          <li>
            <p>
              int result = x / y;
            </p>
          </li>
          <li>
            <p>
              int result = x % y;
            </p>
          </li>
          <li>
            <p>
              int x = 95; do x /= 2; while(x >= 0);
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a <c>while</c> loop,
        and a <c>do-while</c> loop<mdash/>to print all the multiples of 10,
        including 0, up to and including 1,000.
      </p>
    </li>
    <li>
      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a <c>while</c> loop,
        and a <c>do-while</c> loop<mdash/>to print the following sequence of numbers: 45, 36, 27, 18, 9, 0, <m>-9</m>,
        <m>-18</m>,
        <m>-27</m>, <m>-36</m>, <m>-45</m>.
      </p>
    </li>
    <li>
      <p>
        Write three different loops<mdash/>a <c>for</c> loop,
        a while <c>loop</c>, and a <c>do-while</c> loop<mdash/>to print the following ski-jump design:
 <program language="java"><input>
#
# #
# # #
# # # #
# # # # #
# # # # # #
# # # # # # #
 </input></program>
      </p>
    </li>
    <li>
      <p>
        The Straight Downhill Ski Lodge in Gravel Crest, Vermont,
        gets lots of college students on breaks.
        The lodge likes to keep track of repeat visitors.
        Straight Downhill's database includes an integer variable,
        <em>visit</em>,
        which gives the number of times a guest has stayed at the lodge (1 or more).
        Write the pseudocode to catch those visitors who have stayed at the lodge at least twice and to send them a special promotional package
        (pseudocode = send promo). (<em>Note:</em>
        The largest number of stays recorded is eight.
        The number nine is used as an end-of-data flag.)
      </p>
    </li>
    <li>
      <p>
        Modify your pseudocode in the previous exercise.
        In addition to every guest who has stayed at least twice at the lodge receiving a promotional package,
        any guest with three or more stays should also get a $40 coupon good for lodging,
        lifts, or food.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        and displays all the even numbers from 1 to <em>N</em>.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        that prints all the odd numbers from 1 to <em>N</em>.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed a single parameter, <em>N</em>,
        that prints all the numbers divisible by 10 from <em>N</em> down to 1.
      </p>
    </li>
    <li>
      <p>
        Write a method that is passed two parameters<mdash/>a <c>char</c><em>Ch</em>
        and an <c>int</c><em>N</em><mdash/>and prints a string of <em>N Chs</em>.
      </p>
    </li>
    <li>
      <p>
        Write a method that uses a nested <c>for</c> loop to print the following multiplication table:
 <program language="java"><input>
1  2  3  4  5  6  7  8  9
1  1
2  2  4
3  3  6  9
4  4  8 12 16
5  5 10 15 20 25
6  6 12 18 24 30 36
7  7 14 21 28 35 42 48
8  8 16 24 32 40 48 56 64
9  9 18 27 36 45 54 63 72 81
 </input></program>
      </p>
    </li>
    <li>
      <p>
        Write a method that uses nested <c>for</c> loops to print the patterns that follow.
        Your method should use the following statement to print the patterns: <c>System.out.print('#')</c>.
 <program language="java"><input>
# # # # # # # #     # # # # # # # #   # # # # # # # #   # # # # # # # #
  # # # # # # #     # # # # # # #       #         #                 #
    # # # # # #     # # # # # #           #     #                 #
      # # # # #     # # # # #               # #                 #
        # # # #     # # # #                 # #               #
          # # #     # # #                 #     #           #
            # #     # #                 #         #       #
              #     #                 # # # # # # # #   # # # # # # # #
 </input></program>
      </p>
    </li>
    <li>
      <p>
        Write a program that asks the user for the number of rows and the number of columns in a box of asterisks.
        Then use nested loops to generate the box.
      </p>
    </li>
    <li>
      <p>
        Write a Java application that lets the user input a sequence of consecutive numbers.
        In other words,
        the program should let the user keep entering numbers as long as the current number is one greater than the previous number.
      </p>
    </li>
    <li>
      <p>
        Write a Java application that lets the user input a sequence of integers terminated by any negative value.
        The program should then report the largest and smallest values that were entered.
      </p>
    </li>
    <li>
      <p>
        How many guesses does it take to guess a secret number between 1 and <em>N</em>?
        For example, I'm thinking of a number between 1 and 100.
        I'll tell you whether your guess is too high or too low.
        Obviously, an intelligent first guess would be 50.
        If that's too low, an intelligent second guess would be 75.
        And so on.
        If we continue to divide the range in half,
        we'll eventually get down to one number.
        Because you can divide 100 seven times (50, 25, 12, 6, 3, 1, 0),
        it will take at most seven guesses to guess a number between 1 and 100.
        Write a Java Swing program that lets the user input a positive integer,
        <em>N</em>,
        and then reports how many guesses it would take to guess a number between 1 and <em>N</em>.
      </p>
    </li>
    <li>
      <p>
        Suppose you determine that the fire extinguisher in your kitchen loses <em>X</em>
        percent of its foam every day.
        How long before it drops below a certain threshold (<em>Y</em> percent),
        at which point it is no longer serviceable?
        Write a Java Swing program that lets the user input the values
        <em>X</em> and <em>Y</em>
        and then reports how many weeks the fire extinguisher will last.
      </p>
    </li>
    <li>
      <p>
        Leibnitz's method for computing <m>\pi</m> is based on the following convergent series:
        <men>
          \frac{\pi}{4} \; = 1 \; - \; \frac{1}{3} \; + \; \frac{1}{5} \; - \; \frac{1}{7} + \; \cdots
        </men>
        How many iterations does it take to compute <m>\pi</m> to a value between 3.141 and 3.142 using this series?
        Write a Java program to find out.
      </p>
    </li>
    <li>
      <p>
        Newton's method for calculating the square root of <em>N</em>
        starts by making a (nonzero) guess at the square root.
        It then uses the original guess to calculate a new guess,
        according to the following formula:
 <program language="java"><input>
guess = (( N / guess) + guess) / 2;
 </input></program>No matter how wild the original guess is,
        if we repeat this calculation,
        the algorithm will eventually find the square root.
        Write a square root method based on this algorithm.
        Then write a program to determine how many guesses are required to find the square roots of different numbers.
        Uses <c>Math.sqrt()</c> to determine when to terminate the guessing.
      </p>
    </li>
    <li>
      <p>
        Your employer is developing encryption software and wants you to develop a Java Swing Program that will display all of the primes less than <em>N</em>,
        where <em>N</em> is a number to be entered by the user.
        In addition to displaying the primes themselves,
        provide a count of how many there are.
      </p>
    </li>
    <li>
      <p>
        Your little sister asks you to help her with her multiplication and you decide to write a Java application that tests her skills.
        The program will let her input a starting number, such as 5.
        It will generate multiplication problems ranging from from
        <m>5 \times 1</m> to <m>5 \times 12</m>.
        For each problem she will be prompted to enter the correct answer.
        The program should check her answer and should not let her advance to the next question until the correct answer is given to the current question.
      </p>
    </li>
    <li>
      <p>
        Write an application that prompts the user for four values and draws corresponding bar graphs using an ASCII character.
        For example,
        if the user entered 15, 12, 9, and 4, the program would draw
 <program language="java"><input>
******************
************
*********
****
 </input></program>
      </p>
    </li>
    <li>
      <p>
        Revise the application in the previous problem so that the bar charts are displayed vertically.
        For example,
        if the user inputs 5, 2, 3, and 4, the program should display
 <program language="java"><input>
**
 **       **
 **    ** **
 ** ** ** **
 ** ** ** **
-------------
 </input></program>
      </p>
    </li>
    <li>
      <p>
        The Fibonacci
          <idx><h>Fibonacci sequence</h></idx>
        sequence (named after the Italian mathematician Leonardo of Pisa,
        ca. 1200) consists of the numbers <m>0,1,1,2,3,5,8,13,\dots</m> in which each number
        (except for the first two)
        is the sum of the two preceding numbers.
        Write a method <c>fibonacci(N)</c> that prints the first
        <em>N</em> Fibonacci numbers.
      </p>
    </li>
    <li>
      <p>
        The Nuclear Regulatory Agency wants you to write a program that will help determine how long certain radioactive substances will take to decay.
        The program should let the user input two values:
        a string giving the substance's name and its half-life in years. (A substance's half-life is the number of years required for the disintegration of half of its atoms.) The program should report how many years it will take before there is less than 2 percent of the original number of atoms remaining.
      </p>
    </li>
    <li>
      <p>
        Modify the <c>CarLoan</c> program so that it calculates a user's car payments for loans of different interest rates and different loan periods.
        Let the user input the amount of the loan.
        Have the program output a table of monthly payment schedules.
      </p>
    </li>
  </ol>
  <p>
    { The next chapter also contains a number of loop exercises.}
  </p>
</section>