<section xml:id="example-the-cipher-class-hierarchy">
  <title>Example: The Cipher Class Hierarchy</title>
  <introduction>
    <p>
      Suppose we wish to design a collection of cipher classes,
      including a Caesar cipher and a transposition cipher.
    </p>
    <p>
      Because the basic operations used in all forms of encryption are the same,
      both the <c>Caesar</c> class and the <c>Transpose</c> class will have methods to 
      <term>encrypt</term> and <term>decrypt</term> messages,
      where each message is assumed to be a string of words separated by spaces.
      These methods will take a <c>String</c> of words and translate each word using 
      the encoding method that is appropriate for that cipher.
    </p>
    <pre>
      encrypt: Take a sentence and encode each word.
      decrypt: take a sentence and decode each word.
    </pre>
    <p>
      In addition to <c>encrypt()</c> and <c>decrypt()</c>, each cipher class will 
      need polymorphic <term>encode</term> and <term>decode</term> methods,
      which take a single word and encode or decode it according to the rules of 
      that particular cipher.
    </p>
    <pre>
      encode: Take a word and encode it.
      decode: take a word and decode it.
    </pre>
</introduction>
  <subsection>
    <title>Class Hierarchy</title>

    <p>
      From a design perspective the <c>encrypt()</c> and <c>decrypt()</c> methods will 
      be the same for every class: They simply break the message into words and 
      encode or decode each word.
    </p>
    <p>
      However, the
      <c>encode()</c> and <c>decode()</c> methods will be different for each different cipher.
      The <c>Caesar.encode()</c> method should replace each letter of a word with its substitute,
      whereas the <c>Transpose.encode()</c> method should rearrange the letters of the word.
      Given these considerations, how should we design this set of classes?
    </p>
    <p>
      Because all of the various ciphers will have the same methods,
      it will 
      be helpful to define a common <c>Cipher</c> superclass 
      (<xref ref="fig-cipherhier"></xref>), which will encapsulate those 
      features that the individual cipher classes have in common<mdash/>the
      <c>encrypt()</c>, <c>decrypt()</c>, <c>encode()</c>, and <c>decode()</c> methods.
    </p>
    <figure xml:id="fig-cipherhier">
    <caption>Cipher class</caption>
      <image width="50%" source="chptr07/p380f1.png"/> 
    </figure>
      
    <p>
      Some of these methods can be implemented in the <c>Cipher</c> class itself.
      For example,
      the <c>encrypt()</c> method should take a message in a <c>String</c> parameter,
      encode each word in the message,
      and return a <c>String</c> result.
      The following method definition will work for any cipher:
    </p>
 <program language="java"><input>
public String encrypt(String s) {
  StringBuffer result = new StringBuffer("");
  StringTokenizer words = new StringTokenizer(s);// Tokenize
  while (words.hasMoreTokens()) {        // Encode each word
    result.append(encode(words.nextToken()) + " ");
  }
  return result.toString();        // Return result
} // encrypt()
 </input></program>
    <p>
      This method creates a local <c>StringBuffer</c> variable,
      <c>result</c>, and uses <c>StringTokenizer</c> to break the original
      <c>String</c> into its component words.
      It uses the <c>encode()</c> method to encode the word,
      appending the result into <c>result</c>. The result is converted back 
      into a <c>String</c> and returned as the encrypted translation of
      <em>s</em>, the original message.
    </p>
    <p>
      If we define <c>encrypt()</c> in the superclass,
      it will be inherited  by all of <c>Cipher</c>'s subclasses.
    </p>
<!--
      Thus, if we define <c>Caesar</c> and <c>Transpose</c> as  
      instances of these classes will be able to use the <c>encrypt()</c> method.
    </p>
 <program language="java"><input>
public class Caesar extends Cipher { ... }
public class Transpose extends Cipher { ... }
 </input></program>
-->
    <p>
      On the other hand,
      the polymorphic <c>encode()</c> method cannot be implemented within <c>Cipher</c>, 
      because unlike the <c>encrypt()</c> method,
      which is the same for every <c>Cipher</c> subclass,
      the <c>encode()</c> method will be different for every subclass.
    </p>
    <p>
      So, by declaring the <c>encode()</c> method as <c>abstract</c>, we will 
      leave its implementation up to the <c>Cipher</c> subclasses.
      Thus, within the <c>Cipher</c> class,
      we would define <c>encode()</c> and <c>decode()</c> as follows:
    </p>
 <program language="java"><input>
// Abstract methods
public abstract String encode(String word);
public abstract String decode(String word);
 </input></program>
 <!--
    <p>
      These declarations within the <c>Cipher</c> class tell the compiler that these 
      methods will be implemented in <c>Cipher</c>'s subclasses.
      By defining it as <c>abstract</c>, <c>encode()</c> can be used in the <c>Cipher</c> class,
      as it is within the <c>encrypt()</c> method.
    </p>
-->
  </subsection>
  <subsection>
    <title>Class Design: <c>Cipher</c></title>
    <p>
      <xref ref="fig-cipher">Listing</xref> provides the full definition of the <c>Cipher</c> class.
      The abstract encode() and <c>decode()</c> methods will be implemented by <c>Cipher</c>'s 
      subclasses.
    </p>
<listing xml:id="fig-cipher">
  <caption>The <c>abstract Cipher</c> class.</caption>
      
 <program language="java"><input>
import java.util.*;
public abstract class Cipher {
  public String encrypt(String s) {
    StringBuffer result = new StringBuffer("");         // Use a StringBuffer
    StringTokenizer words = new StringTokenizer(s);     // Break s into words
    while (words.hasMoreTokens()) {                     // For each word in s
      result.append(encode(words.nextToken()) + " ");   //  Encode it
    }
    return result.toString();                            // Return the result
  } // encrypt()
  public String decrypt(String s) {
    StringBuffer result = new StringBuffer("");        // Use a StringBuffer
    StringTokenizer words = new StringTokenizer(s);    // Break s into words
    while (words.hasMoreTokens()) {                    // For each word in s
      result.append(decode(words.nextToken()) + " ");  //  Decode it
    }
    return result.toString();                       // Return the decryption
  } // decrypt()
  public abstract String encode(String word);            // Abstract methods
  public abstract String decode(String word);
} // Cipher
 </input></program>
</listing>
    <p>
      Note again that <c>encrypt()</c> and <c>decrypt()</c> call <c>encode()</c> and <c>decode()</c>,  
      respectively.  Java's dynamic binding mechanism will take care of invoking the 
      appropriate implementation of <c>encode()</c> or <c>decode()</c>, depending on what 
      type of cipher is involved.
    </p>
    <!--
      For example,
      if <c>caesar</c> and <c>transpose</c> are <c>Caesar</c> and <c>Transpose</c> objects,
      respectively,
      then the following calls to <c>encrypt()</c> will cause their respective <c>encode()</c> methods to be invoked:
    </p>
 <program language="java"><input>
// Invokes caesar.encode()
caesar.encrypt("hello world");
// Invokes transpose.encode()
transpose.encrypt("hello world");
 </input></program>
    <p>
      When <c>caesar.encrypt()</c> is called,
      it will in turn invoke <c>caesar.encode()</c><mdash/>that is,
      it will call the <c>encode()</c> method implemented in the <c>Caesar</c> class.
      When <c>transpose.encrypt()</c> is invoked,
      it will in turn invoke <c>transpose.encode()</c>. In this way,
      each object can perform the encoding algorithm appropriate for its type of  cipher.
    </p>
-->
  </subsection>
  <subsection>
    <title>Algorithm Design: Shifting Characters</title>
    <p>
      The <c>Caesar</c> class (<xref ref="fig-caesar">Listing</xref>) extends 
      <c>Cipher</c> and implements its own version of <c>encode()</c> and <c>decode()</c>. 
    </p>

<listing xml:id="fig-caesar">
  <caption>The <c>Caesar</c> class.</caption>
  <program language="java"><input>
public class Caesar extends Cipher {

  public String encode(String word) {
    StringBuffer result = new StringBuffer(); // Initialize a string buffer
    for (int k = 0; k &lt; word.length(); k++) { // For each character in word
      char ch = word.charAt(k);               //  Get the character
      ch = (char)('a' + (ch -'a'+ 3) % 26);   //  Perform caesar shift
      result.append(ch);                   //  Append it to new string
    }
    return result.toString();              // Return the result as a string
  } // encode()
  
  public String decode(String word) {
    StringBuffer result = new StringBuffer(); // Initialize a string buffer
    for (int k = 0; k &lt; word.length(); k++) { // For each character in word
    char ch = word.charAt(k);                 //  Get the character
       ch = (char)('a' + (ch - 'a' + 23) % 26); //  Perform reverse shift
       result.append(ch);                     //  Append it to new string
    }
    return result.toString();            // Return the result as a string
  } // decode()
} // Caesar
 </input></program>
</listing>

    <p>
      The <c>encode()</c> method takes a word and returns the result of
      shifting each of the word's letters. How do we do that?
      Fortunately, because <c>char</c> data in Java are represented as 16-bit integers. 
      we can use some arithmetic to perform the shift.
    </p>
    <p>
      For example, the character 'h' has an ASCII code of 104. Adding
      3 gives 107, the ASCII code for 'k', which is shifted 3 characters to the right of 'h'.
    </p>
    <p>
      The problem is this doesn't always work so simply. For example, the ASCII 
      code for 'y' is 121. Adding 3 gives 124, the ASCII code for '|', which is not 
      our desired result. To fix this, what we need to do 
      is <q>wrap around</q> to the beginning of the alphabet,
      so that 'y' gets shifted into 'b'.
    </p>
    <p>
      In order to accomplish this wrap around we need to do some <term>modular arithmetic</term>.  
      The alphabet has 26 letters and
      for any positive integer <em>N</em>, <em>N % 26</em> will always give a number 
      between 0 and 25. If we number the letters 'a' to 'z' as 0 to 25, then 'y' would be 24. 
      Adding 3 gives 27 and 27 % 26 would give 1, which is the letter 'b'. Thus, 
      if we can convert the letters to numbers between 0 and 25, we can use simple arithmetic 
      to perform the shift. This leads to the following algorithm.
    </p>
    <algorithm>
    <title>Ceasar shift the letter ch</title>
    <program language="java"><input>
    1. Convert ch to a number between 0 and 25.
    2. Add the shift to that number.
    3. Divide that number % 26.
    4. Convert the resulting number back to a character.
    </input></program>
    </algorithm>
    <p>
      For step one of this algorithm we can convert any letter
      'a' to 'z' into a number 0 to 25 simply by subtracting
      the letter 'a' from it:      
    </p>
 <program language="java"><input>
'a' - 'a' = 0
'b' - 'a' = 1
'c' - 'a' = 2
...
'z' - 'a' = 25
 </input></program>
<p>
  Adding the shift and dividing % 26 gives us a number between 0 and 25. To convert that
  back into a letter, we can just add the letter 'a' to it and use the <c>(char)</c>
  cast operator to convert it to a character.
</p>

    <p>
      If we combine these steps, we get the following expression for shifting
      <c>ch</c> by  3:
    </p>
    <program language="java"><input>
        (char)('a' + (ch -'a'+ 3) % 26)
    </input></program>
    <p>which breaks down as follows:
        <program language="java"><input>
        ch -'a'                          // Convert to 0 to 25
        (ch -'a'+ 3)                     // Add shift
        (ch -'a'+ 3) % 26                // Divide % 26
        ('a' + (ch -'a'+ 3) % 26)        // Add 'a'
        (char)('a' + (ch -'a'+ 3) % 26)  // Cast back into a letter
    </input></program>
    </p>
    <p>
      To summarize,
      we can shift any character by 3 if we map it into the range 0 to 25, then add 3 to it mod 26,
      then map that result back into  the<nbsp/>range
      'a' to 'z'.
    </p>
<!--
      Thus, shifting <em>y</em> would go as follows:
    </p>

 <program language="java"><input>
(char)('a' + (ch -'a'+ 3) % 26)   //  Perform Caesar shift
(char)('a' + ('y' - 'a' +3) % 26) //   on 'y'
(char)(97 + (121 - 97 + 3) % 26)      //  Map 'y' to 0..25
(char)(97 + (27 % 26))     //  Shift by 3, wrapping around
(char)(97 + 1)            //  Map result back to 'a' to 'z'
(char)(98)                //  Convert from int to char 'b'
 </input></program>
 -->
    <p>
      The algorithm for the reverse shift in the <c>decode()</c>  method is similar.
      Accept in this case the reverse Caesar shift is done by shifting by 23, 
      which is <m>26-3</m>. If the original shift is 3, we can reverse that by shifting 
      an additional 23.  Together this gives a shift of 26,
      which will give us back our original letter.
    </p>

<p>See this code in action below.</p>

<activity label="caesar">
  <statement>
  <p>Run the code below. Change the text in main to another 
    lowercase string and try again.
    This code will only work with lowercase letters.
  </p>
  </statement>
  <program language="java" interactive="activecode"><input>
    import java.util.*;

    public class TestCipher {
    
      public static void main(String[] args) {
        Caesar caesar = new Caesar(); 
        String text = "hello world";
        String encryptTxt = caesar.encrypt(text);
        System.out.println(text + " encrypted is " + encryptTxt);
      }    
    }

    public abstract class Cipher {
  
      public String encrypt(String s) {
        StringBuffer result = new StringBuffer("");         // Use a StringBuffer
        StringTokenizer words = new StringTokenizer(s);     // Break s into words
        while (words.hasMoreTokens()) {                     // For each word in s
          result.append(encode(words.nextToken()) + " ");   //  Encode it
        }
        return result.toString();                            // Return the result
      } // encrypt()
  
      public String decrypt(String s) {
        StringBuffer result = new StringBuffer("");        // Use a StringBuffer
        StringTokenizer words = new StringTokenizer(s);    // Break s into words
        while (words.hasMoreTokens()) {                    // For each word in s
          result.append(decode(words.nextToken()) + " ");  //  Decode it
        }
        return result.toString();                       // Return the decryption
      } // decrypt()
  
      public abstract String encode(String word);            // Abstract methods
      public abstract String decode(String word);
      
      public static void main(String[] args) {
         Caesar caesar = new Caesar(); 
         String text = "hello world";
         String encryptTxt = caesar.encrypt(text);
         System.out.println(text + " encrypted is " + encryptTxt);
      }
    } // Cipher

    class Caesar extends Cipher {
      
      public String encode(String word) {
        StringBuffer result = new StringBuffer(); // Initialize a string buffer
        for (int k = 0; k &lt; word.length(); k++) { // For each character in word
          char ch = word.charAt(k);               //  Get the character
          ch = (char)('a' + (ch -'a'+ 3) % 26);   //  Perform caesar shift
          result.append(ch);                   //  Append it to new string
        }
        return result.toString();              // Return the result as a string
      } // encode()
      
      public String decode(String word) {
        StringBuffer result = new StringBuffer(); // Initialize a string buffer
        for (int k = 0; k &lt; word.length(); k++) { // For each character in word
        char ch = word.charAt(k);                 //  Get the character
           ch = (char)('a' + (ch - 'a' + 23) % 26); //  Perform reverse shift
           result.append(ch);                     //  Append it to new string
        }
        return result.toString();            // Return the result as a string
      } // decode()
    } // Caesar
  </input></program>
</activity>

  </subsection>
  <subsection>
    <title>Class Design: <c>Transpose</c></title>
    <p>
      The <c>Transpose</c> class (<xref ref="fig-transpose"></xref>) is structured 
      the same as the <c>Caesar</c> class.
      It implements both the
      <c>encode()</c> and <c>decode()</c> methods.
      The key element here is the transpose operation,
      which in this case is a simple reversal of the letters in the word.
      Thus,
      <q>hello</q>
      becomes
      <q>olleh</q>. This is very easy to do when using the <c>StringBuffer.reverse()</c> method.
    </p>
    <p>
      The <c>decode()</c> method is even simpler,
      because all you need to do in this case is call <c>encode()</c>. Reversing the 
      reverse of a string gives you back the original string.
    </p>

<listing xml:id="fig-transpose">
  <caption>The <c>Transpose</c> class</caption>
 <program language="java"><input>
public class Transpose extends Cipher {

  // encode() reverses and returns a word
  public String encode(String word) {
    StringBuffer result = new StringBuffer(word);
    return result.reverse().toString();
  } // encode()

  public String decode(String word) {
    return encode(word);         // Just call encode
  } // decode
} // Transpose
 </input></program>
</listing>
  </subsection>
  <subsection>
    <title>Testing and Debugging</title>
    <p>
      <xref ref="fig-testcipher">Listing</xref>
      provides a simple test program for testing
<c>Cipher</c> and its subclasses.
    </p>
    <listing xml:id="fig-testcipher">
      <caption>The <c>TestEncrypt</c> class<idx><h>TestEncrypt class</h></idx>.</caption>
      
 <program language="java"><input>
public class TestEncrypt {
  public static void main(String argv[]) {
    Caesar caesar = new Caesar();
    String plain = "this is the secret message";   // Here's the message
    String secret = caesar.encrypt(plain);         // Encrypt the message
    System.out.println(" ********* Caesar Cipher Encryption *********");
    System.out.println("PlainText: " + plain);    // Display the results
    System.out.println("Encrypted: " + secret);
    System.out.println("Decrypted: " + caesar.decrypt(secret));// Decrypt
    Transpose transpose = new Transpose();
    secret = transpose.encrypt(plain);
    System.out.println("\n ********* Transpose Cipher Encryption *********");
    System.out.println("PlainText: " + plain);    // Display the results
    System.out.println("Encrypted: " + secret);
    System.out.println("Decrypted: " + transpose.decrypt(secret));// Decrypt
  } // main()
} // end TestEncrypt
 </input></program>
</listing>
    <p>
      It creates a <c>Caesar</c> cipher and   a <c>Transpose</c> cipher and 
      then encrypts and decrypts the same sentence using each cipher.
      If you run this program, it will produce the following output:
    </p>
 <program language="java"><input>
    ********* Caesar Cipher Encryption *********
    PlainText: this is the secret message
    Encrypted: wklv lv wkh vhfuhw phvvdjh
    Decrypted: this is the secret message
    ********* Transpose Cipher Encryption *********
    PlainText: this is the secret message
    Encrypted: siht si eht terces egassem
    Decrypted: this is the secret message
 </input></program>

 <p>See this code in action below.</p>

<activity label="test-encrypt">
  <statement><p>Run the code below. Change the plain variable in main to another 
  lowercase string and try again.
    This code will only work with lowercase letters.</p>
  </statement>
  <program language="java" interactive="activecode"><input>
    import java.util.*;
    
    public class TestEncrypt {
      public static void main(String argv[]) {
        Caesar caesar = new Caesar();
        String plain = "this is the secret message";   // Here's the message
        String secret = caesar.encrypt(plain);         // Encrypt the message
        System.out.println(" ********* Caesar Cipher Encryption *********");
        System.out.println("PlainText: " + plain);    // Display the results
        System.out.println("Encrypted: " + secret);
        System.out.println("Decrypted: " + caesar.decrypt(secret));// Decrypt
        Transpose transpose = new Transpose();
        secret = transpose.encrypt(plain);
        System.out.println("\n ********* Transpose Cipher Encryption *********");
        System.out.println("PlainText: " + plain);    // Display the results
        System.out.println("Encrypted: " + secret);
        System.out.println("Decrypted: " + transpose.decrypt(secret));// Decrypt
      } // main()
    } // end TestEncrypt

    abstract class Cipher {
      public String encrypt(String s) {
        StringBuffer result = new StringBuffer("");         // Use a StringBuffer
        StringTokenizer words = new StringTokenizer(s);     // Break s into its words
        while (words.hasMoreTokens()) {                     // For each word in s
          result.append(encode(words.nextToken()) + " ");   //  Encode it
        }
        return result.toString();                            // Return the result
      } // encrypt()
      public String decrypt(String s) {
        StringBuffer result = new StringBuffer("");        // Use a StringBuffer
        StringTokenizer words = new StringTokenizer(s);    // Break s into words
        while (words.hasMoreTokens()) {                    // For each word in s
          result.append(decode(words.nextToken()) + " ");  //  Decode it
        }
        return result.toString();                       // Return the decryption
      } // decrypt()
      public abstract String encode(String word);            // Abstract methods
      public abstract String decode(String word);    
    } // Cipher

    class Caesar extends Cipher {
      public String encode(String word) {
        StringBuffer result = new StringBuffer(); // Initialize a string buffer
        for (int k = 0; k &lt; word.length(); k++) { // For each character in word
          char ch = word.charAt(k);               //  Get the character
          ch = (char)('a' + (ch -'a'+ 3) % 26);   //  Perform caesar shift
          result.append(ch);                   //  Append it to new string
        }
        return result.toString();              // Return the result as a string
      } // encode()
      public String decode(String word) {
        StringBuffer result = new StringBuffer(); // Initialize a string buffer
        for (int k = 0; k &lt; word.length(); k++) { // For each character in word
        char ch = word.charAt(k);                 //  Get the character
           ch = (char)('a' + (ch - 'a' + 23) % 26); //  Perform reverse shift
           result.append(ch);                     //  Append it to new string
        }
        return result.toString();            // Return the result as a string
      } // decode()
    } // Caesar

    class Transpose extends Cipher {
      // encode() reverses and returns a word
      public String encode(String word) {
        StringBuffer result = new StringBuffer(word);
        return result.reverse().toString();
      } // encode()
      public String decode(String word) {
        return encode(word);         // Just call encode
      } // decode
    } // Transpose
     </input></program>
</activity>
    
    <exercises xml:id="self-study-exercises-crypto">
    <title>Self-Study Exercises</title>

          <exercise label="caesar-shift-exercise">
          <title>Caesar Shift</title>
            <statement>
            <p>Modify the <c>Caesar</c> class so that it will allow various 
              sized shifts to be used, instead of just a shift of size 3.
              (<em>Hint</em>: Use an instance variable in the Caesar class to represent 
              the shift, add a constructor to set it, and change the encode method to use it.)
            </p>
            </statement>
            <program language="java" interactive="activecode"><input>
              import java.util.*;

              public class TestCipher {
                public static void main(String[] args)  {
                  int shift = 7; 
                  Caesar caesar = new Caesar(); 
                  String text = "hello world";
                  String encryptTxt = caesar.encrypt(text);
                  System.out.println(text + " encrypted with shift " + shift + " is " + encryptTxt);
                }
              }

              abstract class Cipher {
                public String encrypt(String s) {
                  StringBuffer result = new StringBuffer("");         // Use a StringBuffer
                  StringTokenizer words = new StringTokenizer(s);     // Break s into its words
                  while (words.hasMoreTokens()) {                     // For each word in s
                    result.append(encode(words.nextToken()) + " ");   //  Encode it
                  }
                  return result.toString();                            // Return the result
                } // encrypt()
                public String decrypt(String s) {
                  StringBuffer result = new StringBuffer("");        // Use a StringBuffer
                  StringTokenizer words = new StringTokenizer(s);    // Break s into words
                  while (words.hasMoreTokens()) {                    // For each word in s
                    result.append(decode(words.nextToken()) + " ");  //  Decode it
                  }
                  return result.toString();                       // Return the decryption
                } // decrypt()
                public abstract String encode(String word);            // Abstract methods
                public abstract String decode(String word);
                
                public static void main(String[] args)
                {
                   int shift = 5; 
                   Caesar caesar = new Caesar(shift); 
                   String text = "hello world";
                   String encryptTxt = caesar.encrypt(text);
                   System.out.println(text + " encrypted with shift " + shift + " is " + encryptTxt);
                }  
              } // Cipher
          
              class Caesar extends Cipher {
                public String encode(String word) {
                  StringBuffer result = new StringBuffer(); // Initialize a string buffer
                  for (int k = 0; k &lt; word.length(); k++) { // For each character in word
                    char ch = word.charAt(k);               //  Get the character
                    ch = (char)('a' + (ch -'a'+ 3) % 26);   //  Perform caesar shift
                    result.append(ch);                   //  Append it to new string
                  }
                  return result.toString();              // Return the result as a string
                } // encode()
                public String decode(String word) {
                  StringBuffer result = new StringBuffer(); // Initialize a string buffer
                  for (int k = 0; k &lt; word.length(); k++) { // For each character in word
                  char ch = word.charAt(k);                 //  Get the character
                     ch = (char)('a' + (ch - 'a' + 23) % 26); //  Perform reverse shift
                     result.append(ch);                     //  Append it to new string
                  }
                  return result.toString();            // Return the result as a string
                } // decode()
              } // Caesar
               </input></program>
               <solution>
    <program language="java"><input>
    import java.util.*;
    public class TestCipher {
       public static void main(String[] args)  {
         int shift = 7; 
         Caesar caesar = new Caesar(shift); 
         String text = "hello world";
         String encryptTxt = caesar.encrypt(text);
         String decryptTxt =  caesar.decrypt(encryptTxt);
         System.out.println(text + " encrypted with shift " + shift + " is " + encryptTxt);
         System.out.println(encryptTxt + " decrypted with shift " + shift + " is " + decryptTxt);
       }
    }
    
    abstract class Cipher {
      public String encrypt(String s) {
        StringBuffer result = new StringBuffer("");         // Use a StringBuffer
        StringTokenizer words = new StringTokenizer(s);     // Break s into its words
        while (words.hasMoreTokens()) {                     // For each word in s
          result.append(encode(words.nextToken()) + " ");   //  Encode it
        }
        return result.toString();                            // Return the result
      } // encrypt()

      public String decrypt(String s) {
        StringBuffer result = new StringBuffer("");        // Use a StringBuffer
        StringTokenizer words = new StringTokenizer(s);    // Break s into words
        while (words.hasMoreTokens()) {                    // For each word in s
          result.append(decode(words.nextToken()) + " ");  //  Decode it
        }
        return result.toString();                       // Return the decryption
      } // decrypt()

      public abstract String encode(String word);            // Abstract methods
      public abstract String decode(String word);    
    } // Cipher

    class Caesar extends Cipher {
      private int shift = 3;
      public Caesar(int shft) {
         shift = shft;
      }
      public String encode(String word) {
        StringBuffer result = new StringBuffer(); // Initialize a string buffer
        for (int k = 0; k &lt; word.length(); k++) { // For each character in word
          char ch = word.charAt(k);               //  Get the character
          ch = (char)('a' + (ch -'a'+ shift) % 26);   //  Perform caesar shift
          result.append(ch);                   //  Append it to new string
        }
        return result.toString();              // Return the result as a string
      } // encode()

      public String decode(String word) {
        StringBuffer result = new StringBuffer(); // Initialize a string buffer
        for (int k = 0; k &lt; word.length(); k++) { // For each character in word
        char ch = word.charAt(k);                 //  Get the character
           ch = (char)('a' + (ch - 'a' + (26 - shift)) % 26); //  Perform reverse shift
           result.append(ch);                     
           //  Append it to new string
        }
        return result.toString();            // Return the result as a string
      } // decode()
    } // Caesar
    </input></program>
    </solution>
   </exercise>
        

  

          <exercise label="transpose-shift-exercise">
            <title>Transpose Rotate</title>
            <statement><p> Modify <c>Transpose.encode()</c> so that it uses a 
              rotation instead of a reversal.
              That is, a word like
              <q>hello</q>
              should be encoded as
              <q>ohell</q>
              with a rotation of one character. 
              (Hint: use a loop to append the letters into a new string)
            </p>   
            </statement>
            <program language="java" interactive="activecode"><input>
              import java.util.*;
              
              public class TestTranspose {
                public static void main(String[] args) {
                  String plain = "this is the secret message";   // Here's the message
        
                  Transpose transpose = new Transpose();
                  String secret = transpose.encrypt(plain);
                  System.out.println("\n ********* Transpose Cipher Encryption *********");
                  System.out.println("PlainText: " + plain);    // Display the results
                  System.out.println("Encrypted: " + secret);
                  System.out.println("Decrypted: " + transpose.decrypt(secret));// Decrypt
                }
              }
              
              abstract class Cipher {
                public String encrypt(String s) {
                  StringBuffer result = new StringBuffer("");         // Use a StringBuffer
                  StringTokenizer words = new StringTokenizer(s);     // Break s into its words
                  while (words.hasMoreTokens()) {                     // For each word in s
                    result.append(encode(words.nextToken()) + " ");   //  Encode it
                  }
                  return result.toString();                            // Return the result
                } // encrypt()
              
                public String decrypt(String s) {
                  StringBuffer result = new StringBuffer("");        // Use a StringBuffer
                  StringTokenizer words = new StringTokenizer(s);    // Break s into words
                  while (words.hasMoreTokens()) {                    // For each word in s
                    result.append(decode(words.nextToken()) + " ");  //  Decode it
                  }
                  return result.toString();                       // Return the decryption
                } // decrypt()
              
                public abstract String encode(String word);            // Abstract methods
                public abstract String decode(String word);              
              } // Cipher
          
              class Transpose extends Cipher {
                // encode() reverses and returns a word
                // Modify this to use rotation instead of reverse
                public String encode(String word) {
                  StringBuffer result = new StringBuffer(word);
                
                  return result.reverse().toString();
                } // encode()
                public String decode(String word) {
                  return encode(word);         // Just call encode
                } // decode
              } // Transpose
               </input></program>
  <solution>
  <program language="java" interactive="activecode"><input>
// Modification to encode():
public String encode(String word) {
    StringBuffer result = new StringBuffer();
    for (int k=0; k &lt; word.length(); k++)
        result.append(word.charAt((k+2) % word.length()));
    return result.toString();
}

 </input></program>
  </solution>
          </exercise>
    </exercises>
  </subsection>

</section>