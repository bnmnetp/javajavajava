<section xml:id="java-event-model">
  <title>The Java Event Model</title>
  <introduction>
    <p>
      As we saw in Chapter 4, whatever happens while the computer is running is classified as an event.
      Every keystroke and mouse click,
      every time a disk is inserted into a disk drive, an event is generated.
      The handling of events are an important element of GUI programming.
      Therefore, before we begin discussing how to design GUIs, it will be useful to 
      review the main concepts of Java's <term>event model</term>.
          <idx><h>event model</h></idx>
    </p>
    <p>
      When a Java program is running,
      events generated by the hardware are passed up through the operating system
      (and through the browser, for applets)
      to the program.
      Those events that belong to the program must be handled by the program
      (refer to <xref ref="fig-eventmodel">Figure</xref> in Chapter<nbsp/>4).
      For example, if you click your browser's menu bar,
      that event will be handled by the browser itself.
      If you click a button contained in the Java program,
      that event should be handled by the program.
    </p>
    <p>
      In Java, whenever something happens within a GUI component,
      an event object is generated and passed to the <em>event listener</em>
      that has been registered to handle that component's events.
      You've seen numerous examples of this process in earlier chapters,
      but we've included a simple example to serve as a reminder.
    </p>
    <p>
      Suppose you create a <c>JButton</c> in a GUI as follows:
    </p>
 <program language="java"><input>
private JButton clickme = new JButton("ClickMe");
 </input></program>
    <p>
      Whenever the user clicks the <c>JButton</c>, an <c>ActionEvent</c> is generated.
      In order to handle these events,
      the GUI must register the <c>JButton</c> with a listener object that listens for action events.
      This can be done in an applet's <c>init()</c> method or in an application's constructor method,
      as in this example:
    </p>
 <program language="java"><input>
public MyGUI() {
  // Add clickme to the GUI and assign it a listener
  add(clickme);
  clickme.addActionListener(this); 
}
 </input></program>
    <p>
      In this case,
      we have designated the GUI itself (<c>this</c>) as an <c>ActionListener</c> for 
      <c>clickme</c> <xref ref="fig-listener">Figure</xref>.
      <figure xml:id="fig-listener"><caption>ActionListener</caption>
      <image width="50%" source="chptr13/p478f1.png"/> 
    </figure>
      
      A <term>listener</term>
          <idx><h>listener</h></idx>
      is any object that implements a
      <em>listener interface</em>,
      which is one of the interfaces derived from <c>java.util.EventListener</c>. 
      An <c>ActionListener</c> is an object that listens for and receives
  an     <c>ActionEvent</c>.
    </p>
    <p>
      In order to complete the event-handling code,
      the GUI must implement the <c>ActionListener</c> interface.
      As <xref ref="listing-clickme">Listing</xref> shows,
      implementing an interface is a matter of declaring the interface in the class heading and implementing the methods contained in the interface,
      in this case the <c>actionPerformed()</c> method.
    </p>
    <listing xml:id="listing-clickme">
      <caption>A simple GUI application that handles action events
      on a <c>JButton</c>.</caption>
 <program language="java"><input>
import javax.swing.*;
import java.awt.event.*;
public class MyGUI extends JFrame
                              implements ActionListener {
    private JButton clickme = new JButton("ClickMe");
    public MyGUI() {
     // Add clickme to the GUI and assign it a listener
        getContentPane().add(clickme);
        clickme.addActionListener(this);
        setSize(200,200);
        setVisible(true);
    } // init()
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == clickme) {
           clickme.setText(clickme.getText()+"*");
        }
    } // actionPerformed()
    public static void main(String args[]) {
        MyGUI gui = new MyGUI();
    }
  } // MyGUI
 </input></program>
    </listing>

   
    
    <p>
      Now that we have implemented the code in <xref ref="listing-clickme">Listing</xref>,
      whenever the user clicks <c>clickme</c>, that action is encapsulated within an <c>ActionEvent</c> object and passed to the <c>actionPerformed()</c> method.
      This method contains Java code that will handle the user's action in an appropriate way.
      For this example,
      it modifies the button's label by appending an asterisk to it each time it is clicked.
      <xref ref="fig-p479f1">Figure</xref>
      depicts the sequence of actions and events that occur when the the user clicks a button.
    </p>
    <figure xml:id="fig-p479f1">
      <caption>A UML depiction of the sequence of actions
      and events that take place when a button is clicked. The vertical
      lines represent time lines, with time running from top to bottom. The
      arrows between lines represent messages passing between objects.</caption>
      <image width="100%" source="chptr13/p479f1.png"/>
    </figure>
    <p>
      The methods used to handle the <c>ActionEvent</c> are derived from the 
      <c>java.util.EventObject</c> class,   the root class for all events (<xref ref="fig-event-obj">Figure</xref>). 
      The <c>getSource()</c> method is used to get the object that caused the event. </p>

        <figure xml:id="fig-event-obj"><caption>An <c>EventObject</c></caption>
          <image width="50%" source="chptr13/p479f2.png"/> 
          </figure>
          
      <p>      Our example 
      (<xref ref="listing-clickme"></xref>) uses the <c>getSource()</c> method to get a reference to the object that generated the event.
      To see what information is contained in an event object,
      we can use the <c>toString()</c> method to print a string representation of the event that was generated.
      Here's what it displays:
    </p>
 <program language="java"><input>
java.awt.event.ActionEvent[ACTION_PERFORMED,cmd=ClickMe]
  on javax.swing.JButton[,58,5,83x27,
  layout=javax.swing.OverlayLayout]
 </input></program>
    <p>
      As you can see,
      the event generated was an <c>ACTION_PERFORMED</c> event,
      in response to the <c>ClickMe</c> command.
      The source of the event was the <c>JButton</c>.
    </p>
  </introduction>
  <subsection>
    <title>Event Classes</title>
    <p>
      Although the event model is the same for both AWT and Swing classes,
      the Swing package introduces many additional events.
      Table<nbsp/>13.1 lists the events that are generated by both AWT and Swing components.
      You already have worked with some of these.
      We have written GUIs that handled <c>ActionEvents</c>  for <c>JButtons</c> and
<c>JTextFields</c> in preceding chapters.
    </p>
    <table xml:id="tableAWTEvent">
      <title>Java's <c>AWTEvent</c> for each <c>Component</c> type
      (Original source: David Flanagan,
      <em>Java in a Nutshell</em>, 2d ed., O'Reilly Associates, 1997. 
      Modified for Swing components.)</title>
      
      <tabular>
        <row bottom="minor">
          <cell>Components</cell>
          <cell>Events</cell>
          <cell>Description</cell>
        </row>
     
        <row>
          <cell><c>Button, JButton</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User clicked button</cell></row>
          <row><cell>
<c>CheckBox, JCheckBox</c></cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User toggled a checkbox</cell></row><row><cell>
<c>CheckboxMenuItem, JCheckboxMenuItem</c></cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User toggled a checkbox</cell></row><row><cell>
<c>Choice, JPopupMenu</c></cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User selected a choice</cell></row><row><cell>
<c>Component, JComponent</c></cell>
          <cell><c>ComponentEvent</c></cell>
          <cell>Component was moved or resized</cell></row><row><cell></cell>
          <cell><c>FocusEvent</c></cell>
          <cell>Component acquired or lost focus</cell></row><row><cell></cell>
          <cell><c>KeyEvent</c></cell>
          <cell>User typed a key</cell></row><row><cell></cell>
          <cell><c>MouseEvent</c></cell>
          <cell>User manipulated the mouse</cell></row><row><cell>
<c>Container, JContainer</c></cell>
          <cell><c>ContainerEvent</c></cell>
          <cell>Component added/removed from container</cell></row><row><cell>
<c>List, JList</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User double-clicked a list item</cell></row><row><cell></cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User clicked a list item</cell></row><row><cell>
<c>Menu, JMenu</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User selected menu item</cell></row><row><cell>
<c>Scrollbar, JScrollbar</c></cell>
          <cell><c>AdjustmentEvent</c></cell>
          <cell>User moved scrollbar</cell></row><row><cell>
<c>TextComponent, JTextComponent</c></cell>
          <cell><c>TextEvent</c></cell>
          <cell>User edited text</cell></row><row><cell>
<c>TextField, JTextField</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User typed Enter key</cell></row><row><cell>
<c>Window, JWindow</c></cell>
          <cell><c>WindowEvent</c></cell>
          <cell>User manipulated window</cell>
        </row>
      
      </tabular>

    </table>
    <p>
      In viewing  <xref ref="tableAWTEvent">Table</xref>, 
      it's important to remember that the classes listed there are arranged in a hierarchy.
      This will affect the events that a particular object can generate.
      For example,
      a
<c>JButton</c> is a <c>JComponent</c>(
      <xref ref="fig-swing2-guis"></xref>),
      so in addition to generating an <c>ActionEvent</c>  when the user clicks on it,
      it can also generate a <c>MouseEvent</c>  when the user moves the mouse over it.
      Similarly, because a <c>JTextField</c> is also a <c>JComponent</c>, 
      it can generate a <c>KeyEvent</c>  as well as an <c>ActionEvent</c>.
    </p>
    <p>
      Note that the more generic events,
      such as those that involve moving, focusing,
      or resizing a component, are associated with the more generic components.
      For example,
      the <c>JComponent</c> class contains methods that are used to manage <c>ComponentEvent</c> s.
      Because they are subclasses of <c>JComponent</c>, 
      <c>JButton</c>  and <c>JTextField</c>  can also use these methods.
      Defining the more generic methods in the <c>JComponent</c> superclass is another example of the effective use of inheritance.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Inheritance</title>
      <p>
        The higher a method is defined in the inheritance hierarchy,
        the broader is its use.
      </p>
    </principle>
    <p>
      <xref ref="tableSwing">Table</xref> lists events that are new with the 
      Swing classes.
      Some of the events apply to new components.
      For example,
<c>JTable</c> and <c>JTree</c> do not have AWT counterparts.
      Other events provide Swing components with capabilities that are not available in their AWT counterparts.
      For example,
      a <c>CaretEvent</c> allows the programmer to have control over mouse clicks that occur within a text component.
    </p>
    <table xml:id="tableSwing">
      <title>Some of the events that are defined in the Swing library.</title>
      
      <tabular>
       
        <row bottom="minor">
          <cell>Component</cell>
          <cell>Events</cell>
          <cell>Description</cell>
        </row>
        
        <row>
          <cell><c>JPopupMenu</c></cell>
          <cell><c>PopupMenuEvent</c></cell>
          <cell>User selected a choice</cell></row><row><cell>
<c>JComponent</c></cell>
          <cell><c>AncestorEvent</c></cell>
          <cell>An event occurred in an ancestor</cell></row><row><cell>
<c>JList</c></cell>
          <cell><c>ListSelectionEvent</c></cell>
          <cell>User double-clicked a list item</cell></row><row><cell></cell>
          <cell><c>ListDataEvent</c></cell>
          <cell>List's contents were changed</cell></row><row><cell>
<c>JMenu</c></cell>
          <cell><c>MenuEvent</c></cell>
          <cell>User selected menu item</cell></row><row><cell>
<c>JTextComponent</c></cell>
          <cell><c>CaretEvent</c></cell>
          <cell>Mouse clicked in text</cell></row><row><cell></cell>
          <cell><c>UndoableEditEvent</c></cell>
          <cell>An undoable edit has occurred</cell></row><row><cell>
<c>JTable</c></cell>
          <cell><c>TableModelEvent</c></cell>
          <cell>Items added/removed from table</cell></row><row><cell></cell>
          <cell><c>TableColumnModelEvent</c></cell>
          <cell>A table column was moved</cell></row><row><cell>
<c>JTree</c></cell>
          <cell><c>TreeModelEvent</c></cell>
          <cell>Items added/removed from tree</cell></row><row><cell></cell>
          <cell><c>TreeSelectionEvent</c></cell>
          <cell>User selected a tree node</cell></row><row><cell></cell>
          <cell><c>TreeExpansionEvent</c></cell>
          <cell>User expanded or collapsed a tree node</cell></row><row><cell>
<c>JWindow</c></cell>
          <cell><c>WindowEvent</c></cell>
          <cell>User manipulated window</cell>
        </row>
    
      </tabular>
    
    </table>
    <p>
      These tables provide only a brief summary of these classes and Swing components.
      For further details you should consult the JDK online documentation at
      <url href="https://docs.oracle.com/javase/7/docs/api/javax/swing/package-summary.html" visual="">https://docs.oracle.com/javase/7/docs/api/javax/swing/package-summary.html</url>.
    </p>
    
  
    </subsection>
    <exercises><title>Self-Study Exercises</title>
      
          <exercise label="multiple-choice-multiple-answers">
            <title>Listeners 1</title>
            
            <statement>
                <p>  Is it possible to register a component with more than one listener?
       </p>         </statement>
            <choices>
                <choice correct="yes">
                    <statement>
                        <p>Yes</p>
                    </statement>
                    <feedback>
                        <p>    A component can indeed be registered with more than one listener.
                        </p>
                    </feedback>
                    </choice>
                    <choice correct="no">
                      <statement>
                          <p>No</p>
                      </statement>
                      <feedback>
                          <p>    A component can be registered with more than one listener.
                          </p>
                      </feedback>
                      </choice>
</choices>
<solution>
  <p>
    A component can indeed be registered with more than one listener.
    For example,
    the <c>ToggleButton</c> 
    that we defined in <xref ref="chapter-io">Chapter</xref> has two listeners.
    The first is the button itself,
    which takes care of toggling the button's label.
    The second is the frame in which the button is used,
    which takes care of handling whatever action the button is associated with.
  </p>
</solution>
</exercise>

<exercise label="multiple-choice-multiple-answers">
  <title>Listeners 2</title>
  
  <statement>
      <p> Is it possible for a component to have two different kinds of listeners?

</p>         </statement>
  <choices>
      <choice correct="yes">
          <statement>
              <p>Yes</p>
          </statement>
          <feedback>
              <p> For example, <c>ActionEvent</c> and <c>MouseEvent</c>.   </p>
          </feedback>
          </choice>
          <choice correct="no">
            <statement>
                <p>No</p>
            </statement>
            <feedback>
                <p>    What about listening both to a click and a mouse event?
                </p>
            </feedback>
            </choice>
</choices>
<solution>
<p>
    Some components can have two different kinds of listeners.
    For example, imagine a
    <q>sticky button</q>
    that works like this.
    When you click and release the button,
    it causes some action to take place,
    just like a normal button.
    When you click and hold the mouse button down, the button
    <q>sticks</q>
    to the cursor and you can then move it to a new location.
    This button would need listeners for
<c>ActionEvent</c>, <c>MouseEvent</c>, and <c>MouseMotionEvent</c>.
  </p>
</solution>
</exercise>  
          
    </exercises>
</section>