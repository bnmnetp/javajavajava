<section xml:id="the-slide-show-program">
  <title>The Slide Show Program</title>
  <subsection>
    <title>Problem Specification</title>
    <p>
      Let's suppose our slide show will repeatedly display a set of images named
      <q>slide0.gif,</q>
      <q>slide1.gif,</q>
      and
      <q>slide2.gif.</q>
      Suppose these images are stored on a Web site on <c>www.cs.trincoll.edu</c> and are stored in a directory named <c>/<c>&#126;</c> ram/jjj/slideshow</c>.
      This means our program will have to load the following three URLs:
    </p>
    <p>
      
    </p>
 <program language="java"><input>
http://www.cs.trincoll.edu/&#126;ram/jjj/slideshow/slide0.gif
http://www.cs.trincoll.edu/&#126;ram/jjj/slideshow/slide1.gif
http://www.cs.trincoll.edu/&#126;ramjjj/slideshow/slide2.gif
 </input></program>
    <p>
      We want our show to cycle endlessly through these images,
      leaving about 5 seconds between each slide.
    </p>
  </subsection>
  <subsection xml:id="fig-p830f1">
    <title>User Interface Design</title>
    <p>
      The user interface for this program is graphical,
      but it doesn't contain any GUI components.
      It just needs to display an image every 5 seconds.
      It can use a simple <c>paint()</c> method to display an image each time it is repainted:
    </p>
 <program language="java"><input>
public void paint(Graphics g) {
    if (currentImage != null)
        g.drawImage(currentImage, 10, 10, this);}
 </input></program>
    <p>
      The assumption here is that the <c>currentImage</c> instance variable will be set initially to <c>null</c>. Each time an image is downloaded,
      it will be set to refer to that image.
      Because
<c>paint()</c> is called before the program starts downloading the images,
      it <image width="73%" source="chptr15/p830f1.png"/> is necessary to guard against attempting to draw a <c>null</c> image,
      which would lead to an exception.
    </p>
  </subsection>
  <subsection>
    <title>Problem Decomposition</title>
    <p>
      One problem we face with this program is getting it to pause between \marginfigvspace{15pt}{chptr15/p830f2.eps}{The <c>Timer</c> class delays the frame thread between each slide.}{fig-p830f2} each slide.
      One way to do this is to set up a loop that does nothing for about 5 seconds:
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; 1000000; k++ ) ;// Busy waiting
 </input></program>
    <p>
      However, this isn't a very good solution.
      As we saw in Chapter<nbsp/>14,
      this is a form of <em>busy waiting</em>
          <idx><h>busy waiting</h></idx>
      that monopolizes the CPU, making it very difficult to break out of the loop.
      Another problem with this loop is that we don't really know how many iterations to do to approximate 5 seconds of idleness.
    </p>
    <p>
      A much better design would be to use a separate timer thread,
      which can <c>sleep()</c> for 5 seconds between each slide.
      So our program will have two classes:
      one to download and display the slides and one to serve as a timer (Figs.<nbsp/>15.10 and 15.11). ( Java Swing has a Timer class that works a little bit differently,
      see the javadoc for a description.)
      <ul>
        SlideShowFrame<mdash/>This <c>JFrame</c> subclass will take care of downloading and displaying the images and starting the timer thread.  Timer<mdash/>This class will implement the
<c>Runnable</c> interface so that it can run as a separate thread.  It will repeatedly sleep for 5 seconds and then tell the frame to display the next side.
      </ul>
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Busy Waiting</title>
      <p>
        Instead of busy waiting,
        a thread that sleeps for a brief period on each iteration is a better way to introduce a delay into an algorithm.
      </p>
    </principle>
  </subsection>
  <subsection xml:id="fig-p832f1">
    <title>The <c>SlideShowFrame</c> class</title>
    <p>
      What should we do with the images we download?
      Should we repeatedly download and display them,
      or should we just download them once and store them in memory?
      The second of these alternatives seems more efficient.
      If an image has already been downloaded,
      it would be wasteful to download it again.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Network Traffic</title>
      <p>
        In general, a design that minimizes network traffic is preferable.
      </p>
    </principle>
    <p>
      So we'll need an array to store the images.
      Our slide show will then  consist of retrieving the next image from the array and displaying it.
      To help us with this task,
      let's use a <c>nextImg</c> variable as an array index to keep track of the next image.
      Even though it isn't absolutely necessary,
      we could use a third variable here,
<c>currentImage</c>, to keep track of the current image being displayed.
      Thus, our frame needs the following instance variables:
    </p>
 <program language="java"><input>
private static final int NIMGS = 3;
private Image[] slide = new Image[NIMGS];
private Image currentImage = null;
private int nextImg = 0;
 </input></program>
    <p>
      Given these variables,
      let's now write a method to take care of  choosing the next slide.
      Recall that the <c>paint()</c> method is responsible for displaying <c>currentImage</c>, so all this method needs to do is to update both <c>currentImage</c> and <c>nextImg</c>. This method should be designed so that it can be called by the <c>Timer</c> thread whenever it is time to display the next slide,
      so it should be a <c>public</c> method.
      It can be a <c>void</c> method with no parameters,
      because the frame already contains all the necessary information to display the next slide.
      Thus, there's no need for information to be passed back and forth between <c>Timer</c> and this method:
    </p>
 <program language="java"><input>
public void nextSlide() {
    currentImage = slide[nextImg];
    nextImg = (nextImg + 1) % NIMGS;
    repaint();}// nextSlide()
 </input></program>
    <p>
      The method's algorithm is very simple.
      It sets
<c>currentImage</c> to whatever <c>slide</c> is designated by
<c>nextImg</c> and it then updates <c>nextImg</c>'s value.
      Note here the use of modular arithmetic to compute the value of <c>nextImg</c>. Given that <c>NIMGS</c> is 3, this algorithm will cause <c>nextImg</c> to take on the repeating sequence of values 0, 1, 2, 0, 1, 2, and so forth.
      Finally, the method calls <c>repaint()</c> to display the image.
    </p>
    <principle>
      <title>PROGRAMMING TIP:Modular Arithmetic</title>
      <p>
        Modular arithmetic (<c>x % N</c>) is useful for cycling repeatedly through the values <m>0, 1, \ldots, N-1</m>.
      </p>
    </principle>
    <p>
      The frame's constructor, <c>SlideShowFrame()</c> method will have two tasks:
      <ul>
        <li>
          <p>
            Download and store the images in <c>slide[]</c>.
          </p>
        </li>
        <li>
          <p>
            Start the <c>Timer</c> thread.
          </p>
        </li>
      </ul>
    </p>
    <p>
      As we discussed,
      downloading Web resources for an application requires the use of the <c>javax.imageio.ImageIO.read()</c> method.
      Here we just place these method calls in a loop:
    </p>
 <program language="java"><input>
for (int k=0; k &lt; NIMGS; k++)
    slide[k] = javax.imageio.ImageIO.read(getCodeBase(),
                 "gifs/demo" + k + ".gif");
 </input></program>
    <p>
      Note here how we convert the loop variable <em>k</em>
      into a <c>String</c> and concatenate it right into the URL specification.
      This allows us to have URLs containing
      <q>slide0.gif,</q>
      <q>slide1.gif,</q>
      and
      <q>slide2.gif.</q>
      This makes our program easily extensible should we later decide to add more slides to the show.
      Note also the use of the class constant <c>NIMGS</c> as the loop bound.
      This too adds to the program's extensibility.
    </p>
    <principle>
      <title>PROGRAMMING TIP:Concatenation</title>
      <p>
        Concatenating an integer value (<c>k</c>) with a string lets you create file names of the form <c>file1.gif</c>, <c>file2.gif</c>, and so on.
      </p>
    </principle>
    <p>
      The task of starting the <c>Timer</c> thread involves creating an instance of the <c>Timer</c> class and calling its <c>start()</c> method:
    </p>
 <program language="java"><input>
Thread timer = new Thread(new Timer(this));
timer.start();
 </input></program>
    <p>
      Note that <c>Timer</c> is passed a reference to
<c>this</c> frame.
      This enables <c>Timer</c> to call the frame's
<c>nextSlide()</c> method every 5 seconds.
      This programming technique is known as <em>callback</em>
      and the <c>nextSlide()</c> method is an example of a
      <term>callback method</term>
          <idx><h>callback method</h></idx>
      (Fig.<nbsp/>15.12).
    </p>
    <principle>
      <title>PROGRAMMING TIP:Callback</title>
      <p>
        Communication between two objects can often be handled using a callback technique.
        One object is passed a reference to the other object.
        The first object uses the reference to call one of the public methods of the other object.
      </p>
    </principle>
    <p>
      This completes our design and development of <c>SlideShowFrame</c>, which is shown in <xref ref="fig-slideframe">Figure</xref>.
      <image width="73%" source="chptr15/p832f1.png"/>
    </p>
    <figure xml:id="fig-slideframe">
      <caption>The <c>SlideShowFrame</c> class.</caption>
 <program language="java"><input>
import java.awt.*;
import javax.swing.*;
import javax.imageio.ImageIO;
import java.net.*;
public class SlideShowFrame extends JFrame  {
    public static final int WIDTH=300, HEIGHT=200;
    private static final int NIMGS = 3;
    private Image[] slide = new Image[NIMGS];
    private Image currentImage = null;
    private int nextImg = 0;
    public void paint(Graphics g) {
        g.setColor(getBackground());
        g.fillRect(0, 0, WIDTH, HEIGHT);
        if (currentImage != null)
            g.drawImage(currentImage, 10, 10, this);
    }//paint()
    public void nextSlide() {
        currentImage = slide[nextImg];
        nextImg = (nextImg + 1) % NIMGS;
        repaint();
    }// nextSlide()
    public SlideShowFrame() {
        for (int k=0; k &lt; NIMGS; k++)
            slide[k] = ImageIO.read(getCodeBase(),
                             "gifs/demo" + k + ".gif");
        Thread timer = new Thread(new Timer(this));
        timer.start();
        setSize( WIDTH, HEIGHT );
    }// constructor}// SlideShowFrame
 </input></program>
    </figure>
  </subsection>
  <subsection xml:id="self-study-exerciseP36">
    <title>The <c>Timer</c>Class</title>
    <p>
      The <c>Timer</c> class is a subclass of <c>Thread</c>, which means it must implement the <c>run()</c> method.
      Recall that we never directly  call a thread's <c>run()</c> method.
      Instead, we call its <c>start()</c> method,
      which automatically calls <c>run()</c>. This particular thread has a very simple and singular function.
      It should call the
<c>SlideShowFrame.nextSlide()</c> method and then sleep for 5 seconds.
      So its main algorithm will be:
    </p>
 <program language="java"><input>
while (true) {
    frame.nextSlide();
    sleep( 5000 );}
 </input></program>
    <p>
      However, recall that <c>Thread.sleep()</c> throws the
<c>InterruptedException</c>. This means that we'll have to embed this while loop in a <c>try/catch</c> block.
    </p>
    <p>
      To call the frame's <c>nextSlide()</c> method,
      we also need a reference to the <c>SlideShowFrame</c>, so we need to give it a reference,
      such as an instance variable,
      as well as a constructor that allows the frame to pass <c>Timer</c> a reference to itself.
    </p>
    <p>
      Given these design decisions,
      the complete implementation of
<c>Timer</c> is shown in <xref ref="fig-timerthread">Figure</xref>.
      To see how it works, download it from the
      <em>Java, Java, Java</em> Web site and run it.
    </p>
    <figure xml:id="fig-timerthread">
      <caption>The <c>Timer</c> class.</caption>
 <program language="java"><input>
public class Timer implements Runnable {
    private SlideShowFrame frame;
    public Timer( SlideShowFrame app ) {
        frame = app;
    }
    public void run() {
        try {
            while ( true ) {
                frame.nextSlide();
                Thread.sleep( 5000 );
            }
        } catch (InterruptedException e) {
            System.out.println(e.getMessage());
        }
    }// run()}// Timer
 </input></program>
    </figure>
    <subsection><title>Self-Study Exercise</title>
      <ol>
        <li>
          <p>
            Describe the design changes you would make to
<c>SlideShowFrame</c> if you wanted to play a soundtrack along with your slides.
            Assume that the sounds are stored in a sequence of files,
            <q>sound0.au,</q>
            sound1.au,'' and so forth, on your Web site.
          </p>
        </li>
      </ol>
  </subsection>
</section>