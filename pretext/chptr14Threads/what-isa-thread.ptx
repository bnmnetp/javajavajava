<section xml:id="what-isa-thread">
  <title>What Is a Thread?</title>
  <introduction>
    <p>
      A <term>thread</term>
          <idx><h>thread</h></idx>
      (or a <em>thread of execution</em>
      or a <em>thread of control</em>) is a single sequence of executable statements within a program.
    </p>
    <p>
      For Java applications,
      the flow of control begins at the first statement in <c>main()</c> and 
      continues sequentially through the program statements.
      Loops within a program cause a certain block of statements to be repeated.
      If-else structures cause certain statements to be selected and others to be skipped.
      Method calls cause the flow of execution to jump to another part of the program,
      from which it returns after the method's statements are executed.
      Thus, within a single thread,
      you can trace the sequential flow of execution from one statement to the next.
    </p>
    <p>
      One way to visualize a thread is to imagine that you could make a  list of the 
      program's statements as they are executed by the computer's central processing unit (CPU).
      Thus, for a particular execution of a program with loops,
      method calls, and selection statements,
      you could list each instruction that was executed, beginning at the first,
      and continuing until the program stopped,
      as a single sequence of executed statements.
      That's a thread!
    </p>
    <p>
      Now imagine that we break a program up into two or more independent threads.
      Each thread will have its own sequence of instructions.
      Within a single thread,
      the statements are executed one after the other, as usual.
      However, by alternately executing the statements from one thread and another,
      the computer can run several threads <term>concurrently</term>.
      Even though the CPU executes one instruction at at time,
      it can run multiple threads concurrently by rapidly alternating among them.
    </p>
    <p>
      The main advantage of concurrency is that it allows the computer to do more than one task at a time.
      For example,
      the CPU could alternate between downloading an image from the Internet and running a spreadsheet calculation.
      This is the same way you ate toast and cereal and drank coffee in our earlier breakfast example.
      From our perspective,
      it might look as if the computer had several CPUs working in parallel,
      but that's just the illusion created by an effectively scheduling threads.
    </p>
    <principle>
<title>JVM Threads</title>
<p>
The Java Virtual Machine (JVM) is itself an example of a multithreaded program.
      JVM threads perform tasks that are essential to the successful execution of Java programs.
</p>
</principle>
<principle>
<title>Garbage Collector Thread</title>
<p>
One of the JVM threads,
      the <em>garbage collector thread</em>,
      automatically reclaims memory taken up by objects that are not used in your programs.
      This happens at the same time that the JVM is interpreting your program.
</p>
</principle>
</introduction>
<subsection>
    <title>Concurrent Execution of Threads</title>
    <p>
      The technique of concurrently executing several tasks within a program  is known as
      <term>multitasking</term>.
          <idx><h>multitasking</h></idx>
      A <term>task</term> in this sense is a computer operation of some sort,
      such as reading or saving a file,
      compiling a program, or displaying an image on the screen.
      Multitasking requires the use of a separate thread for each task.
      The methods available in the Java <c>Thread</c> class make it possible
      (and quite simple)
      to implement <term>multithreaded</term>
          <idx><h>multithreaded</h></idx>
      programs.
    </p>
    <p>
      Most computers, including personal computers,
      are <term>sequential</term> machines that consist of a single CPU, which 
      is capable of executing one machine instruction at a time.
      In contrast, <term>parallel computers</term>,
      used primarily for large scale scientific and engineering applications,
      are made up of multiple CPUs working in tandem.
    </p>
    <p>
      Today's personal computers,
      running at clock speeds over 1 gigahertz<mdash/>1 <em>gigahertz</em>
      equals 1 billion cycles per second<mdash/>are capable of executing 
      millions of machine instructions per second.
      Despite its great speed,
      however, a single CPU can process only one instruction at a time.
    </p>
    <p>
      Each CPU uses a <term>fetch-execute cycle</term>
          <idx><h>fetch-execute cycle</h></idx>
      to retrieve the next instruction from memory and execute it.
      Since CPUs can execute only one instruction at a time,
      multithreaded programs are made possible by dividing the CPU's time and sharing it among the threads.
      The CPU's schedule is managed by a
      <term>scheduling algorithm</term>,
      which schedules threads for execution on the CPU. 
      The choice of a scheduling algorithm depends on the platform on which the program is running.
      Thus, thread scheduling might be handled differently on Linux, Windows,
      and Macintosh systems.
    </p>
    <figure xml:id="fig-timeslicing">
      <caption>Each thread gets a slice of the CPU's time.</caption>
      <image width="50%" source="chptr14/13f1.png"/>
    </figure>
    <p>
      One common scheduling technique is known as
      <term>time slicing</term>,
          <idx><h>time slicing</h></idx>
       in which each thread alternatively gets a slice of the CPU's time.
      For example,
      suppose we have a program that consists of two threads.
      Using this technique,
      the system would give each thread a small <term>quantum</term>
          <idx><h>quantum</h></idx>
      of CPU time<mdash/>say, one thousandth of a second (one
      <term>millisecond</term>)<mdash/>to execute its instructions.
      When its quantum expires,
      the thread would be <term>preempted</term>
      and the other thread would be given a chance to run.
      The algorithm would then alternate in this <term>round-robin</term>
          <idx><h>round-robin</h></idx>
      fashion between one thread and the other (Fig.
      <xref ref="fig-timeslicing"></xref>).
      During each millisecond on a 300-megahertz CPU,  a thread can execute 300,000 machine instructions.
      One <term>megahertz</term> equals 1 million cycles per second.
      Thus, within each second of real time,
      each thread will receive 500 time slices and will be able to 
      execute something like 150 million machine instructions.
    </p>
    <p>
      Under <term>priority scheduling</term>,
          <idx><h>priority scheduling</h></idx>
      threads of higher priority are  allowed to run to completion before 
      lower-priority threads are given a chance.
      An example of a high-priority thread would be one that is processing 
      keyboard input or any other kind of interactive input from the user.
      If such tasks were given low priority,
      users would experience noticeable delays in their interaction,
      which would be quite unacceptable.
    </p>
    <p>
      The only way a high-priority thread can be preempted is if a thread 
      of still higher priority becomes available to run.
      In many cases,
      higher-priority threads are those that can complete their task within a few milliseconds,
      so they can be allowed to run to completion without starving the lower-priority threads.
      An example would be processing a user's keystroke,
      a task that can begin as soon as the key is struck and can be completed very quickly.
      Starvation occurs when one thread is repeatedly preempted by other threads.
    </p>
    <p>
      Depending on the hardware platform, 
      Java threads can be supported by assigning different threads to different processors,
      by time slicing a single processor,
      or by time slicing many hardware processors.
    </p>
  </subsection>
  <subsection xml:id="multi-thread-numbers">
    <title>Multithreaded Numbers</title>
    <p>
      Let's consider a simple example of a threaded program.
      Suppose we give every individual thread a unique ID number,
      and each time it runs, it prints its ID ten times.
      <nbsp/>For example,
      when the thread with ID 1 runs the output produced would just 
      be a sequence of ten 1's: 1111111111.
    </p>
    <figure xml:id="fig-numberthread">
     <image width="50%" source="chptr14/p706f1.png"/>
     <caption>The <c>NumberThread</c> class.</caption>
    </figure>
    <p>
      As shown in <xref ref="fig-numberthread">Figure</xref>, the <c>NumberThread</c> class is 
      defined as a subclass of <c>Thread</c> and overrides the <c>run()</c> method.
      To set the thread's ID number,
      the constructor takes a single parameter that is used to set the thread's ID number.
      In the <c>run()</c> method,
      the thread simply executes a loop that prints its own number ten times:
    </p>
 <program language="java"><input>
public class NumberThread extends Thread {
    int num;
    public NumberThread(int n) {
        num = n;
    }
    public void run() {
        for (int k=0; k &lt; 10; k++) {
            System.out.print(num);
        } //for
    } // run()
} // NumberThread
 </input></program>
    <p>
      
    </p>
    <p>
      Now let's define another class whose task will be to create many <c>NumberThread</c>s and 
      get them all running at the same time (<xref ref="fig-p707f1">Figure</xref>).
    </p>
    <figure xml:id="fig-p707f1">
      <caption>The <c>Numbers</c> object creates several instances of
      <c>NumberThread</c> and tells each one to <c>start()</c>.</caption>
      <image width="50%" source="chptr14/p707f1.png"/>
    </figure>
    <p>
      For each <c>NumberThread</c>, we want to call its constructor and then <c>start()</c> it:
    </p>
    <p>
      
    </p>
 <program language="java"><input>
public class Numbers {
  public static void main(String args[]) {
                                  // 5 threads
    NumberThread number1, number2, number3, number4, number5;
     // Create and start each thread
    number1 = new NumberThread(1); number1.start();
    number2 = new NumberThread(2); number2.start();
    number3 = new NumberThread(3); number3.start();
    number4 = new NumberThread(4); number4.start();
    number5 = new NumberThread(5); number5.start();
  } // main()
} // Numbers
 </input></program>
    <p>
      When a thread is started by calling its <c>start()</c> method,
      it automatically calls its <c>run()</c> method.
      The output generated by this version of the
<c>Numbers</c> application is as follows:
    </p>
 <program language="java"><input>
11111111112222222222333333333344444444445555555555
 </input></program>
    <p>
      From this output,
      it appears that the individual threads were run in the order in which they were created.
      In this case,
      each thread was able to run to completion before the next thread started running.
    </p>
    <p>
      What if we increase the number of iterations that each thread performs?
      Will each thread still run to completion?
      The following output was generated for 200 iterations per thread:
    </p>
 <program language="java"><input>
111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111111111111
111111111111111111111111111111111111111111111111111111111111112222222
222222222222222222222222222222222222222222222222222222222222222222222
222222222222222222222222222222222222222222222222222222222222222222222
222222222222222222222222222222222222222222223333333333333333333333333
333333333333333333333333333333333333333333333333333333333333333333333
333333333333333333333333333444444444444444444444444444444444444444444
444444444444444444444444444444444444444444444444444444444444444444444
444444444455555555555555555555555555555555555555555555555555555555555
555555555555555555555555555555555555555555555555555555555555552222222
222233333333333333333333333333333333333333333333333333333333333333333
333333333333334444444444444444444444444444445555555555555555555555555
555555555555555555555555555555555555555555555555555555444444444444444
4444444444444444444444444444444444
 </input></program>
    <p>
      In this case, only thread 1 managed to run to completion.
      Threads 2, 3, 4, and 5 did not.
      As this example illustrates,
      the order and timing of a thread's execution are highly unpredictable.
    </p>
    <p>
      This example also serves to illustrate one way of creating a multithreaded program:
      <ul>
        <li>
          <p>
            Create a subclass of the <c>Thread</c> class.
          </p>
        </li>
        <li>
          <p>
            Within the subclass,
            implement a method with the signature
 <c>void run()</c> that contains the statements to be executed by that thread.
          </p>
        </li>
        <li>
          <p>
            Create several instances of the subclass and start each thread by invoking the <c>start()</c> method on each instance.
          </p>
        </li>
      </ul>
    </p>
    <principle>
<title>Thread Creation</title>
<p>
One way to create a thread in Java is to define a subclass 
of <c>Thread</c> and override the default <c>run()</c> method.
</p>
</principle>
  </subsection>
</section>