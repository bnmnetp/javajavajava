<section xml:id="finding-things-withina-string">
  <title>Finding Things Within a String</title>
  <p>
    Programmers often have to find the location of a particular character or substring in a string.
    For example,
    user names and passwords are sometimes stored in a single string in which the name and 
    password are separated from each other by a special character,
    such as a colon (<c>username:password</c>).
    In order to get the name or password from such a string,
    it is convenient to have methods that will search the string and report the 
    index of the colon character.
  </p>
  <subsection><title>indexOf()</title>
  <p>
    The <c>indexOf()</c> and <c>lastIndexOf()</c> methods
        <idx><h>lastIndexOf() method</h></idx>
    are instance methods that can be used to find the index position of a character or a substring within a
<c>String</c>. There are several versions of each:
  </p>
 <program language="java"><input>
public int indexOf(int character);
public int indexOf(int character, int startingIndex);
public int indexOf(String string);
public int indexOf(String string, int startingIndex);
public int lastIndexOf(int character);
public int lastIndexOf(int character, int startingIndex);
public int lastIndexOf(String string);
public int lastIndexOf(String string, int startingIndex);
 </input></program>
  <p>
    The <c>indexOf()</c> method searches from left to right within a <c>String</c> for either a character or a substring.
    The
<c>lastIndexOf()</c> method searches from right to left for a character or substring.
    To illustrate,
    suppose we have declared the following strings:
  </p>
 <program language="java"><input>
String string1 = "";
String string2 = "Hello";
String string3 = "World";
String string4 = string2 + " " + string3;
 </input></program>
  <p>
    Recalling that strings are indexed starting at 0, searching for <em>o</em>
    in the various strings gives the following results:
  </p>
  <p>
    
  </p>
 <program language="java"><input>
string1.indexOf('o') ==> -1  string1.lastIndexOf('o') ==> -1
string2.indexOf('o') ==>  4  string2.lastIndexOf('o') ==>  4
string3.indexOf('o') ==>  1  string3.lastIndexOf('o') ==>  1
string4.indexOf('o') ==>  4  string4.lastIndexOf('o') ==>  7
 </input></program>
  <p>
    Because <c>string1</c> is the empty string, <q></q>, it does not  contain the letter <em>o</em>.
    Therefore, <c>indexOf()</c> returns <m>-1</m>,
    a value that cannot be a valid index for a <c>String</c>. This convention is 
    followed in <c>indexOf()</c> and <c>lastIndexOf()</c>. 
  </p>
  <p>
    Because
    <c>string2</c> and <c>string3</c> each contain only one occurrence of the letter <em>o</em>,
    both <c>indexOf()</c> and <c>lastIndexOf()</c> return the same value when 
    used on these strings.
    Because <c>string4</c> contains two occurrences of
    <em>o</em>, <c>indexOf()</c> and <c>lastIndexOf()</c> return different values in this case.
    As <xref ref="fig-helloindex">Figure</xref> shows, the first <em>o</em> in
    <q>Hello World</q> occurs at index 4, the value returned by <c>indexOf()</c>. 
    The second <em>o</em> occurs at index 7, which is the value returned by <c>lastIndexOf()</c>.
  </p>
  <figure xml:id="fig-helloindex">
    <caption>Indexing of <q>Hello World</q>.</caption>
   <image width="40%" source="chptr07/7f6.png"/>
  </figure>
  <p>
    By default, the single-parameter versions of <c>indexOf()</c> and <c>lastIndexOf()</c> 
    start their searches at their respective
    (left or right) ends of the string.
    The two-parameter versions of these methods allow you to specify both the 
    direction and starting point of the search.
    The second parameter specifies the starting index.
    Consider these examples:
  </p>
 <program language="java"><input>
string4.indexOf('o', 5)     ==> 7
string4.lastIndexOf('o', 5) ==> 4
 </input></program>
  <p>
    If we start searching in both cases at index 5, then <c>indexOf()</c> will miss the
    <em>o</em> that occurs at index 4.
    The first <em>o</em> it finds will be the one at index 7.
    Similarly, <c>lastIndexOf()</c> will miss the <em>o</em>
    that occurs at index 7 and will find the
    <em>o</em> that occurs at index 4.
  </p>
  <p>
    The <c>indexOf()</c> and <c>lastIndexOf()</c> methods can also be used to find substrings:
  </p>
 <program language="java"><input>
string1.indexOf("or") ==> -1  string1.lastIndexOf("or") ==> -1
string2.indexOf("or") ==> -1  string2.lastIndexOf("or") ==> -1
string3.indexOf("or") ==>  1  string3.lastIndexOf("or") ==>  1
string4.indexOf("or") ==>  7  string4.lastIndexOf("or") ==>  7
 </input></program>
  <p>
    The substring
    <q>or</q>
    does not occur in either <c>string1</c> or <c>string2</c>. It does occur 
    beginning at location 1 in <c>string3</c> and beginning at location 7 
    in <c>string4</c>. For this collection of examples,
    it doesn't matter whether we search from left to right or right to left.
  </p>
  <exercises>
    <title>Self-Study Exercises</title>
    <exercise label="str-index-1">
      <title>String indexOf() expressions</title>
        <statement>
          <p>
            Suppose the <c>String</c> variable <c>s</c> has been initialized to
            <q>mom.</q>
            Evaluate each of the following expressions:
          </p>
          <ol label="a">
           <li>
              <c>s.indexOf("m");</c> <var/>
            </li>
            <li>
              <c>s.indexOf("o");</c>  <var/>
            </li>
            <li>
             <c>s.indexOf("M");</c>  <var/>
            </li>
          </ol>
        </statement>
        <setup>
          <var>
            <condition number="0">
              <feedback>
                <p>Correct. It finds the first 'm'.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. Did you remember zero-indexing?</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition number="1">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect.  Did you remember zero-indexing?</p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition number="-1">
              <feedback>
                <p>Correct. There is no 'M' in the string.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect.  There is no 'M' in the string.</p>
              </feedback>
            </condition>
          </var>                
        </setup>
        <hint>
          <p>The <c>indecOf()</c> method returns the index of its argument's location 
          in the string.</p>
        </hint>
        <solution>
          <p>(a) 0, (b) 1, (c) -1  </p>
        </solution>
    </exercise>

    <exercise label="str-index-2">
      <title>String indexOf() expressions</title>
        <statement>
          <p>
            Suppose the <c>String</c> variable <c>s</c> has been initialized to:
            <c>String s1 = "Java, Java, Java";</c>
            Evaluate each of the following expressions:
          </p>
          <ol label="a">
          <li>
              <c>s1.length()</c> <var/>
          </li>
          <li>
              <c>String.valueOf(s1.length())</c> <var/>
          </li>
          <li>
              <c>s1.indexOf('a')</c> <var/>
          </li>
          <li>
              <c>s1.lastIndexOf('a')</c> <var/>
          </li>
          </ol>
        </statement>
        <setup>
          <var>
            <condition number="16">
              <feedback>
                <p>Correct. </p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. How many characters are in the string?</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition string="&quot;16&quot;">
              <feedback>
                <p>Correct. Converts the length to a string.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect.  Did you forget to use quote marks?</p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition number="1">
              <feedback>
                <p>Correct. The index of the first 'a' is 1.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect.  Did you remember about zero-indexing?</p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition number="15">
              <feedback>
                <p>Correct. The index of the last character is the length - 1.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect.  The index of the last character is the length - 1</p>
              </feedback>
            </condition>
          </var>                     
        </setup>
        <solution>
          <p>(a) 16, (b) <q>16</q>, (c) 1, (d) 15   </p>
        </solution>        
      </exercise>

    <exercise label="str-index-3">
      <title>String indexOf() expressions</title>
        <statement>
          <p>
            Suppose the <c>String</c> variable <c>s</c> has been initialized to:
            <c>String s1 = "Java, Java, Java";</c>
            Evaluate each of the following expressions:
          </p>
          <ol label="a">
           <li>
              <c>s1.indexOf("av")</c> <var/>
          </li>
          <li>
              <c>s1.lastIndexOf("av")</c> <var/>
          </li>
          <li>
              <c>s1.indexOf('a', 5)</c> <var/>
          </li>
          <li>
              <c>s1.lastIndexOf('a', 5)</c> <var/>
          </li>
          </ol>
        </statement>
        <setup>
          <var>
            <condition number="1">
              <feedback>
                <p>Correct. </p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. What's the index of the 'a' in the  first 
                occurrence of "av"?</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition number="13">
              <feedback>
                <p>Correct.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. Where is the last occurrence of "av"? </p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition number="7">
              <feedback>
                <p>Correct. We start searching at index 5. </p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. What is the index of the first occurrence 
                of "av" after index 5?</p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition number="3">
              <feedback>
                <p>Correct. We start searching from right to left starting at index 5.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. We start searching from right to left starting at index 5.</p>
              </feedback>
            </condition>
          </var>                     
        </setup>
        <solution>
          <p>(a) 1, (b) 13, (c) 7, (d) 3  </p>
        </solution>        
      </exercise>

    <exercise label="str-index-4">
      <title>String indexOf() expressions</title>
        <statement>
          <p>
            Suppose the <c>String</c> variable <c>s</c> has been initialized to:
            <c>String s1 = "Java, Java, Java";</c>
            Evaluate each of the following expressions:
          </p>
          <ol label="a">
          <li>
              <c>s1.indexOf("av", s1.length() - 10)</c> <var/>
          </li>
          <li>
              <c>s1.lastIndexOf("av", s1.length() - 4)</c> <var/>
          </li>
          <li>
              <c>s1.indexOf("a", s1.indexOf("va"))</c> <var/>
          </li>
          </ol>
        </statement>
        <setup>
          <var>
            <condition number="7">
              <feedback>
                <p>Correct. Index of "av" starting at 6.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. Index of "av" starting at 6.</p>
              </feedback>
            </condition>
          </var>
          <var>
            <condition number="7">
              <feedback>
                <p>Correct. Last index of "av" starting up 12.</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. Last index of "av" starting up 12.</p>
              </feedback>
            </condition>
          </var>     
         <var>
            <condition number="3">
              <feedback>
                <p>Correct. First index of "a" starting at 2. </p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. What is the first index of "a" starting at 2?</p>
              </feedback>
            </condition>
          </var>                        
        </setup>
        <solution>
          <p>(a) 7, (b) 7, (c) 3  </p>
        </solution>        
      </exercise>

    <exercise label="str-index-5">
      <title>Tricky indexOf() expression</title>
        <statement>
        <p>
        Evaluate the following expression: <var/>
        </p>
          <program language="java"><input>
          String tricky = "abcdefg01234567";
          tricky.indexOf(String.valueOf( tricky.indexOf("c") ));
          </input></program>          
        </statement>
        <setup>
          <var>
            <condition number="9">
              <feedback>
                <p>Correct. Good job!</p>
              </feedback>
            </condition>
            <condition string=".*">
              <feedback>
                <p>Incorrect. Check out the hint.</p>
              </feedback>
            </condition>
          </var>                       
        </setup>
        <hint>
          <p>Evaluate the expressions starting with the innermost parentheses.</p>
        </hint>
        <solution>
          <p> Answer: 9 Solution: </p>
          <pre>
            tricky.indexOf(String.valueOf( tricky.indexOf("c") ));
            tricky.indexOf(String.valueOf( 2 )) 
            tricky.indexOf("2") 
            9 
          </pre>
        </solution>        
      </exercise>
    </exercises>
  </subsection>
</section>