<section xml:id="array-algorithms-searching">
  <title>Array Algorithms: Searching</title>
  <introduction>
    <p>
      Suppose we have a large array and we need to find one of its elements.
      We need an algorithm to search the array for a particular value,
      usually called the <term>key</term>.
      If the elements of the array are not arranged in any particular order,
      the only way we can be sure to find the key,
      assuming it is in the array,
      is to search every element, beginning at the first element,
      until we find it.
    </p>
  </introduction>
  <subsection xml:id="fig-p430f1">
    <title>Sequential Search</title>
    <p>
      This approach is known as a <term>sequential
          <idx><h>sequential search</h></idx>
      search</term>,
      because each element of the array will be examined in sequence until the key is found
      (or the end of the array is reached).
      A pseudocode description of this algorithm is as follows:
    </p>
<algorithm>
<title>Sequential search </title>
 <program language="java"><input>
1. For each element of the array
2.    If the element equals the key
3.       Return its index
4. If the key is not found in the array
5.    Return -1 (to indicate failure)
 </input></program>
 </algorithm>
    <p>
      This algorithm can easily be implemented in a method that searches an integer array,
      which is passed as the method's parameter.
      If the key is found in the array, its location is returned.
      If it is not found, then <m>-1</m> is returned to indicate failure.
    </p>
    <figure xml:id="fig-search">
      <caption>The <c>Search</c>  class.</caption>
      <image width="50%" source="chptr09/p430f1.png"/>
    </figure>
    <p>
      The <c>Search</c> class (<xref ref="fig-search">Figure</xref> and 
      <xref ref="lst-search">Listing</xref>) 
      provides the Java implementation of the <c>sequentialSearch()</c> method.
      The method takes two parameters:
      the array to be searched and the key to be searched for.
      It uses a for statement to examine each element of the array,
      checking whether it equals the key or not.
      If an element that equals the key is found,
      the method immediately returns that element's index.
      Note that the last statement in the method will only be reached 
      if no element matching the key is found.
    </p>
    <listing xml:id="lst-search">
      <caption>The <c>Search</c> class contains both a <c>sequentialSearch()</c>
      and a <c>binarySearch()</c>.</caption>
 <program language="java"><input>
public class Search {

  public int sequentialSearch(int arr[], int key) {
    for (int k = 0; k &lt; arr.length; k++)
      if (arr[k] == key)
        return k;
    return -1;           // Failure if this is reached
  } // sequentialSearch()

  public int binarySearch(int arr[], int key) {
    int low = 0;                // Initialize bounds
    int high = arr.length - 1;
    while (low &lt;= high) {   // While not done
      int mid = (low + high) / 2;
      if (arr[mid] == key)
        return mid;            // Success
      else if (arr[mid] &lt; key)
        low = mid + 1;        // Search top half
      else
        high = mid - 1;       // Search bottom half
    }  // while
    return -1;     // Post: if low > high search failed
  } // binarySearch()
}//Search
 </input></program>
    </listing>
    <principle>
      <title>EFFECTIVE DESIGN: Sentinel Return Value</title>
      <p>
        Like Java's <c>indexOf()</c> method,
        the <c>sequentialSearch()</c> returns a sentinel value (<m>-1</m>) 
        to indicate that the key was not found.
        This is a common design for search methods.
      </p>
    </principle>
  </subsection>
  <subsection xml:id="binary-search">
    <title>Binary Search</title>
    <p>
      If the elements of an array have been sorted into ascending or descending order,
      it is not necessary to search sequentially through each element of the array 
      in order to find the key.
      Instead, the search algorithm can make use of the knowledge that 
      the array is ordered and perform what's known as a <term>binary
          <idx><h>binary search</h></idx>
      search</term>, which is a divide-and-conquer
          <idx><h>divide-and-conquer</h></idx>
      algorithm that divides the array in half on each iteration and limits its 
      search to just that half that could contain the key.
    </p>
    <p>
      To illustrate the binary search,
      recall the familiar guessing game in which you try to guess a 
      secret number between 1 and 100, being told
      <q>too high</q>
      or
      <q>too low</q>
      or
      <q>just right</q>
      on each guess.
      A good first guess should be 50.
      If this is too high, the next guess should be 25,
      because if 50 is too high the number must be between 1 and 49.
      If 50 was too low, the next guess should be 75, and so on.
      After each wrong guess,
      a good guesser should pick the midpoint of the sublist 
      that would contain the secret number.
    </p>
    <p>
      Proceeding in this way,
      the correct number can be guessed in at most  <m>log_2 N</m> guesses,
      because the base-2 logarithm of <em>N</em>
      is the number of times you can divide <em>N</em> in half.
      For a list of 100 items, the search should take no more than seven guesses
      (<m>2^7 = 128 > 100</m>).
      For a list of <m>1,000</m> items,
      a binary search would take at most ten guesses (2<m>^{10}=1,024>1,000</m>).
    </p>
    <p>
      So a binary search is a much more efficient way to search,
      provided the array's elements are in order.
      Note that <q>order</q> here needn't be numeric order.
      We could use binary search to look up a word in a dictionary or a name in a phone book.
    </p>
    <p>
      A pseudocode representation of the binary search is given as follows:
    </p>
<algorithm>
<title>Binary search </title>
 <program language="java"><input>
TO SEARCH AN ARRAY OF N ELEMENTS IN ASCENDING ORDER
1. Assign 0 low and assign N-1 to high initially
2. As long as low is not greater than high
3.    Assign (low + high) / 2 to mid
4.    If the element at mid equals the key
5.        then return its index
6.    Else if the element at mid is less than the key
7.        then assign mid + 1 to low
8.    Else assign mid - 1 to high
9. If this is reached return -1 to indicate failure
 </input></program>
</algorithm>
    <p>
      Just as with the sequential search algorithm,
      this algorithm can easily be implemented in a method that searches an integer 
      array that is passed as the method's parameter (<xref ref="lst-search">Listing</xref>).
    </p>
    <p>
      If the key is found in the array, its location is returned.
      If it is not found, then <m>-1</m> is returned to indicate failure.
      The <c>binarySearch()</c> method takes the same type of parameters as 
      <c>sequentialSearch()</c>. Its local variables, <c>low</c> and <c>high</c>, 
      are used as pointers, or references,
      to the current low and high ends of the array, respectively.
    </p>
    <p>
      Note the loop-entry condition: <c>low &lt;= high</c>. If <c>low</c> 
      ever becomes greater than <c>high</c>, this indicates 
      that <c>key</c> is not contained in the array.
      In that case, the algorithm returns <m>-1</m>.
    </p>
    <p>
      As a binary search progresses,
      the array is repeatedly cut in half and <c>low</c> and <c>high</c> will 
      be used to point to the low and high index values in that portion 
      of the array that is still being searched.
    </p>
    <p>
      The local variable <c>mid</c> is used to point to the 
      approximate midpoint of the unsearched portion of the array.
      If the key is determined to be past the midpoint,
      then <c>low</c> is adjusted to <c>mid+1</c>; if the key occurs before the midpoint,
      then <c>high</c> is set to <c>mid-1</c>. 
      The updated values of <c>low</c> and <c>high</c> 
      limit the search to the unsearched portion of the original array.
    </p>
    <p>
      Unlike sequential search,
      binary search does not have to examine every location in the array to 
      determine that the key is not in the array.
      It searches only that part of the array that could contain the key.
      For example,
      suppose we are searching for <m>-5</m> in the following array:
    </p>
 <program language="java"><input>
int sortArr[] =
   { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
 </input></program>
    <p>
      The <m>-5</m> is smaller than the smallest array element.
      Therefore, the algorithm will repeatedly divide the low end of 
      the array in half until the condition <c>low > high</c> becomes true.
      We can see this by tracing the values that low, mid,
      and high will take during the search:
    </p>
 <program language="java"><input>
Key  Iteration  Low   High    Mid
----------------------------------
 -5   0          0     19      9
 -5   1          0     8       4
 -5   2          0     3       1
 -5   3          0     0       0
 -5   4          0     -1      Failure
 </input></program>
    <p>
      As this trace shows,
      the algorithm examines only four locations to determine that <m>-5</m> is not in the array.
      After checking location 0, the new value for <c>high</c> will become <m>-1</m>,
      which makes the condition <c>low &lt;= high </c> false.
      So the search will terminate.
    </p>
    <figure xml:id="fig-testsearch">
      <caption>The <c>TestSearch</c>  class.</caption>
            <image width="50%" source="chptr09/p432f1.png"/>
    </figure>
    <p>
      The <c>TestSearch</c> class (<xref ref="fig-testsearch">Figure</xref> 
      and <xref ref="lst-testsearch">Listing</xref>) 
      provides a program that can be used to test two search methods.
      It creates an integer array, whose values are in ascending order.
      It then uses the <c>getInput()</c> method to input an integer from the 
      keyboard and then performs both a <c>sequentialSearch()</c> 
      and a <c>binarySearch()</c> for the number.
    </p>
    <listing xml:id="lst-testsearch">
      <caption>The <c>TestSearch</c> class.</caption>
 <program language="java"><input>
import java.io.*;
public class TestSearch {
  
  public static int getInput() {
    KeyboardReader kb = new KeyboardReader();
    kb.prompt("This program searches for values in an array.");
    kb.prompt(
    "Input any positive integer (or any negative to quit) : ");
    return kb.getKeyboardInteger();
  } // getInput()

  public static void main(String args[]) throws IOException {
    int intArr[] = { 2,4,6,8,10,12,14,16,18,20,22,24,26,28};
    Search searcher = new Search();
    int key = 0, keyAt = 0;
    key = getInput();
    while (key >= 0) {
      keyAt = searcher.sequentialSearch( intArr, key );
      if (keyAt != -1)
        System.out.println("  Sequential: " + key +
                              " is at intArr[" + keyAt + "]");
      else
        System.out.println("  Sequential: " + key
                           + " is not contained in intArr[]");
      keyAt = searcher.binarySearch(intArr, key);
      if (keyAt != -1)
        System.out.println("  Binary: " + key +
                              " is at intArr[" + keyAt + "]");
      else
        System.out.println("  Binary: " + key +
                             " is not contained in intArr[]");
      key = getInput();
    } // while
  } // main()
} // TestSearch
 </input></program>
    </listing>
    </subsection>
    <subsection><title>Self-Study Exercise</title>
      <ol>
        <li>
          <p>
            For the array containing the elements 2, 4, 6, and so on up to 28 in that order,
            draw a trace showing which elements are examined if you search for 21 using a binary search.
          </p>
        </li>
      </ol>

  </subsection>
</section>