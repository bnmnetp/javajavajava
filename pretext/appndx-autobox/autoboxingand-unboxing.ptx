<section xml:id="autoboxingand-unboxing">
  <title>Autoboxing and Unboxing</title>
  <p>
    <term>Autoboxing</term> refers to the automatic storing of a value of primitive type into an object of the corresponding wrapper class.
    Before autoboxing,
    it was necessary to explicitly box values into wrapper class objects with code like:
  </p>
 <program language="java"><input>
Integer iObj = new Integer(345);
double num = -2.345;
Double  dObj = new Double(num);
 </input></program>
  <p>
    Java 5.0 automatically creates a wrapper class object from a value of primitive type in many situations where a wrapper class object is expected.
    The assignments above can be accomplished with the simpler code:
  </p>
 <program language="java"><input>
Integer iObj = 345;
double num = -2.345;
Double  dObj = num;
 </input></program>
  <p>
    There is a corresponding feature in Java 5.0 which automatically performs the <term>unboxing</term>
    of primitive values from wrapper class objects.
    Instead of the explicit unboxing in:
  </p>
 <program language="java"><input>
int m = iObj.intValue();
double x = dObj.doubleValue();
 </input></program>
  <p>
    Java 5.0 allows the simpler:
  </p>
 <program language="java"><input>
int m = iObj;
double x = dObj;
 </input></program>
  <p>
    Java 5.0 provides autoboxing of primitive values and automatic unboxing of wrapper class objects in expressions or in arguments of methods,
    where such a conversion is needed to complete a computation.
    Beginning programmers are unlikely to encounter many problems that require such conversions.
    One situation which often requires boxing and unboxing are applications that involve data structures.
    The generic type data structures of Chapter 16 must store objects but the data to be stored might be represented as values of a primitive type.
    The code segment below should give you some idea of the type of situation where autoboxing and unboxing can be a genuine help simplifying one's code:
  </p>
 <program language="java"><input>
Stack&lt;Integer> stack = new Stack&lt;Integer>();
for(int k = -1; k > -5; k--)
    stack.push(k);
while (!stack.empty())
    System.out.println(Math.abs(stack.pop()));
 </input></program>
  <p>
    Notice that the <c>stack.push(k)</c> method is expecting an
<c>Integer</c> object so the <c>int</c> value stored in <c>k</c> will be autoboxed into such an object before the method is executed.
    Also note that the <c>Math.abs()</c> method in the last line of the code fragment is expecting a value of primitive type so the <c> Integer</c> value returned by <c>stack.pop()</c> must be automatically unboxed before the <c>Math.abs()</c> method can be applied.
  </p>
  <p>
    Sun's online Java 5.0 documentation can be consulted for a more precise description of where autoboxing and unboxing takes place and a list of some special situations where code allowing autoboxing can lead to confusion and problems.
  </p>
</section>