<section xml:id="case-study-an-n-player-computer-game">
  <title>Case Study: An N-Player Computer Game</title>
  <introduction>
    <p>
      In this section we will make use of arrays to extend our game-playing 
      library by developing a design that can support games that involve more than two players.
    </p>
    <p>     
      We will use an array to store a variable number of players.
      Following the object-oriented design principles described in Chapter<nbsp/>8,
      we will make use of inheritance and polymorphism to develop a design that is flexible and extensible,
      one that can be used to implement a wide variety of computer games.
    </p>
    <p>
      As in our <c>TwoPlayer</c> game example from Chapter<nbsp/>8,
      our design will allow both humans and computers to play the games.
      To help simplify the example,
      we will modify the <c>WordGuess</c> game that we developed in the Chapter<nbsp/>8.
      As you will see,
      it requires relatively few modifications to convert it from a 
      subclass of <c>TwoPlayerGame</c> to a subclass of 
      <c>ComputerGame</c>, the superclass for our N-Player game hierarchy.
    </p>
  </introduction>
  <subsection>
    <title>The <c>ComputerGame</c> Hierarchy</title>
    <figure xml:id="fig-game">
      <caption>Overview of the <c>ComputerGame</c> class hierarchy.</caption>
      <image width="50%" source="chptr09/nplayerwordguess.png"/>
    </figure>
    <p>
      <xref ref="fig-game">Figure</xref>
      provides a summary overview of the <c>ComputerGame</c> hierarchy.
      This figure shows the relationships among the many classes and interfaces involved.
      The two classes whose symbols are bold, <c>WordGuess</c> and <c>WordGuesser</c>, 
      are the classes that define the specific game we will be playing.
      The rest of the classes and interfaces are designed to be used with any N-player game.
    </p>
    <p>
      At the root of this hierarchy is the abstract <c>ComputerGame</c> class.
      Note that it uses from 1 to <em>N</em><c>Player</c> s.
      These objects will be stored in a one-dimensional array in <c>ComputerGame</c>. 
      Recall from Chapter<nbsp/>8 that an <em>IPlayer</em>
      was any class that implements the <c>makeAMove()</c> method.
    </p>
    <p>
      In this design,
      we have put the abstract <c>makeAMove()</c> method into the <c>Player</c> class,
      a class that defines a generic player of computer games.
      For the <c>WordGuess</c> game,
      the <c>WordGuesser</c> class extends <c>Player</c>. In order to play Word Guess,
      we will create a
      <c>WordGuess</c> instance,
      plus one or more instances of <c>WordGuesser</c> s.
      This is similar to the <c>OneRowNim</c> example from the previous chapter,
    </p>
    <p>
      Note where the <c>TwoPlayerGame</c> and <c>OneRowNim</c> classes 
      occur in the hierarchy. <c>TwoPlayerGame</c> will now be an extension of
      <c>ComputerGame</c>. This is in keeping with the fact that a 
      two-player game is a special kind of N-player computer game.
      As we will see when we look at the details of these classes, 
      <c>TwoPlayerGame</c> will override some of the methods inherited from <c>ComputerGame</c>.
    </p>
    <p>
      Because it contains the abstract <c>makeAMove()</c> method,
      the <c>Player</c> class is an abstract class.
      Its purpose is to define and store certain data and methods that 
      can be used by any computer games.
    </p>
    <p>
      For example,
      one important piece of information defined in <c>Player</c> is 
      whether the player is a computer or a person. <c>Player</c>'s 
      data and methods will be inherited by <c>WordGuesser</c> and 
      by other classes that extend <c>Player</c>. Given its position in the hierarchy,
      we will be able to define polymorphic methods for <c>WordGuesser</c>s 
      that treat them as <c>Player</c> s.
      As we will see,
      this will give our design great flexibility and extensibility.
    </p>
  </subsection>
  <subsection xml:id="sec-computergame">
    <title>The <c>ComputerGame</c> Class</title>
    <p>
      <xref ref="fig-computergame">Figure</xref> shows the design details of 
      the <c>ComputerGame</c> class.
      One of the key tasks of the <c>ComputerGame</c> class is to manage the one 
      or more computer game players.
      Because this is a task that is common to all computer games,
      it makes sense to manage it here in the superclass.
    </p>
    <figure xml:id="fig-computergame">
      <caption><c>ComputerGame</c> is an abstract class because its
        <c>gameOver()</c> and <c>getWinner()</c> methods are abstract.</caption>
      <image width="40%" source="chptr09/computergame.png"/> 
    </figure>
    <p>
      Toward this end, <c>ComputerGame</c> declares four instance variables and several methods.
      Three <c>int</c> variables define the total number of players (<c>nPlayers</c>), 
      the number of players that have been added to the game (<c>addedPlayers</c>), 
      and the player whose turn it is (<c>whoseTurn</c>).
      An array named <c>player</c> stores the <c>Player</c> s.
      In keeping with the zero indexing convention of arrays,
      we number the players from 0 to <em>nPlayers-1</em>.
      These variables are all declared <c>protected</c>, so that they can 
      be referenced directly by <c>ComputerGame</c> subclasses,
      but as <c>protected</c> variables,
      they remain hidden from all other classes.
    </p>
    <p>
      The <c>ComputerGame(int)</c> constructor allows the number of 
      players to be set when the game is constructed.
      The default constructor sets the number of players to one.
      The constructors create an array of length <c>nPlayers</c>:
    </p>
 <program language="java"><input>
public ComputerGame(int n) {
  nPlayers = n;
  player = new Player[n]; // Create the array
}
 </input></program>
    <p>
      The <c>setPlayer()</c> and <c>getPlayer()</c> methods are the mutator 
      and accessor methods for the <c>whoseTurn</c> variable.
      This variable allows a user to determine and set whose turn it is,
      a useful feature for initializing a game.
      The <c>changePlayer()</c> method uses the default expression,
    </p>
 <program language="java"><input>
whoseTurn = (whoseTurn + 1) % nPlayers
 </input></program>
    <p>
      for changing whose turn it is.
      Assuming that players are numbered from 0 to <em>nPlayers-1</em>,
      this code gives the turn to the next player,
      wrapping around to player 0, if necessary.
      Of course, a subclass of <c>ComputerGame</c> can override this 
      method if the game requires some other order of play.
    </p>
    <p>
      The <c>addPlayer(Player)</c> method is used to add a new <c>Player</c> to the game,
      including any subclass of <c>Player</c>. The method assumes 
      that <c>addedPlayers</c> is initialized to 0.
      It increments this variable by 1 each time a new player is added to the array.
      For the game <c>WordGuess</c>, we would be adding 
      <c>Player</c>s of type <c>WordGuesser</c> to the game.
    </p>
    <p>
      The complete source code for <c>ComputerGame</c> is shown in 
      <xref ref="lst-gamesource">Listing</xref>.
    </p>
    <listing xml:id="lst-gamesource">
      <caption>Implementation of the <c>ComputerGame</c> class.</caption>
 <program language="java"><input>
public abstract class ComputerGame {
  protected int nPlayers;
  protected int addedPlayers = 0;
  protected int whoseTurn;
  protected Player player[];  // An array of players

  public ComputerGame() {
    nPlayers = 1;       // Default: 1 player game
    player = new Player[1];
  }
  public ComputerGame(int n) {
    nPlayers = n;
    player = new Player[n]; // N-Player game
  }
  public void setPlayer(int starter) {
    whoseTurn = starter;
  }
  public int getPlayer() {
    return whoseTurn;
  }
  public void addPlayer(Player p) {
    player[addedPlayers] = p;
    ++addedPlayers;
  }
  public void changePlayer() {
    whoseTurn = (whoseTurn + 1) % nPlayers;
  }
  public String getRules() {
    return "The rules of this game are: ";
  }
  public String listPlayers() {
    StringBuffer result = new StringBuffer("\nThe players are:\n");
    for (int k = 0; k &lt; nPlayers; k++)
      result.append("Player" + k + " " + player[k].toString() + "\n");
      result.append("\n");
      return result.toString();
  }
  public abstract boolean gameOver(); // Abstract
  public abstract String getWinner(); //  methods
} //ComputerGame
 </input></program>
    </listing>
    <p>
      There are several points worth noting about this implementation.
      First, note that just as in the case of the abstract
      <c>TwoPlayerGame</c> class from Chapter<nbsp/>8,
      the methods <c>gameOver()</c> and <c>getWinner()</c> are defined 
      as <c>abstract</c> and the <c>getRules()</c> method is given a generic implementation.
      The intent here is that the subclass will override <c>getRules()</c> 
      and will provide game-specific implementations for the abstract methods.
    </p>
    <p>
      Second, note how the <c>addPlayer()</c> method is coded.
      It uses the
      <c>addedPlayers</c> variable as the index into the <c>player</c> array,
      which always has length <c>nPlayers</c>. An attempt to call 
      this method when the array is already full will lead to the 
      following exception being thrown by Java:
    </p>
 <program language="java"><input>
Exception in thread ``main''
    java.lang.ArrayIndexOutOfBoundsException: 2
    at ComputerGame.addPlayer(ComputerGame.java:22)
    at TwentyOne.main(TwentyOne.java:121)
 </input></program>
    <p>
      In other words,
      it is an error to try to add more players than will fit in the <c>player</c> array.
      In Chapter<nbsp/>11, we will learn how to design our code to guard against such problems.
    </p>
    <p>
      Finally, note the implementation of the <c>listPlayers()</c> method 
      (<xref ref="lst-gamesource">Listing</xref>).
      Here is a good example of polymorphism at work.
      The elements of the <c>player</c> array have a declared type of <c>Player</c>. 
      Their dynamic type is <c>WordGuesser</c>. So when the expression 
      <c>player[k].toString()</c> is invoked,
      dynamic binding is used to bind this method call to the implementation 
      of <c>toString()</c> defined in the <c>WordGuesser</c> class.
      Thus, by allowing <c>toString()</c> to be bound at run time,
      we are able to define a method here that doesn't know the exact 
      types of the objects it will be listing.
    </p>
    <p>
      The power of polymorphism is the flexibility and extensibility it  lends to our class hierarchy.
      Without this feature,
      we would not be able to define <c>listPlayers()</c> here in the superclass,
      and would instead have to define it in each subclass.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Extensibility</title>
      <p>
        Polymorphic methods allow us to implement methods that can be 
        applied to yet-to-be-defined subclasses.
      </p>
    </principle>
  </subsection>
  <subsection xml:id="sec-wordguesser">
    <title>The <c>WordGuess</c> and <c>WordGuesser</c>Classes</title>
    <p>
      We will assume here that you are familiar with the <c>WordGuess</c> 
      example from Chapter<nbsp/>8.
      If not, you will need to review that section before proceeding.
    </p>
    <p>
      Word Guess is a game in which players take turns trying to 
      guess a secret word by guessing its letters.
      Players keep guessing as long as they correctly guess a letter in the word.
      If they guess wrong, it becomes the next player's turn.
      The winner of the game is the person who guesses the last letter of the secret word,
      thereby completely identifying the word.
    </p>
    <figure xml:id="fig-wordguess">
      <caption>The <c>WordGuess</c> class.</caption>
      <image width="40%" source="chptr09/wordguess.png"/> 
    </figure>
    <p>
      <xref ref="fig-wordguess">Figure</xref> provides an overview of the <c>WordGuess</c> class.
      If you compare it with the design we used in Chapter<nbsp/>8,
      the only change in the instance methods and instance variables is the addition of a new 
      constructor, <c>WordGuess(int)</c>, and an <c>init()</c> method.
      This constructor takes an integer parameter representing the number of players.
      The default constructor assumes that there is one player.
      Of course, this version of <c>WordGuess</c> extends the <c>ComputerGame</c> class,
      rather than the <c>TwoPlayerGame</c> class.
      Both constructors call the <c>init()</c> method to initialize the game:
    </p>
 <program language="java"><input>
 public WordGuess() { super(1); init(); }
 public WordGuess(int m) { super(m); init(); }
 public void init() {
     secretWord = getSecretWord();
     currentWord = new StringBuffer(secretWord);
     previousGuesses = new StringBuffer();
     for (int k = 0; k &lt; secretWord.length(); k++)
        currentWord.setCharAt(k,'?');
     unguessedLetters = secretWord.length();
 }
 </input></program>
    <p>
      The only other change required to convert <c>WordGuess</c> to an N-player game,
      is to rewrite its <c>play()</c> method.
      Because the new <c>play()</c> method makes use of functionality 
      inherited from the <c>ComputerGame()</c> class,
      it is actually much simpler than the <c>play()</c> 
      method in the Chapter<nbsp/>8 version:
    </p>
 <program language="java"><input>
public void play(UserInterface ui) {
  ui.report(getRules());
  ui.report(listPlayers());
  ui.report(reportGameState());
  while(!gameOver()) {
    WordGuesser p = (WordGuesser)player[whoseTurn];
    if (p.isComputer())
      ui.report(submitUserMove(p.makeAMove(getGamePrompt())));
    else {
      ui.prompt(getGamePrompt());
      ui.report(submitUserMove(ui.getUserInput()));
    }
    ui.report(reportGameState());
  } // while
}
 </input></program>
    <p>
      The method begins by displaying the game's rules and listing its players.
      The <c>listPlayers()</c> method is inherited from the <c>ComputerGame</c> class.
      After displaying the game's current state,
      the method enters the play loop.
      On each iteration of the loop,
      a player is selected from the array:
    </p>
 <program language="java"><input>
WordGuesser p = (WordGuesser)player[whoseTurn];
 </input></program>
    <p>
      The use of the <c>WordGuesser</c> variable, <c>p</c>, just makes the code somewhat more readable.
      Note that we have to use a cast operator, <c>(WordGuesser)</c>, to convert the array element,
      a <c>Player</c>, into a <c>WordGuesser</c>. Because <c>p</c> 
      is a <c>WordGuesser</c>, we can refer directly to its <c>isComputer()</c> method.
    </p>
    <p>
      If the player is a computer, we prompt it to make a move,
      submit the move to the <c>submitUserMove()</c> method,
      and then report the result.
      This is all done in a single statement:
    </p>
 <program language="java"><input>
ui.report(submitUserMove(p.makeAMove(getGamePrompt())));
 </input></program>
    <p>
      If the player is a human,
      we prompt the player and use the <c>KeyboardReader</c>'s <c>getUserInput()</c> 
      method to read the user's move.
      We then submit the move to the <c>submitUserMove()</c> method and report the result.
      At the end of the loop, we report the game's updated state.
      The following code segment illustrates a small portion of the 
      interaction generated by this <c>play()</c> method:
    </p>
 <pre>
 Current word ???????? Previous guesses GLE
 Player 0 guesses next.Sorry, Y is NOT a new letter
                       in the secret word
 Current word ???????? Previous guesses GLEY
 Player 1 guesses next.Sorry, H is NOT a new letter
                       in the secret word
 Current word ???????? Previous guesses GLEYH
 Player 2 guesses next.
 Guess a letter that you think is in the secret word: a
 Yes, the letter A is in the secret word
 </pre>
    <p>
      In this example,
      players 0 and 1 are computers and player 2 is a human.
    </p>
    <p>
    <figure xml:id="fig-wordguesser">
    <caption>The <c>WordGuesser</c> class is now a subclass of <c>Player</c>.</caption>
      <image width="40%" source="chptr09/wordguesser.png"/>
    </figure>
    </p>
    <p>
      In our new design,
      the <c>WordGuesser</c> class is a subclass of <c>Player</c> 
      (<xref ref="fig-wordguesser">Figure</xref>).
      The <c>WordGuesser</c> class itself requires no changes other than its declaration:
    </p>
 <program language="java"><input>
public class WordGuesser extends Player
 </input></program>
    <p>
      As we saw when we were discussing the <c>WordGuess</c> class,
      the <c>play()</c> method invokes <c>WordGuesser</c>'s <c>isComputer()</c> method.
      But this method is inherited from the <c>Player</c> class.
      The only other method used by <c>play()</c> is the <c>makeAMove()</c> method.
      This method is coded exactly the same as it was in the previous version of <c>WordGuesser</c>.
    </p>
    <p>
      <xref ref="lst-player">Listing</xref>
      shows the implementation of the <c>Player</c> class.
      Most of its code is very simple.
      Note that the default value for the <c>kind</c> variable is <c>HUMAN</c> 
      and the default <c>id</c> is -1, indicating the lack of an assigned identification.
    </p>
    <listing xml:id="lst-player">
      <caption>Implementation of the <c>Player</c> class.</caption>
 <program language="java"><input>
public abstract class Player  {
  public static final int COMPUTER=0;
  public static final int HUMAN=1;
  protected int id = -1;  // Id between 0 and nPlayers-1
  protected int kind = HUMAN; // Default is HUMAN

  public Player() { }
  public Player(int id, int kind) {
    this.id = id;
    this.kind = kind;
  }
  public void setID(int k) { id = k; }
  public int getID() { return id; }
  public void setKind(int k) { kind = k; }
  public int getKind() { return kind; }
  public boolean isComputer() { return kind == COMPUTER; }
  public abstract String makeAMove(String prompt); } // Player
 </input></program>
    </listing>
    <p>
      What gives <c>Player</c> its utility is the fact that it encapsulates those 
      attributes and actions that are common to all computer game players.
      Defining these elements, in the superclass,
      allows them to be used throughout the <c>Player</c> hierarchy.
      It also makes it possible to establish an association between 
      a <c>Player</c> and a <c>ComputerGame</c>.
    </p>
    <p>
      Given the <c>ComputerGame</c> and <c>Player</c> hierarchies and the many interfaces they contain,
      the task of designing and implementing a new N-player game is made much simpler.
      This too is due to the power of object-oriented programming.
      By learning to use a library of classes, such as these,
      even inexperienced programmers can create relatively sophisticated and complex computer games.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Code Reuse</title>
      <p>
        Re-using library code by extending classes and implementing 
        interfaces makes it much simpler to create sophisticated applications.
      </p>
    </principle>
    <p>
      Finally, the following <c>main()</c> method instantiates and runs an 
      instance of the <c>WordGuess</c> game in a command-line user interface (CLUI):
    </p>
 <program language="java"><input>
public static void main(String args[]) {
  KeyboardReader kb = new KeyboardReader();
  ComputerGame game = new WordGuess(3);
  game.addPlayer(new WordGuesser((WordGuess)game, 0, Player.HUMAN));
  game.addPlayer(new WordGuesser((WordGuess)game, 1, Player.COMPUTER);
  game.addPlayer(new WordGuesser((WordGuess)game, 2, Player.COMPUTER);
  ((CLUIPlayableGame)game).play(kb);
} //main()
 </input></program>
    <p>
      In this example,
      we create a three player game in which two of the players are computers.
      Note how we create a new <c>WordGuesser</c>, passing it a 
      reference to the game itself,
      as well as its individual identification number,
      and its type (HUMAN or COMPUTER).
      To run the game,
      we simply invoke its <c>play()</c> method.
      You know enough now about object-oriented design principles to recognize 
      that the use of <c>play()</c> in this context is an example of polymorphism.
    </p>
  </subsection>
</section>