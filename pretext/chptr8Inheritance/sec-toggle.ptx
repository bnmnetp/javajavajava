<section xml:id="sec-toggle">
  <title>Example: A Toggle Button</title>
  <introduction>
  <p>
    The ability to extend an existing class is one of the most  powerful features of 
    object-oriented programming.
    It allows objects to reuse code defined in the superclasses without having to redefine 
    or recompile the code.
  </p>
  <p>
    In this section, we will use inheritance to design a 
    <c>ToggleButton</c> as a <c>JButton</c> subclass. As its name suggests, 
    it will toggle its label whenever it is clicked,
    in addition to carrying out some kind of associated action. It will
    behave like a light switch, toggling between 
    <q>on</q> and <q>off</q> as it turns the lights on or off.
  </p>
</introduction>
<subsection xml:id="sec-toggle-button">
<title>The <c>ToggleButton</c> class</title>
  <p>
    By default, a <c>JButton</c> has just a single label. The main idea in our design is
    that a <c>ToggleButton</c> is a <c>JButton</c> that has two labels, as in
    <xref ref="fig-toggleuml"></xref>.
  </p>
<figure xml:id="fig-toggleuml">
  <caption> <c>ToggleButton</c> class</caption>
    <image width="50%" source="chptr09/togglebutton.png"/> 
</figure>

    <p>Note that we give it a constructor method that will allow us to provide the 
      initial values of its labels.
    Another important feature is that it implements the <c>ActionListener</c> 
    interface, which will enable it to toggle its label whenever it is clicked.
  </p>
</subsection>
<subsection>
  <title>Implementation Details</title>  
  <p>
    The complete definition of <c>ToggleButton</c> is given in 
    <xref ref="lst-togglebutton">Listing</xref>.
  </p>
  <p>
    Note how we have defined its constructor. Recall that a subclass 
    constructor must call its superclass constructor. In this case we
    call <c>super(l1)</c>,  setting the <c>JButton</c> label through the first of the two
    <c>ToggleButton</c> labels. This initializes the button's label. 
    This will be the 
    label that appears on the button when it is first displayed.
  </p>
  <!--
    Recall that the <c>JButton</c> class has a constructor method with the 
    signature <c>JButton(String)</c>, which allows us to set a <c>JButton</c>'s 
    label during instantiation.
    We need to do the same thing with one of <c>ToggleButton</c>'s two labels.
    That is, when we create a <c>ToggleButton</c>, we want to initialize its label 
    to one of its two alternative labels
    (here, <q>On</q> or <q>Off</q>).
  </p>
    -->

  <listing xml:id="lst-togglebutton">
    <caption>Definition of the <c>ToggleButton</c> class.</caption>
 <program language="java"><input>
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class ToggleButton extends JButton
                        implements ActionListener {
  private String label1;   // Toggle between two labels
  private String label2;
  public ToggleButton(String l1, String l2) {// Constructor
    super(l1);          // Use l1 as the default label
    label1 = l1;
    label2 = l2;
    addActionListener(this);
  }
  public void actionPerformed(ActionEvent e) {
    String tempS = label1;  // Swap the labels
    label1 = label2;
    label2 = tempS;
    setText(label1);
  } // actionPerformed()
} // ToggleButton
 </input></program>
</listing>
<!--
  <p>
    Because constructor methods are <em>not</em>
    inherited by the subclass,
    we want to invoke the superclass's constructor in the <c>ToggleButton()</c> 
    constructor using the <c>super</c> keyword.
    This must be done as the first statement in the <c>ToggleButton()</c> constructor.
    By passing <c>l1</c> to the super constructor we are making the first string that 
    the user gives us the default label for our <c>ToggleButton</c>. This will be the 
    label that appears on the button when it is first displayed in a <c>Component</c>.
  </p>
-->
  <p>
    Notice also in the constructor that the <c>ToggleButton</c> adds itself
    as its own <c>ActionListener</c>, so whenever it is clicked,
    its  <c>actionPerformed()</c> method will be invoked. 
  </p>
  <p>
    The <c>actionPerformed()</c> method toggles between <c>label1</c> 
    and   <c>label2</c> and uses the inherited <c>setText()</c> 
    method to set the buttons label to <c>label1</c>.
  </p>
</subsection>
<subsection>
  <title>Swapping Algorithm</title>    
  <p> 
    Swapping two values in memory is a standard programming practice used in 
    lots of different algorithms. It requires a temporary variable, as described
    in the following algorithm.
  </p>
  <algorithm>
    <title>Algorithm to Swap var1 and var2</title>    
    <program language="java"><input>
      temp = var1
      var1 = var2
      var2 = temp
    </input></program>
  </algorithm>
  <p>
    Consider the following trace of the algorithm, where var1 and var2 are integers:  
  </p>
  <pre>
    temp  var1  var2    code
    ----  ----  ----    ----
     -    5     7       0. initial values
     5    5     7       1. temp = var1
     5    7     7       2. var1 = var2
     5    7     5       3. var2 = temp
     -    7     5       4. swapped values
  </pre>
  <p>
    As you can see, the purpose of temp is to save the value of var1, which is overwritten
    by var2 in the second step of the algorithm.
  </p>
  <principle>
    <title>PROGRAMMING TIP: Swapping Values</title>
    <p>
      It is necessary to use a temporary variable whenever you are swapping two values,
      of any type,
      in memory.
      The temporary variable holds the first value while you overwrite it with the second value.
    </p>
  </principle>
  <!--
  <p>
    The first statement in <c>actionPerformed()</c> creates a temporary <c>String</c> 
    variable named <c>tempS</c> and assigns it the value of
    <c>label1</c>. Recall that label1 was the button's initial label.
    To make this example easier to follow,
    let's suppose that initially <c>label1</c> is
    <q>off</q>
    and that <c>label2</c> is
    <q>on.</q>
    After line 1 is executed,
    both <c>tempS</c> and <c>label1</c> contain
    <q>off</q>
    as their value.
    Line 2 then assigns <c>label2</c>'s value to <c>label1</c>. Now both 
    <c>label1</c> and <c>label2</c> store
    <q>on</q>
    as their values.
    In line 3 we assign <c>tempS</c>'s value to <c>label2</c>. Now <c>label2</c> stores
    <q>off</q>
    and <c>label1</c> stores
    <q>on,</q>
    and we have effectively swapped their original values.
  </p>
  <p>
    The next time we invoke <c>actionPerformed()</c>, <c>label1</c> and <c>label2</c> 
    will have their opposite values initially.
    Swapping them a second time will assign them their initial values again.
    We can continue toggling their values in this way indefinitely.
    To complete the method,
    the last statement in
<c>actionPerformed()</c> assigns <c>label1</c>'s current value as the new
<c>ToggleButton</c>'s label.
  </p>
-->
<exercises>
  <title>Self-Study Exercises</title>
  <exercise>
    <title>Swap Error</title>
    <statement>
      <p>The following program has an error in it. It's supposed to swap var1 in var2. 
        First run it to see the error. Then fix the error and run it again.
      </p>
    <program language="java" interactive=""><input>
      public class Swap {
        public static void main(String args[]) {
          String var1 = "on", var2 = "off";
          System.out.println("var1=" + var1 + " var2=" + var2);
          var1 = var2;
          var2 = var1;
          System.out.println("var1=" + var1 + " var2=" + var2);
        }
      }
    </input>
    </program>
    </statement>
  <solution>
    <program language="java" interactive="activecode"><input>
    public class Swap {
      public static void main(String args[]) {
        String var1 = "on", var2 = "off";
        String temp;
        System.out.println("var1=" + var1 + " var2=" + var2);
        temp = var1;
        var1 = var2;
        var2 = temp;
        System.out.println("var1=" + var1 + " var2=" + var2);
      }
    }
  </input>
</program>
  </solution>
</exercise>
</exercises>
</subsection>
<subsection>
  <title>The LightSwitch app</title> 

  <p>
    Now that we have seen that a <c>ToggleButton</c> toggles its label between two values,
    what about performing an associated action?  To do this,
    we will need multiple event handlers,
    one to handle the toggling of the button's label and the other to handle its associated action
    (<xref ref="fig-p204">Fig</xref>).
  </p>
  <figure xml:id="fig-p204">
    <caption>NEEDS TO BE UPDATED. The <c>ToggleButton</c> has two <c>ActionListener</c>s,
      each of which  will take
    its own independent action.</caption>
    <image width="73%" source="chptr04/p204.png"/>
  </figure>
  <p>
    In this design, one listener is associated with the <c>ToggleButton</c> itself and
    the other with the object that uses the  <c>ToggleButton</c>.
  </p>
  <!--

    <c>lightSwitch</c> has two listeners that respond to its events:
    the <c>lightSwitch</c> itself,
    as a result of the <c>actionPerformed()</c> method in its class,
    and the <c>LightSwitch</c>, as a result of <c>actionPerformed()</c> method in this class.
  </p>
-->
  <p>
    The implementation of this design is given by <c>LightSwitchTester</c> 
    (<xref ref="fig-toggletest"></xref>).

    <c>LightSwitchTester</c> extends <c>JFrame</c>  and implements the <c>ActionListener</c> interface.
    The <c>ToggleButton</c> (named  <c>lightSwitch</c>) simulate a light switch.  
    Whenever it is pressed, the <c>LightSwitchTester</c> will report whether the light is on or off
    and the <c>lightSwitch</c> will toggle its label.
  </p>
  <listing xml:id="fig-toggletest">
    <caption>Definition of the <c>LightSwitch</c> class.</caption>
 <program language="java"><input>
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class LightSwitchTester extends JFrame
                            implements ActionListener {

  private ToggleButton lightSwitch;
  
  public LightSwitchTester() {
    lightSwitch = new ToggleButton ("off","on");
    getContentPane().add(lightSwitch);
    LightSwitchTester.addActionListener(this);
  } // constructor()

  public void actionPerformed(ActionEvent e)  {
    setTitle("The light is " + lightSwitch.getText());
  } // actionPerformed()

   public static void main(String args[]) {
      JFrame f = new LightSwitchTester();
      f.setSize(200,200);
      f.setVisible(true);
   }
} // LightSwitchTester
 </input></program>
</listing>
  <p>
    When <c>lightSwitch</c> is clicked,
    the program displays the message,
    <q>The light is on,</q>
    or
    <q>The light is off,</q>
    in the program's title bar (<xref ref="fig-toggledump"></xref>).
    This is a somewhat trivial action but it illustrates that a <c>ToggleButton</c> both toggles its own label <em>and</em>
    carries out some associated action.
  </p>
  <figure xml:id="fig-toggledump">
    <caption>NEEDS TO BE UPDATED. When clicked, <c>LightSwitch</c>
    button causes
    <q>The light is on</q>
    or
    <q>The light is off</q>
    to appear in
    the window's title bar.</caption>
    <image width="73%" source="chptr04/4f23.png"/>
  </figure>
  <p>
    The <c>ToggleButton</c> design satisfies several key design principles of object-oriented
        <idx><h>object-oriented design</h></idx>
    programming.
    First and foremost,
    it uses inheritance to extend the functionality of the predefined <c>JButton</c> class<mdash/>the  extensibility principle.
    Secondly, it encapsulates a <c>ToggleButton</c>'s essential behavior within the <c>ToggleButton</c> class itself<mdash/>the modularity principle.
    Finally, it hides the mechanism by which a <c>ToggleButton</c> manages its labels<mdash/>the information-hiding principle.
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: Inheritance</title>
    <p>
      Inheritance enables you to specialize an object's behavior.
      A <c>ToggleButton</c> does everything that a <c>JButton</c> does,
      plus it can toggle its own label.
    </p>
  </principle>
  <exercises>
  <title>Self-Study Exercises</title>
    <ol>
      <li>
        <p>
          Suppose you are designing an GUI that plays a card game,
          and you want a single button that can be used both to deal the cards and to collect the cards.
          Write a code segment that creates this type of button,
          adds it to the JFrame,
          and designates the JFrame as its
<c>ActionListener</c>.
        </p>
      </li>
    </ol>
  </exercises>
  </subsection>
  
</section>