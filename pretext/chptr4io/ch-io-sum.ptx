<section xml:id="ch-io-sum">
    <title>Chapter Summary</title>
    <subsection>
      <title>Technical Terms</title>
      <p>
       <tabular>
       <row>
      <cell>abstract class</cell>
      <cell>input operation</cell>
       </row>
       <row>
      <cell>abstract interface</cell>
      <cell>input stream</cell>
       </row>
       <row>
      <cell>abstract method</cell>
      <cell>interface</cell>
       </row>
       <row>
      <cell>AWT</cell>
      <cell>layout manager</cell>
       </row>
       <row>
      <cell>binary file</cell>
      <cell>listener</cell>
       </row>
       <row>
      <cell>buffer</cell>
      <cell>model-view-controller (MVC) architecture</cell>
       </row>
       <row>
      <cell>command-line interface</cell>
      <cell>output operation</cell>
       </row>
       <row>
      <cell>container</cell>
      <cell>output stream</cell>
       </row>
       <row>
      <cell>control element</cell>
      <cell>stream</cell>
       </row>
       <row>
      <cell>event-driven programming</cell>
      <cell>Swing</cell>
       </row>
       <row>
      <cell>event loop</cell>
      <cell>text file</cell>
       </row>
       <row>
      <cell>graphical user interface (GUI)</cell>
      <cell>top-level container</cell>
       </row>
       <row>
      <cell>helper method</cell>
      <cell>user interface</cell>
       </row>
       <row>
      <cell>inheritance</cell>
      <cell>wrapper class</cell>
       </row>
      </tabular>
    </p>
</subsection>
<subsection>
 <title>Important Points</title>
    <ul>
        <li>
          <p>
            An input operation is any action that transfers data from the user to the computer's main memory via one of the computer's input devices.
            An output operation is any action that transfers data from the computer's main memory to one of the computer's output devices.
          </p>
        </li>
        <li>
          <p>
            The user interface is that part of the program that handles the input and output interactions between the user and the program.
            As an interface,
            it limits or constrains the manner in which the user can interact with the program.
          </p>
        </li>
        <li>
          <p>
            In a command-line interface, user input is taken from the keyboard,
            and the program's output is displayed on some kind of console.
          </p>
        </li>
        <li>
          <p>
            A buffer is a portion of main memory where input is held until it is needed by the program.
            Using a buffer between the keyboard and the program allows you to use the Backspace key to delete a character.
          </p>
        </li>
        <li>
          <p>
            A wrapper class contains methods for converting primitive data into objects and for converting data from one type to another.
          </p>
        </li>
        <li>
          <p>
            Designing appropriate prompts is an important aspect of designing a good user interface.
          </p>
        </li>
        <li>
          <p>
            I/O operations must watch out for certain types of I/O exceptions.
          </p>
        </li>
        <li>
          <p>
            GUI programming involves a computational model known as event-driven programming,
            which means that GUI programs react to events that are generated mostly by the user's interactions with elements in the GUI.
          </p>
        </li>
        <li>
          <p>
            Java has two packages of GUIs, the older <c>java.awt</c> and the newer <c>javax.swing</c>.
          </p>
        </li>
        <li>
          <p>
            Swing components are based on the object-oriented model-view-controller (MVC) architecture.
          </p>
        </li>
        <li>
          <p>
            The <c>extends</c> keyword is used to specify subclass/superclass relationships in the Java class hierarchy.
          </p>
        </li>
        <li>
          <p>
            A top-level container is a GUI container that cannot be added to another container;
            it can only have components added to it.
            All GUI programs must be contained in a top-level container.
          </p>
        </li>
        <li>
          <p>
            There are generally three kinds of GUI components,
            corresponding to the three main functions of a user interface:
            input, output, and control.
          </p>
        </li>
        <li>
          <p>
            Events are handled by special objects called listeners.
            A listener is a specialist that listens constantly for a certain type of event.
          </p>
        </li>
        <li>
          <p>
            An interface is a special Java class that contains only methods and constants
            (final variables).
          </p>
        </li>
    </ul>
</subsection>


<solutions scope="chapter-io" divisional="solution" project="solution" inline="solution"> 
  <title>Solutions to Self-Study Exercises</title>
  <!-- self-generated from any <exercise> that has a <solution> 
       divisional means inside <exercises>
       inline means an <exercise> that's not inside <exercises>
       project means inside <activity>
       For each type, you can list "statement hint solution answer", 
       but statement includes the whole problem and even ones that don't have solutions.
       <title> included automatically.
  -->
</solutions>
 
      

     
  

</section>
