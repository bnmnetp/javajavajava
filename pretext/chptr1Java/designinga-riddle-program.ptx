<section xml:id="designinga-riddle-program">
  <title>Designing a Riddle Program</title>
  <introduction>
    <p>
      The first step in the program-development process is making sure you understand the problem (Fig.
      <xref ref="fig_progdev"></xref>).
      Thus, we begin by developing a detailed specification,
      which should address three basic questions:
      <ul>
        <li>
          <p>
            What exactly is the problem to be solved?
          </p>
        </li>
        <li>
          <p>
            How will the program be used?
          </p>
        </li>
        <li>
          <p>
            How should the program behave?
          </p>
        </li>
      </ul>
    </p>
    <p>
      In the real world,
      the problem specification is often arrived at through an extensive discussion between the customer and the developer.
      In an introductory programming course,
      the specification is usually assigned by the instructor. So, here is our spec:
    </p>
    <p>
      <project>
      <term>Specification:</term> Design an object that will contain a riddle's question and answer. It
      should provide a way for users to set and retrieve the riddle's  question and  answer.
      </project>
    </p>
  </introduction>
  <subsection>
    <title>Problem Decomposition</title>
    <p>
      Most problems are too big and too complex to be tackled all at once.
      So the next step in the design process is to divide the  problem into parts that make the solution more manageable.
    </p>
    <p>
      In the object-oriented approach,
      a problem is divided into objects,
      where each object will play a specific role in the problem's solution.
      In effect, each object will become an expert or specialist in some aspect of the program's overall behavior.
    </p>
<!--
    <p>
      Note that there is some ambiguity here about how far we should go in decomposing a given program.
      This ambiguity is part of the design process.
      How much we should decompose the program before its parts become
      <q>simple to solve</q>
      depends on the problem we're trying to solve and on the problem solver.
    </p>
-->
    <p>
      One useful design guideline for trying to decide what objects are needed is the following:
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Looking for Nouns</title>
      <p>
        Choosing a program's objects is often a matter of looking for nouns in the problem specification.
      </p>
    </principle>
    <p>
      There are three nouns in our problem spec: riddle, question and answer. The <em>riddle</em> is a 
      complex object contains the <em>question</em> and <em>answer</em> as parts. Those parts are just 
      strings, and, fortunately, Java has a built-in <c>String</c> class that can be used to represent 
      the question and answer, 
    </p>
    <p>
      Thus, for this simple problem,
      we need only design one new type of object<mdash/>a riddle<mdash/>whose primary role will 
      be to contain and display a riddle's question and answer.
    </p>
    <p>
      Don't worry too much if our design decisions seem somewhat mysterious at this stage. This type 
      of analysis will come more easily with experience.
    </p>
  </subsection>
  <subsection xml:id="fig_ruml">
    <title>Object Design</title>
    <p>
      Once we have divided a problem into a set of cooperating objects,
      designing a Java program is primarily a matter of designing each object.  Given that 
      we will be using the built-in  <c>String</c> class for the question and answer,
      we need only design the features of our riddle object.
    </p>
    <p>
      Here are the main design questions we need to resolve:
      <ul>
        <li>
          <p>
            What <term>role</term> will the object perform in the program?
          </p>
        </li>
        <li>
          <p>
            What <term>data</term> or information will it need?
          </p>
        </li>
        <li>
          <p>
            What <term>actions</term> will it take?
          </p>
        </li>
        <li>
          <p>
            What <term>interface</term> will it present to other objects?
          </p>
        </li>
        <li>
          <p>
            What <term>information</term> will it hide from other objects?
          </p>
        </li>
      </ul>
    </p>
    <p>
      For our riddle object,
      the answers to these questions are shown in <xref ref="fig_specs">Figure</xref>.
    </p>
    <p>
    <figure xml:id="fig_specs">
    <caption>Design specifications for the Riddle object.</caption>
      <ul>
        <li>
          <p>
            Class Name: Riddle
          </p>
        </li>
        <li>
          <p>
            <term>Role:</term> To store and retrieve a question and answer
          </p>
        </li>
        <li>
          <p>
            Attributes (<term>data</term>)
            <ul>
              <li>
                <p>
                  question: A variable to store a riddle's question (private)
                </p>
              </li>
              <li>
                <p>
                  answer: A variable to store a riddle's answer (private)
                </p>
              </li>
            </ul>
          </p>
        </li>
        <li>
          <p>
            Behaviors (<term>actions</term>)
            <ul>
              <li>
                <p>
                  Riddle(): A method to set a riddle's question and answer
                </p>
              </li>
              <li>
                <p>
                  getQuestion(): A method to retrieve a riddle's question
                </p>
              </li>
              <li>
                <p>
                  getAnswer(): A method to retrieve a riddle's answer
                </p>
              </li>
            </ul>
          </p>
        </li>
      </ul>
    </figure>
    </p>
    <p>
      Note that although we talk about
      <q>designing an object,</q>
      we are really talking about designing the object's class.
      A class in Java defines the collection of objects that belong to that class.
      The class defines what <em>type</em> of object we are defining..
    </p>
    <p>
      This is similar to how we talk about real-world objects.
      For example, Seabiscuit is a horse<mdash/>that is, Seabiscuit is an object that belongs
      to the class of horses. 
      Similarly, an individual riddle,
      such as the zebra riddle, is an object that belongs to the class of riddles. If we ask what type of object it is,
      the answer would be, <q>a Riddle</q>.
    </p>
    <p>


      The role of the <c>Riddle</c> object is to serve as a container for its question and answer.
      As we learned in <xref ref="chapter-intro">Chapter</xref>,
      an <term>instance variable</term> is a named memory location that belongs to an object.
      Instance variables store the data that an object needs to perform its role. So our <c>Riddle</c>
      will need two instance variables, for the <c>question</c> and <c>answer</c> data.
<!--
      The fact that the memory location is named,
      makes it easy to retrieve the data stored there by invoking the variable's name.
      For example,
      to print a riddle's question we would say something like
      <q>print question,</q>
      and whatever is stored in <em>question</em>
      would be retrieved and printed.
    </p>
    <p>
      They correspond to what we have been calling the object's attributes.
      Deciding on these variables provides the answer to the question,
      <q>What information does the object need?</q>
-->
    </p>
    <p>
      Next we decide what actions a <c>Riddle</c> object will take.
      A useful design guideline for actions is the following:
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Looking for Verbs</title>
      <p>
        Choosing the behavior of an object is often a matter of looking for verbs in the problem specification.
      </p>
    </principle>
    <p>
      For this problem,
      the key verbs are <em>set</em> and <em>retrieve</em>.
      As specified in <xref ref="fig_specs">Figure</xref>,
      each <c>Riddle</c> object should provide some means of setting the values of its question and 
      answer variables and a means of retrieving each value.
    </p>
    <p>
      Each of the actions we have identified will be defined by a Java method.
      As you recall from <xref ref="chapter-intro">Chapter</xref>,
      a method is a named section of code that can be
      <em>invoked</em>, or called upon,
      to perform a particular action.
      In the object-oriented approach, calling a method
      (method invocation)
      is the means by which interaction occurs among objects.
    </p>
    <p>
      Calling a method is like sending a message between objects.
      For example, when we want to get a riddle's answer,
      we would call its <c>getAnswer()</c> method.
      This is like sending the message
      <q>Tell me the answer.</q>
    </p>
    <p>
      One special method, known as a <term>constructor</term>,
      is invoked when an object is first created.
      We will use the <c>Riddle()</c> constructor to give specific values to the riddle's question and answer variables.
    </p>
</subsection>
<subsection>
<title>The Object's Interface</title>
    <p>
      In designing an object,
      we must decide which methods should be made 
      available to other objects.
      This determines what <term>interface</term> the object should present and <term>what information it should hide</term> from other objects.
    </p>
    <p>
      In general, those methods needed to communicate with an object make up its interface and are designated as <term>public</term> 
      in Java. All other data and methods  should be kept <q>hidden</q> from other objects and are therefore designated 
      as <term>private</term> in Java. 
    </p>
    <p>
      For example,
      it is not necessary for other objects to know where a <c>Riddle</c> object stores its question and answer.
      The fact that they are stored in variables named <c>question</c> and <c>answer</c>, rather than variables named <c>ques</c> and <c>ans</c>, is irrelevant to other objects.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Object Interface</title>
      <p>
        An object's interface should consist of just those methods needed to use and communicate with the object.
      </p>
    </principle>
    <principle>
      <title>EFFECTIVE DESIGN:Information Hiding</title>
      <p>
        An object should hide most of the details of its implementation.
      </p>
    </principle>
    <p>
      Taken together,
      these various design decisions lead to the  specification shown in the <term>UML class diagram</term> in
      <xref ref="fig_riddleuml">Figure</xref>.
    </p>
    <p>
      A class diagram has three parts. The top part gives the name of the class (<c>Riddle</c>). The second
      part gives its instance variables, which are typically designated as private (<m>-</m>). The third part
      gives the object's methods, which in this case are all designated as public (<m>+</m>).
    </p>
    <p>
     <figure xml:id="fig_riddleuml">
      <caption>A UML class diagram representing the <c>Riddle</c> class. Its instance variables are private (<m>-</m>). Its
      methods are public (<m>+</m>).</caption>
      <image width="40%" source="chptr01/riddleuml.png"/>
     </figure>
    </p>

  </subsection>
  <subsection>
    <title>Data</title>
    <p>
      For designing the data needed for our <c>Riddle</c> object, the main question is this:
      <ul>
        <li>
          <p>
            What type of data will be used to represent the information needed by the riddle?
          </p>
        </li>
      </ul>
    </p>
    <p>
      This question is easily answered for our <c>Riddle</c> object.
      Like other programming languages, Java supports a wide range of different types of data,
      some simple and some complex. Obviously a riddle's question and answer variables 
      should be represented by Java <c>String</c> objects,
      as specified in the UML diagram (<xref ref="fig_riddleuml">Figure</xref>).
    </p>
  </subsection>
  <subsection>
    <title>Methods, and Algorithms</title>
    <p>
     For each of the object's methods, we need to figure out its task, its data, its algorithm and
      its result:
       <ul>
        <li>
          <p>
            What specific task will the method perform?
          </p>
        </li>
        <li>
          <p>
            What information (data) will it need to perform its task?
          </p>
        </li>
        <li>
          <p>
            What algorithm will the method use?
          </p>
        </li>
        <li>
          <p>
            What result will the method produce?
          </p>
        </li>
      </ul>
    </p>
    <p>
      Methods can be thought of as using data and an algorithm to perform a task and produce a result.
      The <c>Riddle</c> methods are very simple to describe:
      <tabular>
       <row>
        <cell> <term>Constructor:</term> <c>Riddle(q:String, a:String)</c></cell>
        <cell> <term>Algorithm:</term> Assign the values of <c>q</c> and <c>a</c> as
           the values of  <c>question</c> and <c>answer</c>, respectively</cell>
       </row>
       <row> 
         <cell><term>Instance method</term> <c>getAnswer():String</c></cell>
         <cell><term>Algorithm:</term> Return the Riddle's <c>answer</c></cell>
       </row>
       <row> 
          <cell><term>Instance method:</term> <c>getQuestion():String</c></cell>
          <cell><term>Algorithm:</term> Return the Riddle's <c>question</c></cell>
       </row>
      </tabular>
    </p>
    <p>
      For example, if we use our constructor to create a zebra riddle as follows:
    </p>
    <p>
      <c>Riddle(</c><q>What is black and white and red all over?</q>, <q>An embarrassed zebra</q><c>)</c>
    </p>
    <p>
      Then when we call <c>getQuestion()</c> the riddle would tell us (return) 
      <q>What is black and white and red all over?</q>  And when ask the riddle for the answer, <c>getAnswer()</c>,
      it would tell us <q>An embarrassed zebra</q>.
    </p>
  </subsection>
  <subsection>
    <title>Algorithms and Pseudocode</title>
    <p>
      An <term>algorithm</term> is a step-by-step process for performing a certain task. 
      Not all algorithms are as simple as those for our <c>Riddle</c> methods. 
    </p>
    <p>
      When writing a program, the algorithm for even a simple arithmetic problem can be more complex 
      than doing the calculation by hand. 
      For example, consider the task of calculating the sum of a list of numbers.
      If we were telling our classmate how to do this problem,
      we might just say, 
      <q>add up all the numbers and report their total.</q>
    </p>
    <p>
      But this description is far too vague and imprecise to be used in a program.
      Here's an algorithm that a program could use:
    </p>
    <algorithm>
      <program language="java"><input>
       1. Set the initial value of the sum to 0.
       2. If there are no more numbers to total, go to step 5.
       3. Add the next number to the sum.
       4. Go to step 2.
       5. Report the sum.
      </input></program>
    </algorithm>
    <p>
      Note that each step in this algorithm is simple and easy to follow.
      It would be relatively easy to translate it into Java.
    </p>
    <p>
      Because English is imprecise and often ambiguous, 
      programmers frequently write algorithms in <term>pseudocode</term>,
      a hybrid that combines English and programming language structures 
      without being too fussy about programming language syntax.
      For example,
      the preceding algorithm might be expressed in pseudocode as follows:
    </p>

    <algorithm>
     <program language="java"><input>
    sum = 0
    while (more numbers remain)
	    add next number to sum
    print the sum
     </input></program>
    </algorithm>
    <p>
      While it is unlikely that experienced programmers would need to write out 
      pseudocode for such a simple algorithm, many programming problems are quite 
      complex and require careful design to minimize errors.
    </p>
    <p>
      Another important part of designing an algorithm is to
      <em>trace</em> it<mdash/>that is,
      to step through it line by line<mdash/>on some sample data.
      For example,
      we might test the list-summing algorithm by tracing it on the list of numbers shown here: 
    </p>
    <p>
    <tabular>
      <row header="yes" bottom="medium">
        <cell>Sum</cell>
        <cell>List of Numbers</cell>
      </row>
      <row>
        <cell>0</cell>
        <cell>54 30 20</cell>
      </row>
      <row>
        <cell> 54</cell>
        <cell>30 20</cell>
      </row>
      <row>
        <cell>84</cell>
        <cell>20</cell>
      </row>
      <row>
        <cell>104</cell>
        <cell>-</cell>
      </row>
    </tabular>
    </p>
    <p>
      Initially, the sum starts out at 0 and the list of numbers contains 54, 30, and 20.
      On each pass through the algorithm,
      the sum increases by the amount of the next number,
      and the list diminishes in size.
      The algorithm stops with the correct total left under the sum column.
      While this trace didn't turn up any errors,
      it is frequently possible to find flaws in an algorithm by tracing it in this way.
    </p>
  </subsection>
  <subsection>
    <title>Coding into Java</title>
    <p>
      Once a sufficiently detailed design has been developed,
      it is time to start generating Java code.
      The wrong way to do this would be to type the entire program and then compile and run it.
      This generally leads to dozens of errors that can be both demoralizing and difficult to fix.
    </p>
    <p>
      The right way to code is to use the principle of
      <term>stepwise refinement</term>. 
      The program is coded in small stages,
      and after each stage the code is compiled and tested.
      For example,
      you could write the code for a single method and test that method before moving on to another part of the program.
      In this way,
      small errors are caught before moving on to the next stage.
    </p>
    <p>
      The code for the <c>Riddle</c> class is shown in <xref ref="lstng_riddleclass">Listing</xref>.
      Even though we have not yet begun learning the details of the Java language,
      you can easily pick out the key parts in this program:
      the instance variables <c>question</c> and <c>answer</c> of type <c>String</c>, which are used to store the riddle's data;
      the <c>Riddle()</c> constructor and the <c>getQuestion()</c> and <c>getAnswer()</c> methods make up the interface.
      The specific language details needed to understand each of these elements will be covered in this and the following chapter.
    </p>
<!--    <figure xml:id="fig_riddleclass">
      <caption>The <c>Riddle</c> class definition.</caption>
-->
<listing xml:id="lstng_riddleclass">
 <title>Riddle</title>
 <caption>The <c>Riddle</c> class definition.</caption>

<program language="java" interactive="activecode">
<input>
    public class Riddle extends Object  // Class header
    {                                   // Begin class body
       private String question;       // Instance variables
       private String answer;
       public Riddle(String q, String a) // Constructor method
       {
         question = q;
         answer = a;
       } // Riddle()
       public String getQuestion()   // Instance method
       {
        return question;
       } // getQuestion()
       public String getAnswer()     // Instance method
       {
	       return answer;
       } //getAnswer() 
    } // Riddle class                // End class body
    </input></program>

</listing>
<!--    </figure> -->
  </subsection>
  <subsection>
    <title>Syntax and Semantics</title>
    <p>
      Writing Java code requires that you know its syntax and semantics, where
      syntax refers to a program's grammar and semantics corresponds to its meaning.
    </p>
    <p>
      A language's <term>syntax</term> is the set of rules 
      that determines whether a particular statement is correctly formulated.
      An example of a Java syntax rule is that a Java statement must end with a semicolon.
      For example:
    </p>
    <c>
    sum = 0;
    sum = 0  // Syntax error, missing semicolon
    </c>
     <p>
      This is comparable to a grammatical error in English:
    </p>
    <c>
    The rain in Spain falls mainly on the plain. 
    Spain rain the mainly in on the falls plain. // Ungrammatical
    </c>
    <p>
      However, unlike in English,
      where one can still be understood even when one breaks a syntax rule,
      in a programming language the syntax rules are very strict.
      If you break even the slightest syntax rule<mdash/>e.g.,
      forget a semicolon<mdash/>the program won't work at all.
    </p>
    <p>
      Similarly, the programmer must know the <term>semantics</term>  of the language.
      The semantics of a programming statement refers to what it does <mdash/> to its
      effect on the program. For example, the meaning of the following statement,
    </p>
    <c>
    sum = 10 + 15;
    </c>
    <p>
      is to add 10 and 15 and store their sum in the variable <c>sum</c>.
    </p>
    <p>
      Learning Java's syntax and semantics is a lot like learning a foreign language.
      The more quickly you become fluent in the new language (Java),
      the better you will be at expressing solutions to interesting programming problems.
      The longer you struggle with Java's rules and conventions,
      the more difficult it will be to talk about problems in a common language.
    </p>
  </subsection>
  <subsection>
    <title>Testing, Debugging, and Revising</title>
    <p>
      Coding, testing, and revising a program is an repetitive process,
      one that may require you to repeat the different program-development stages shown in (Fig.
      <xref ref="fig_progdev"></xref>).
    </p>
    <p>
      According to the <term>stepwise-refinement principle</term>,
      the process of developing a program should proceed in small,
      incremental steps,
      where the solution becomes more refined at each step.
      However, no matter how carefuk you are,
      things can still go wrong during the coding process.
    </p>
    <p>
      A <term>syntax error</term> is an error that breaks one of Java's syntax rules.
      Such errors will be detected by the Java compiler.
      Syntax errors 
      are relatively easy to fix once you understand the compiler's error messages.
    </p>
    <p>
      As long as a program contains syntax errors,
      the programmer must correct them and recompile the program.
      Once all the syntax errors are corrected,
      the compiler will produce an executable version of the program,
      which can then be run.
    </p>
    <p>
      When a program is run,
      the computer carries out the steps specified in the program's statements and produces results.
      However, just because a program runs does not mean that its actions and results are correct.
      A running program can contain <term>semantic errors</term>,
      also called 
      <term>logic errors</term>.
      A semantic error causes the program to behave incorrectly, producing incorrect results.
    </p>
    <p>
      Unlike syntax errors, semantic errors cannot be detected automatically.
      For example,
      suppose that a program contains the following statement for calculating the area of a rectangle:
    </p>
    <c>
    area = length + width;
    </c>
    <p>
      Because we are adding length and width instead of multiplying them,
      the area calculation will be incorrect.
      Because there is nothing syntactically wrong with the expression <c>length + width</c>, 
      the compiler won't detect an error in this statement.
      Thus, the computer will still execute this statement and compute the incorrect value for the rectangle's area.
    </p>
    <p>
      Semantic errors can only be discovered by testing the program and they are sometimes very hard to detect.
      Also, just because a program appears to run correctly on one or more tests doesn't guarantee that it is correct. 
      It may just mean that it has not been adequately tested.
    </p>
    <p>
      Fixing semantic errors is known as
      <term>debugging</term> a program,
      and when subtle errors occur it can be the most frustrating part of the whole program development process.
      The various examples presented will occasionally provide hints and suggestions on how to track down
      <em>bugs</em>, or errors, in your code.
    </p>
    <p>
      One point to remember when you are trying to find a very subtle bug is that no matter how convinced you are 
      that your code is correct and that the bug must be caused by some kind of error in the computer,
      the error is almost certainly caused by your code!
    </p>
  </subsection>
  <subsection>
    <title>Writing Readable Programs</title>
    <p>
      Becoming a proficient programmer goes beyond simply writing a program that produces correct output.
      It also involves 
      developing good
      <em>programming style</em>,
      which includes how readable and understandable your code is.
      Our goal is to help you develop a programming style that satisfies the following principles:
      <ul>
       <li> 
        Readability. Programs should be easy to read and understand. Comments should be used to document and explain the program's code. 
       </li>
       <li>Clarity. Programs should employ well-known constructs and standard conventions and should avoid programming tricks 
           and unnecessarily obscure or complex code. 
       </li>
       <li>
         Flexibility. Programs should be designed and written so that they are easy to modify.
       </li>
      </ul>
    </p>
  </subsection>
</section>