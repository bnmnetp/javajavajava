<section xml:id="strings-library-string-buffer">
  <title>From the Java Library: java.lang.StringBuffer</title>
  <p>
    One problem with the <c>keywordSearch()</c> method 
    (<xref ref="lst-keywordsearch">Listing</xref>) 
    is that it is not 
    very efficient because a <c>String</c> in Java is a
    <em>read-only</em> object. This means that once it has been instantiated, a
    <c>String</c> cannot be changed.
    You cannot insert new characters or delete existing characters from it.
  </p>
  <principle>
    <title>Strings Are Immutable</title>
    <p>
      Once instantiated, a Java <c>String</c> cannot be altered in any way.
    </p>
  </principle>
  <p>
    Given this fact, how is it possible that the <c>resultStr</c> 
    in the <c>keywordSearch()</c> ends up with the correct value? 
    The answer is that every time we assign a new value to <c>resultStr</c>, 
    Java has to create a new <c>String</c> object.
    <xref ref="fig-orphan">Figure</xref> illustrates the process.
    Thus, given the statement
  </p>
  <program language="java"><input>
   resultStr = resultStr + ptr + " ";
  </input></program>
  <p>
    Java will evaluate the right-hand side,
    which creates a new <c>String</c> object whose value would 
    be the concatenation of the right-hand-side elements, 
    <c>resultStr + ptr + " "</c> (Part (a) of <xref ref="fig-orphan">Figure</xref>).
    It would then assign the new object as the new referent of <c>resultStr</c> 
    (Part (b) of <xref ref="fig-orphan">Figure</xref>).
    This turns the previous referent of <c>resultStr</c> into an
    <term>orphan object</term> <mdash/>that is,
    into an object that no longer has any references to it.
  </p>
    <figure xml:id="fig-orphan">
    <image width="50%" source="chptr07/p359f1.png"/>
    <caption>Evaluating resultStr = resultStr + ptr + " " creates an orphan object that must be
    garbage collected.</caption>
  </figure>
  <p>
    Java will eventually dispose of these orphaned objects,
    removing them from memory in a process known as
    <term>garbage collection</term>.
    However, creating and disposing of objects is a task that consumes 
    the computer's time.
  </p>
  <p>
    The fact that this assignment statement occurs within a loop 
    means that several new objects are created and later garbage collected.
    Because object creation is a relatively time-consuming and 
    memory-consuming operation,
    this algorithm is somewhat wasteful of Java's resources.
  </p>
  <p>
    Of course, except for the inefficiency of doing it this way,
    no real harm is done by this algorithm used in 
    the <c>keywordSearch()</c> method.
    Java's garbage collector will automatically reclaim the memory used by the orphaned object.
    However, this algorithm does consume more of Java's resources 
    than other algorithms we might use.
  </p>
  <principle>
    <title>Automatic Garbage Collection</title>
    <p>
      An object that has no reference to it can no longer be used in a program.
      Therefore, Java will automatically get rid of it.
      This is known as <term>garbage collection</term>.
    </p>
  </principle>
  <p>
    A more efficient way to write the <c>keywordSearch()</c> method would 
    make use of a <c>StringBuffer</c> (<xref ref="fig-strbuffer">Figure</xref>) to store 
    and construct the <c>resultStr</c>. 
    Like the <c>String</c> class, the <c>java.lang.StringBuffer</c> class also represents 
    a string of characters. However, unlike the <c>String</c> class,
    a <c>StringBuffer</c> can be modified,
    and it can grow and shrink in length as  necessary.
  </p>
  <figure xml:id="fig-strbuffer">
      <image width="50%" source="chptr07/p360f1.png"/> 
      <caption>The <c>java.lang.StringBuffer</c> class.</caption>
  </figure> 
  <p>
    The <c>StringBuffer</c> class contains several of the same kind of 
    methods as the <c>String</c> class,
    for example, <c>charAt()</c> and <c>length()</c>. But it also contains methods 
    that allow characters and other types of data to be inserted into a string,
    such as <c>append()</c>, <c>insert()</c>, and <c>setCharAt()</c>. 
    Most string-processing algorithms use a <c>StringBuffer</c> instead of <c>String</c> 
    as their preferred data structure.
  </p>
  <principle>
    <title>PROGRAMMING TIP: StringBuffer</title>
    <p>
      A <c>StringBuffer</c> should be used instead of a <c>String</c> for any 
      task that involves modifying a string.
    </p>
  </principle>
  <p>
    The <c>StringBuffer</c> class provides several methods that are useful for string processing.
    The constructor method, <c>StringBuffer(String)</c>, makes it easy to 
    convert a <c>String</c> into a <c>StringBuffer</c>. Similarly,
    once you are done processing the buffer,
    the <c>toString()</c> method makes it easy to convert a <c>StringBuffer</c> 
    back into a <c>String</c>.
  </p>
  <p>
    The typical way to use a <c>StringBuffer</c> is shown in the following 
    revised version of the <c>keywordSearch()</c> method:
  </p>
  <listing xml:id="lst-keywordsearch-rev">
    <caption>The revised <c>keywordSearch()</c> mrthod.</caption>
 <program language="java"><input>
public String keywordSearch(String s, String keyword) 
{
                                   // Create StringBuffer
  StringBuffer resultStr = new StringBuffer();
  int count = 0;
  int ptr = s.indexOf(keyword);
  while (ptr != -1) {
    ++count;
    resultStr.append(ptr + " ");  // Append to buffer
    ptr = s.indexOf(keyword, ptr + 1);
  }
  resultStr.insert(0, count + ": ");
  return resultStr.toString(); // Convert buffer to String
} // keywordSearch()
 </input></program>
 </listing>
  <p>
    We declare <c>resultStr</c> as a <c>StringBuffer</c>
    instead of a <c>String</c>. Then,
    instead of concatenating the <c>ptr</c> and reassigning the <c>resultStr</c>, 
    we <c>append()</c> the <c>ptr</c> to the <c>resultStr</c> for each 
    occurrence of a keyword.
    Similarly, after the loop exits,
    we <c>insert()</c> the <c>count</c> at the front (index 0) of 
    the <c>resultStr</c>. Finally,
    we convert <c>resultStr</c> into a <c>String</c> by using 
    the <c>toString()</c> method before returning the method's result.
  </p>
  <p>
    One advantage of the <c>StringBuffer</c> class is that there are 
    several versions of its <c>insert()</c> and <c>append()</c> methods.
    These make it possible to insert any type of data <mdash/><c>int</c>, <c>double</c>,
    <c>Object</c>, and so on <mdash/>into a <c>StringBuffer</c>. The method 
    itself takes care of converting the data into a string for us.
  </p>
  <p>
    To summarize, <c>String</c> objects in Java are <em>immutable</em>.
    So  when a <c>String</c> is <q>modified,</q>
    this really means that a new <c>String</c> object is created and the 
    old <c>String</c> object must be garbage collected.
    This is somewhat inefficient,
    especially if done repeatedly within a loop.
    To avoid these inefficiencies,
    use a <c>StringBuffer</c> instead of a <c>String</c> in such contexts.
  </p>

  <exercises>
    <title>Self-Study Exercise</title>

    <exercise label="keyword-search-2">
    <title>Revised Keyword Search</title>
      <statement><p>Run the code below to test the revised <c>keywordSearch()</c> method.
        Add additional calls to <c>keywordSearch()</c>.
              </p></statement>
      <program language="java" interactive="activecode"><input>
   public class KeywordSearch {
      public String keywordSearch(String s, String keyword) 
      {
                                        // Create StringBuffer
        StringBuffer resultStr = new StringBuffer();
        int count = 0;
        int ptr = s.indexOf(keyword);
        while (ptr != -1) {
          ++count;
          resultStr.append(ptr + " ");  // Append to buffer
          ptr = s.indexOf(keyword, ptr + 1);
        }
        resultStr.insert(0, count + ": ");
        return resultStr.toString(); // Convert buffer to String
      } // keywordSearch()

        public static void main(String args[]) {
          KeywordSearch searcher = new KeywordSearch();
          String result = searcher.keywordSearch("this is a test","is");
          System.out.println(result);
        }
    }
      </input></program>
    <solution>
    <program language="java"><input>
        public static void main(String args[]) {
          KeywordSearch searcher = new KeywordSearch();
          String result = searcher.keywordSearch("this is a test","is");
          System.out.println(result);
          result = searcher.keywordSearch("able was i ere i saw elba","a"); 
          System.out.println(result);
          result = searcher.keywordSearch("this is a test","taste"); 
          System.out.println(result);        
        } 
    </input></program>
    </solution>        
    </exercise>
  </exercises>   
</section>