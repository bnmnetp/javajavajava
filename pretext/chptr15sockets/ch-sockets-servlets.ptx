<section xml:id="jsp-and-servlets">
  <title>Java Server Pages (JSP) and Servlets</title>
  <introduction>
    <p>
      In this chapter we have been discussing the client/server model of computing.
      Thus far we have learned how to implement client/server applications using socket connections between programs running on different computers.
      Because it requires the programmer to directly create and manage the socket protocol,
      this socket-level approach is a low-level approach.
      It is important to know about sockets and how they are used,
      but most client/server applications are programmed at a much higher level by using Java library classes.
    </p>
    <p>
      Our focus in this section will be to give you a brief sense of how Java programs can be integrated into the Web pages.
      We will discuss two approaches:
      <em>Java Server Pages (JSP)</em>
      and <em>Java servlets</em>.
      As Web-based approaches,
      both of these require the use of HTML (HyperText Markup Language) code,
      the language that is used for coding Web pages.
      This means that in order to write your own servlets and JSPs you would really have to learn a little about HTML code.
      Fortunately,
      learning HTML code is not difficult and although it doesn't fit within the scope of this book,
      you can easily find books or Web sites that cover basic HTML coding.
    </p>
    <p>
      In order for servlets and JSPs to work,
      they must be run in a Web server that is specially configured to understand Java code.
      <url href="https://tomcat.apache.org/tomcat-8.5-doc/setup.html">Apache Tomcat</url> 
      is a simple web server that you can download and install for this purpose. 
      Note that the current software industry does not use JSP and servlets as much these days.
      <url href="https://spring.io/" visual="">Spring</url> is a popular Java web application framework that is used instead.
      
    </p>
  </introduction>
  <subsection>
    <title>Java Server Pages</title>
    <p>
      A Java Server Page (JSP) is a Web page that contains small snippets of Java code.
    The Java code on a JSP embedded within <c>&lt;% ... %&gt;</c> brackets and interspersed among a page's HTML tags.
      The Java code can extend over one or more lines.
      <xref ref="list-jspcode">Listing</xref>
      shows the complete sourcecode for a simple JSP.
    </p>
    <listing xml:id="list-jspcode">
      <caption>A simple JavaServer Page (JSP).</caption>
 <program language="java"><input>
&lt;html>&lt;head>&lt;title>Very Simple JSP Example&lt;/title>&lt;/head>
&lt;body bgcolor="white">
&lt;h1>Very Basic JSP&lt;/h1>
Current time: &lt;%= new java.util.Date() %&gt;
&lt;br>&lt;br>
Reload this page to watch the greeting change.
&lt;br>&lt;br>&lt;b>
&lt;!-- including lines of Java code in an HTML page -->
&lt;%
   int um = (int)( Math.random() * 5 );
   switch ( um )
   {
      case 0: out.println("Welcome"); break;
      case 1: out.println("Bienvenidos"); break;
      case 2: out.println("Bienvenue"); break;
      case 3: out.println("Bienvenuti"); break;
      case 4: out.println("Willkommen"); break;
      default: out.println("Huh? " + um);
   }
   out.println("&lt;br>");
%&gt;
&lt;/b>
&lt;/body>
&lt;/html>
 </input></program>
</listing>
    <p>
      In this example we see two uses of Java code.
      In the first case,
      a JSP expression tag is used to display the current date on the Web page:
    </p>
 <program language="java"><input>
Current time: &lt;%= new java.util.Date() %&gt;
 </input></program>
    <p>
      A JSP expression element begins with <c>&lt;%=</c> and ends with <c>%&gt;</c>. The expression contained within the tag is evaluated,
      converted into a Java <c>String</c> and inserted into the Web page.
      In this case the <c>Date</c> object is evaluated and its string value is displayed on the Web page (Fig.
      <xref ref="fig-jspscreen"></xref>).
    </p>
    <figure xml:id="fig-jspscreen">
      <caption>A screen shot of a JSP.</caption>
      <image width="73%" source="chptr15/jspscreen.jpg"/>
    </figure>
    <p>
      In the second case, a <em>scriptlet</em>
      of Java code uses the <c>Math.random()</c> method to display a random greeting on the Web page.
      A <term>scriptlet</term> extends over several lines and is contained within the
<c>&lt;%...%&gt;</c> tag (Fig.
      <xref ref="fig-jspcode"></xref>).
      Note the use of the output statement, <c>out.println()</c>. The <c>out</c> object is a built-in output stream.
      Anything written to <c>out</c> will be transmitted as part of the HTML code that is sent to the Web page.
      In this case,
      one of the greetings is displayed each time the page is reloaded.
    </p>
    <p>
      Obviously, this simple example only scratches the surface of what you can do with JSP. If you want to learn more about JSP, there are many helpful online tutorials available,
      such as <url href="https://www.tutorialspoint.com/jsp/index.htm" visual="">https://www.tutorialspoint.com/jsp/index.htm</url>. However,
      remember that in order to experiment with JSP, it will be necessary to have access to a JSP-aware Web server either on your own computer or on one provided by your service provider.
    </p>
  </subsection>
  <subsection>
    <title>Java Servlets</title>
    <p>
      A Java <em>servlet</em> is another high-level approach to developing client/server applications.
      A <term>servlet</term> is a Java program that runs on a Web server and processes Web pages using the HyperText Transfer Protocol (HTTP).
      In a Web application, the browser serves as the client.
    </p>
    <p>
      Many URLs that we access on the web are pure HTML files that are simply transmitted 
      back to the browser by the Web server. For example, the following web page:
      <!-- For example,
      the URL for a simple HTML document on the author's Web site is:
    </p>
 <program language="java"><input>
http://www.cs.trincoll.edu/&#126;ram/jjj/hello.html
 </input></program>
      If you type that URL into a Web browser,
      the Web server at
<c>www.cs.trincoll.edu</c> would transmit the following text file to your browser,
      which would then render and display the document.
-->
</p>
 <program language="java"><input>
&lt;HTML>
&lt;HEAD>
   &lt;TITLE>Very Simple HTML Document&lt;/TITLE>
&lt;/HEAD>
&lt;BODY>
    &lt;CENTER>&lt;H1>Hello&lt;/H1>&lt;/CENTER>
&lt;/BODY>
&lt;/HTML>
 </input></program>
    <p>
      If we want the server to do some processing and submit the results of that processing to the browser,
      we could use a Java servlet.
      A servlet can perform some processing task and return the results of that task to the browser in the form of an HTML document.
    </p>
    <p>
      The difference between a Java servlet and a Java applet is that \marginpar{Servlets vs.
      Applets} an applet performs all of its processing on the client side of the client/server connection.
      A servlet performs its processing on the server side.
      When you load a Java applet into a browser,
      the Web server downloads the applet's bytecode into the browser.
      The browser then runs the byte code, assuming, of course,
      it is equipped with a plugin for the Java Virtual Machine (JVM).
      When you access a Java servlet from a browser,
      the Web server performs some computation and transmits just the results to the browser.
    </p>
    <p>
      There are several advantages of servlets over applets.
      First, servlets cut down significantly on the amount of data that has to be transmitted to the browser.
      Second, because the servlet returns an HTML-encoded page,
      there are many fewer platform-related problems.
      All browsers can interpret HTML code,
      but not all browsers have the right plugins for interpreting Java applets.
      Third, servlets are not subject to the same security and privacy restrictions as Java applets, which,
      as we saw earlier in the chapter,
      must be run as untrusted code.
      Finally, Java servlets can directly access large databases and other resources that are stored on the server.
      Access to such resources via an applet would be very difficult and inefficient.
    </p>
    <p>
      So, servlets have many advantages over applets.
      Because of these advantages they have quickly become an industry standard for developing client/server applications on the Web.
    </p>
  </subsection>
  <subsection>
    <title>A Simple Servlet Example</title>
    <p>
      To illustrate the difference between a Java servlet and a simple HTML page,
      <xref ref="list-hiservlet">Figure</xref>
      shows a servlet that creates a Web page that says
      <q>Hello.</q>
      As you can see, a servlet is a Java program.
      In addition to libraries that you are already familiar with,
      such as <c>java.io</c>, it also imports names from two new libraries: <c>javax.servlet</c> and <c>javax.servlet.http</c>. The program defines a single class,
      the <c>HelloServlet</c> class,
      which is a subclass of <c>HttpServlet</c>, the standard superclass for all Java servlets.
    </p>
    <listing xml:id="list-hiservlet">
      <caption>A simple Java servlet.</caption>
 <program language="java"><input>
import java.io.*;
import java.text.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class HelloServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
        throws IOException, ServletException
    {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.println("&lt;HTML>");
        out.println("&lt;HEAD>");
        out.println("&lt;TITLE>Simple Servlet&lt;/TITLE>");
        out.println("&lt;/HEAD>");
        out.println("&lt;BODY>");
        out.println("&lt;H1> Hi, from a Java Servlet.&lt;/H1>");
        out.println("&lt;/BODY>");
        out.println("&lt;/HTML>");
    }
  }
 </input></program>
</listing>
    <p>
      The servlet defines the <c>doGet()</c> method.
      This is a method that is defined in the <c>HttpServlet</c> superclass.
      Our <c>HelloServlet</c> is overriding that method.
      In general, Web browsers make two types of requests when they request a Web page,
      a <term>get</term> or a <term>post</term>.
      We won't go into the differences between these requests.
      The result in either case is that the Web server will respond to the request by transmitting some text data to the browser.
      When a browser makes a get request,
      the server will automatically call the servlet's <c>doGet()</c> method.
      That's why we have to override it.
      The <c>HttpServlet</c> class also has a default <c>doPost()</c> method,
      which is called automatically to handle <em>post</em> requests.
    </p>
    <p>
      Note the two parameters in the <c>doGet()</c> method:
      the <c>HttpServletRequest</c> and the <c>HttpServletResponse</c>. The <c>doPost()</c> method has the same two parameters.
      These are the objects that are used to hold the data that are communicated between the client and the server.
      When the client (browser) makes a get request,
      the <c>HttpServletRequest</c> objects hold the data contained in the request.
      These data might include data that a user has typed into an HTML form.
      We will see an example of how to extract these data in the next section.
    </p>
    <p>
      The <c>HttpServletResponse</c> object is where the servlet will write its response.
      As you can see from examining the code,
      the <c>HttpServletResponse</c> object has an associated output stream,
      a <c>PrintWriter</c>, and it is a simple matter to write text to that output stream.
      Note that the text we write is HTML code that is practically identical to the code contained in the previous HTML example.
    </p>
  </subsection>
  <subsection>
    <title>The Nim Servlet</title>
    <p>
      The simple servlet in the preceding section illustrates how the servlet communicates with the client<mdash/>by writing HTML code to the
<c>HttpServletResponse</c> object.
      Let's now look at an example that uses two-way communication between the client and server.
      To keep the example simple,
      we will revisit once again on our One Row Nim game.
      In this application the servlet will manage the One Row Nim game and will play against a human player,
      who will access the game through a Web browser.
    </p>
    <figure xml:id="fig-nimscreen">
      <caption>The interface for the Nim servlet.</caption>
      <image width="73%" source="chptr15/nimscreen.jpg"/>
    </figure>
    <p>
      The browser interface for this version of the game is shown in <xref ref="fig-nimscreen">Figure</xref>.
      As you can see, it is a simple Web page.
      The sticks in this instance are replaced by pennies.
      In addition to reporting the total number of pennies left,
      the page displays images of pennies.
      This Web page itself is organized as a simple HTML form,
      which contains one text field for the user's input.
      Each time the user hits the RETURN key in the text field,
      the user's input is transmitted to the servlet where it is processed.
      The servlet then transmits a new page to the user's browser,
      which shows the updated state of the game.
    </p>
    <p>
      Let's now look at the servlet program itself,
      whose code is shown in <xref ref="list-nimservlet">Listing</xref>.
      This servlet program is quite a bit longer than the simple hello server,
      but it is not really any more complex or difficult.
      The <c>NimServlet</c> extends the <c>HttpServlet</c> superclass and overrides the <c>doGet()</c> method.
      Note that it also overrides the <c>doPost()</c> method,
      by simply having that method call the <c>doPost()</c> method.
      So this servlet will work for both <em>get</em>
      and <em>post</em> requests.
    </p>
    <listing xml:id="list-nimservlet">
      <caption>Java code for the <c>NimServlet</c></caption>
 <program language="java"><input>
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class NimServlet extends HttpServlet {
    private OneRowNim nim = null;
    private NimPlayer nimPlayer = null;
    public void doPost(HttpServletRequest request,
                       HttpServletResponse response)
      throws IOException, ServletException
    {
        doGet(request, response);
    }
   
    public void doGet(HttpServletRequest request, HttpServletResponse response)
    throws IOException, ServletException
    {
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
      HttpSession session = request.getSession(true);
      out.println("&lt;html>");
      out.println("&lt;body>");
      out.println("&lt;head>");
      out.println("&lt;title>Simple Nim Game&lt;/title>");
      out.println("&lt;/head>");
      out.println("&lt;body>");
      out.println("&lt;center>&lt;h1>One Row Nim&lt;/h1>&lt;/center>");
      out.println("&lt;center>&lt;h3>The Rules&lt;/h3>");
      out.println("A random number of pennies is thrown on the table.&lt;BR>");
      out.println("Two players alternate making moves,&lt;BR>");
      out.println("picking up between 1 and 3 pennies on each move.&lt;BR>");
      out.println("The player who picks up the last penny loses.&lt;BR>&lt;BR>");
      if (nim == null) {
        nim = new OneRowNim(7 + (int)(Math.random() * 11));
        nimPlayer = new NimPlayer(nim);
        out.println("&lt;h4>You go first!&lt;/h4>&lt;/center>");
      } else {
        int userTakes = Integer.parseInt(request.getParameter("pickup"));
        if (!nim.takeSticks(userTakes)) {
          out.println("&lt;h4>&lt;font color='red'>Woops. That's an illegal move!. Try again. &lt;/font>&lt;h4>");
        } else if (!nim.gameOver()) {
          nim.changePlayer();
          out.println("&lt;h4>So, you took &lt;font color='blue'>" + userTakes + "&lt;/font>&lt;BR>");
          out.println("That leaves me with &lt;font color='blue'>" + nim.getSticks() + "&lt;/font>&lt;BR>");
          int iTake = nimPlayer.move();
          out.println("OK. I take &lt;font color='red'>" + iTake + " &lt;/font>pennies.&lt;BR>&lt;/h4>");
          nim.takeSticks(iTake);
          nim.changePlayer();
        } // if not gameover
      } // else nim != null
      if (!nim.gameOver()) {
        if (nim.getPlayer() == 1)
          out.println("&lt;center>&lt;h3>Who's Turn: &lt;font color='magenta'> Your turn &lt;/font>&lt;h3>&lt;/center>");
        else
          out.println("&lt;center>&lt;h3>Who's Turn: &lt;font color='magenta'> My turn &lt;/font>&lt;h3>&lt;/center>");
        out.println("&lt;center>&lt;h3>Pennies Left: &lt;font color='red'>" + nim.getSticks() + "&lt;/font>&lt;h3>&lt;/center>");
        out.println("&lt;center>");
        for (int k=0; k &lt; nim.getSticks(); k++)
          out.println("&lt;img src='http://xroads.virginia.edu/&#126;CAP/LINCOLN/cent.jpg' width='25' height='25'>");
        out.println("&lt;/center>&lt;br>");
        out.println("&lt;center>");
        out.println("&lt;form action='/jjj3e/NimServlet' method='POST'>");
        out.println("&lt;table border='0'>");
        out.println("&lt;tr>&lt;td>How many do you pickup?: &lt;/td>" +
            "&lt;td>&lt;input type='text' name='pickup' value='0'>&lt;/td>&lt;/tr>");
        out.println("&lt;/table>");
        out.println("&lt;/center>");
        out.println("&lt;/form>");
      } else {
        out.println("&lt;h3>&lt;font color='red'>Game over!&lt;/font>&lt;h3>");
        if (nim.getPlayer() == 1)
          out.println("&lt;center>&lt;h4>And the winner is : &lt;font color='magenta'> Me.&lt;/font>&lt;h4>&lt;/center>");
        else
          out.println("&lt;center>&lt;h4>And the winner is: &lt;font color='magenta'> You.&lt;/font>&lt;h4>&lt;/center>");
        out.println("&lt;center>&lt;h4>&lt;font color='magenta'> Nice game!&lt;/font>&lt;h4>&lt;/center>");
        out.println("&lt;center>&lt;h4>To play again, just reload the page.&lt;h4>&lt;/center>");
        nim = null;
      } // else game over
      out.println("&lt;/body>");
      out.println("&lt;/html>");
    }// doGet
 </input></program>
    </listing>
    <p>
<c>NimServlet</c> uses two other objects:
      a <c>OneRowNim</c> object and a <c>NimPlayer</c> object.
      You should be familiar with these from Chapter<nbsp/>8,
      so we won't go over their internal details here.
      The
<c>OneRowNim</c> object manages the playing of the game and the
<c>NimPlayer</c> object acts as a computer-based player of the game.
      Note that variable references for these two objects are declared in the beginning of the class definition,
      but the objects themselves are declared within the <c>doGet()</c> method.
    </p>
    <p>
      One of the tricky parts of <c>NimServlet</c> is how we declare the <c>OneRowNim</c> object.
      As you might already know,
      the HTTP protocol is said to be a
      <em>stateless</em> protocol,
      which means that each time a browser submits a request to a Web server,
      the Web server sees the request as a completely independent communication.
      The server does not, in and of itself,
      maintain an internal state that keeps track of a series of transactions with a particular browser session.
      For example, when you are shopping for books on Amazon,
      each time you go to a new page,
      the Amazon web server treats that request as a completely independent action.
      Web applications use various techniques to get around the stateless nature of the HTTP protocol.
      One technique is to use <em>cookies</em>
      to record the progress of a session.
      A <term>cookie</term> is a small text file containing data that the server uses to keep track of a user's session.
      Data that identifies the user and the state of the transaction<mdash/>for example,
      buying a book<mdash/>are passed back and forth between the browser and the server each time the user visits the Amazon Web site.
    </p>
    <p>
      Java's servlet library contains methods and objects that support the use of cookies.
      But rather than use cookies,
      we will use the <c>OneRowNim</c> object itself to keep track of the state of the Nim game.
      The first time the user submits a request to Nim servlet<mdash/>that is,
      when the user first visits the servlet's URL<mdash/>the servlet will create an instance of the <c>OneRowNim</c> object.
      Creating a <c>OneRowNim</c> object will have the effect of initializing the game,
      including the creation of a <c>NimPlayer</c> to play the server's moves.
      The <c>OneRowNim</c> object will persist throughout the playing of the game and will handle all subsequent user's move.
      When the game is over,
      the
<c>NimServlet</c> will,
      in effect,
      dispose of the <c>OneRowNim</c> object by setting its reference to <c>null</c>. Thus,
      in outline form,
      the code for creating and disposing of the <c>OneRowNim</c> object goes as follows:
    </p>
 <program language="java"><input>
// First request: Start a new Nim game
if (nim == null) {
   nim = new OneRowNim(7 + (int)(Math.random() * 11));
   nimPlayer = new NimPlayer(nim);
// Code deleted here.
else {
   // Code for playing the game goes here.}
if (!nim.gameOver()) {
  // Code for playing the game goes here.} else {
   // Code deleted here.
  nim = null;
}
 </input></program>
    <p>
      Those places where code has been deleted in this segment would contain Java code for responding to the user's input and deciding how many pennies to take.
    </p>
    <p>
      Unlike the <c>HelloServlet</c>, the <c>NimServlet</c> accepts input from the client.
      The code for handling user input is as follows:
    </p>
 <program language="java"><input>
int userTakes =
        Integer.parseInt(request.getParameter("pickup"));
 </input></program>
    <p>
      This statements reads the user's input from the text field on the Web page by using the <c>request.getParameter()</c> method.
      This is one of the public methods of the <c>HttpServletRequest</c> object.
      The name of the text field is 'pickup', which is provided as an argument in this method call.
      As we noted above,
      the text field itself is on element of the HTML form contained in the servlet's Web page.
      The HTML code for creating the form element is also generated by the servlet:
    </p>
 <program language="java"><input>
out.println("&lt;form action='/jjj3e/NimServlet' method='POST'>");
out.println("&lt;table border='0'>");
out.println("&lt;tr>&lt;td>How many do you pick up?: &lt;/td>" +
  "&lt;td>&lt;input type='text' name='pickup' value='0'>&lt;/td>&lt;/tr>");
 </input></program>
    <p>
      Unless you already know something about HTML, you won't completely understand this code.
      We will give a minimal explanation.
      In HTML, a text field is known as a input element of type 'text'. Note that this code segment names the element 'pickup', which allows our program to refer to it by that name.
    </p>
    <p>
      The remaining details in the servlet have to do with managing the game and repeat concepts that were covered in Chapter<nbsp/>8.
      We won't repeat them here,
      other than to note that any output sent to the client must be in the form of HTML statements,
      hence the appearance throughout the code of HTML tags,
      which are the elements in the angle brackets.
    </p>
  </subsection>
 <!-- BH put download link in intro instead:
   <subsection>
    <title>Setting Up and Using Java Servlets</title>
    <p>
      Java servlets can only run on a Web server that is specially configured to interpret them.
      To experiment with the servlets discussed in this chapter,
      just go to the following URL:
    </p>
 <program language="java"><input>
http://www.cs.trincoll.edu/&#126;ram/jjj/servlets
 </input></program>
    <p>
      That web page contains links to both the <c>HelloServlet</c> and <c>NimServlet</c>. It also contains links to Web sites where you can learn more about creating servlets.
      In order to create and run your own servlets,
      you will need access to a Web server that has been specially configured to run servlets.
      There are several very good free servers that support Java servlets.
      You can download one of these onto your own computer and follow the directions on how to set it up.
      Links to Java servlet sites are also provided on our servlets page.
    </p>
</subsection>
-->
</section>