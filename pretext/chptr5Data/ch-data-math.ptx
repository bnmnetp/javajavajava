<section xml:id="ch5-math">
  <title>From the Java Library: <c>java.lang.Math</c></title>
  <introduction><p>
    The <c>java.lang.Math</c> class provides many common 
    mathematical functions 
    that will prove useful in performing numerical computations.
    As an element of the <c>java.lang</c> package,
    it is included implicitly in all Java programs.
    <xref ref="tab-math">Table</xref> lists some of the most commonly used <c>Math</c> class methods.
  </p>
  <table xml:id="tab-math">
    <tabular>
       <row bottom="minor" left="minor">
        <cell>Method</cell>
        <cell>Description</cell>
        <cell>Examples</cell>
      </row>
      <row>
        <cell><em>int abs(int  x)</em></cell>
        <cell><em>Absolute  value  of x</em></cell>
        <cell><em>if  x  <m>></m>=  0  abs(x)  is  x</em></cell>
      </row>
      <row>
        <cell><em>long abs(long  x)</em></cell>
        <cell></cell>
        <cell><em>if  x  <m>\lt</m>  0  abs(x)  is  <m>-</m>x</em></cell>
      </row>
      <row>
        <cell><em>float abs(float x)</em></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row>        
        <cell><em>int ceil(double  x)</em></cell>
        <cell><em>Rounds  x  to  the  smallest</em></cell>
        <cell><em>ceil(8.3)  is  9</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell><em>integer  not  less  than  x</em></cell>
        <cell><em>ceil(<m>-</m>8.3)  is  <m>-</m>8</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row>
        <cell><em>int floor(double  x)</em></cell>
        <cell><em>Rounds  x  to  the  largest</em></cell>
        <cell><em>floor (8.9)  is  8</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell><em>integer  not  greater  than  x</em></cell>
        <cell><em>floor(<m>-</m>8.9)  is  <m>-</m>9</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row>
        <cell><em>double log(double x)</em></cell>
        <cell><em>Natural  logarithm  of x</em></cell>
        <cell><em>log (2.718282)  is  1.0</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row>
        <cell><em>double pow(double x, double  y)</em></cell>
        <cell><em>x  raised  to  the  y power  (<m>x^y</m>)</em></cell>
        <cell><em>pow(3, 4 )  is  81.0</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell><em>pow(16.0, 0.5)  is  4.0</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row>
        <cell><em>double random()</em></cell>
        <cell><em>Generates  a  random</em></cell>
        <cell><em>random()  is  0.5551</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell><em>number in  the  interval   [0,1)</em></cell>
        <cell><em>random() is 0.8712</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row>
        <cell><em>long round(double  x)</em></cell>
        <cell><em>Rounds  x  to  an  integer</em></cell>
        <cell><em>round(26.51)  is  27</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell><em>round (26.499)  is  26</em></cell>
      </row>
      <row>
        <cell></cell>
        <cell></cell>
        <cell></cell>
      </row>
      <row bottom="minor">
        <cell><em>double sqrt(double  x)</em></cell>
        <cell><em>Square root of x</em></cell>
        <cell><em>sqrt(4.0) is  2.0</em></cell>
      </row>
    </tabular>
  </table>

</introduction>

  <subsection xml:id="static-elements">
  <title>Static Class Elements</title>
  <p>
    The <c>Math</c> is somewhat exceptional in terms of what we've already
    learned about Java classes. Here is an outline of how it is defined:
  </p>
  <program language="java"><input>
      public final class Math    // Final, can't subclass
      {   private Math() {}      // Private, can't invoke
          ...
          public static native double sqrt(double a)
                throws ArithmeticException;
      }
  </input></program>
  <p>
    Notice that the class is declared <c>public final</c>. This means that it can 
    be accessed (<c>public</c>) but it cannot be extended or subclassed (<c>final</c>).
    Notice that its default constructor is declared <c>private</c>. This prevents this 
    class from being instantiated <mdash/> i.e., there can be no <c>Math</c> objects.
  </p>
  <p>
    The idea of a class that cannot be subclassed and cannot be instantiated 
    may seem a little strange at first.
    The justification for it here is that it provides a convenient 
    and efficient way to introduce helpful math functions into the Java language.
  </p>
  <p>
    Notice also that the <c>sqrt()</c> method is declared  <c>static</c>, as are all <c>Math</c>
    class methods:
  </p> 
  <program language="java"><input>
          public static native double sqrt(double a)
                throws ArithmeticException;
  </input></program>  

  <p>
    This means that when we want to use a <c>Math</c> method, we have 
    to call it using the class name.
    For example,
    we would calculate <m>2^4</m> as <c>Math.pow(2,4)</c>, which evaluates to 16.
    Similarly, we compute the square root of 225.0 as <c>Math.sqrt(225.0)</c>, 
    which evaluates to 15.0.
  </p>

  <p>
    Defining the <c>Math</c> class in this way makes it easy to use its methods,
    because you don't have to create <c>Math</c> objects.
    It is also a very efficient design because <c>java.lang.Math</c> methods
    are loaded into memory at the beginning of your program's execution,
    and they persist in memory throughout your program's lifetime.
  </p>

  <p>Random numbers are very useful in coding, for example in games. <c>Math.random()</c> returns a 
    random number between 0.0-0.99. We often need to move the random number to be in a certain range,
     for example to get a random number between 1 to 10. <c>(int)(Math.random()* range) + min</c>moves the random 
     number into a range starting from a minimum number. The range is the (max number - min number + 1).
    </p>
    <program language="java">
      <input>
      // returns a random number between 0-.99
      double randDec = Math.random();
      // returns a random number between 1 and 10
      int randNum = (int)(Math.random()* 10) + 1;
    </input>
    </program>
    
    <activity label="MathMethods">
      <statement><p>Run the code below to see the Math methods being used. 
        Run it several times to see how the random value changes each time. 
        How could you change the code to return a random integer from 5 to 15?</p></statement>
    <program language="java" interactive="activecode">
      <input>
      public class Test
      {
        public static void main(String[] args)
        {
          System.out.println("Math.pow(3,2): " + Math.pow(3,2));
          System.out.println("Math.sqrt(9): " + Math.sqrt(9));
          System.out.println("Math.round(26.51): " + Math.round(26.51));
          System.out.println((int) (Math.random() * 10) + 1);
        }
      }
    </input>
    </program>
    </activity>
  <p>
    In general, <c>static</c> class elements <mdash/> methods and variables <mdash/> are
    useful when we need elements that don't depend on the existence of objects of a class.
    For example, consider the following class definition:   
  </p>
  <program language="java"><input>
      public Widget
      {   
          public static nWidgets = 0;
          public Widget() 
          {
            nWidgets++;
          } 
      }
  </input></program>
  <p>
    Here we have a <c>public static</c> variable, <c>nWidgets</c> that is meant to
    keep a count of the number of widgets created. The count is incremented 
    every time the constructor is called <mdash/> i.e., every time a widget
    is created. Obviously, before the first widget
    is created we want to be able to say that the count is 0. We can do so by accessing
    <c>Math.nWidgets</c>. 
  </p>  
  <principle>
    <title>EFFECTIVE DESIGN: Static Elements</title>
    <p>
      A method or variable should be declared <c>static</c> if it is intended 
      to be used whether or not there is an instance of its class.
    </p>
  </principle>
  <p>
    We will see other occasions to use the <c>static</c> and <c>final</c> qualifiers
    in subsequent chapters.
  </p>  
  </subsection>
  
</section>