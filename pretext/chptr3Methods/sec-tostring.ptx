<section xml:id="sec-tostring">
  <title>java.lang.Object Methods</title>

  <p>
    The most general class in Java's class hierarchy is the <term>java.lang.Object</term> class.
    It is the superclass of all classes that occur in Java programs.
    By default, it is the direct superclass of any class that does not explicitly specify a pedigree in its class definition.
  </p>
  <p>
    All subclasses of <c>Object</c><term>inherit</term>
    the <c>public</c> and <c>protected</c> methods contained in <c>Object</c>, so all such methods can be thought of as belonging to the subclasses.
    This means that all classes inherit the methods of the <c>Object</c> class,
    because every class is a subclass of it.
    In this section,
    let's look briefly at how we can use an inherited method and also at how we can
    <term>override</term> it<ndash/>that is,
    redefine the method<ndash/>if it doesn't exactly suit our purposes.
  </p>
  <p>
    One of the most useful methods in the <c>Object</c> class is the
<c>toString()</c> method:
  </p>
 <program language="java"><input>
public class Object
{
    public String toString() ;
}
 </input></program>
  <p>
    The <c>toString()</c>
        <idx><h>toString() method</h></idx>
    method returns a <c>String</c> representation of its object.
    For example, <c>o1.toString()</c> will return a <c>String</c> that in some sense describes<nbsp/><c>o1</c>.
  </p>
  <p>
    Because <c>OneRowNim</c> is a subclass of <c>Object</c>, it inherits the
<c>toString()</c> method.
    To illustrate the default behavior of <c>toString()</c>, let's use it with a <c>OneRowNim</c> instance:
  </p>
 <program language="java"><input>
  OneRowNim g1 = new OneRowNim(11);
  OneRowNim g2 = new OneRowNim(13);
  System.out.println(g1.toString());
  System.out.println(g2.toString());
 </input></program>
  <p>
    This code segment creates two <c>OneRowNim</c> instances,
    one named <c>g1</c> and the other named <c>g2</c>. The inherited <c>toString()</c> method is then invoked on each <c>OneRowNim</c> instance,
    which produces the following output:
  </p>
 <program language="java"><input>
  OneRowNim@1dc6077b
  OneRowNim@1dc60776
 </input></program>
  <p>
    What this experiment shows is that the default definition of <c>toString()</c> returns some kind of internal representation of its object.
    It looks as if it returns the name of the object's class concatenated with its memory address.
    This may be useful for some applications.
    But for most objects we will want to override the default definition to make the <c>toString()</c> method return a string that is more appropriate for <c>OneRowNim</c>.
  </p>
  <p>
    What <c>String</c> should the <c>g1.toString()</c> method return?
    Let's have it return a <c>String</c> that reports the <c>OneRowNim</c> instances's current state,
    which are the values stored in the two instance variables.
    </p>
<p>    To <term>override</term> a method,
    you simply define a method with the same signature in the subclass.
    If you call <c>toString()</c> with an instance of the subclass,
    its version of the method will be used.
    In this way,
    the subclass method overrides the superclass version.
    Thus, <c>OneRowNim.toString()</c> will have the following signature:
  </p>
 <program language="java"><input>
public String toString()
 </input></program>
  <p>
    Let us describe the state of a <c>oneRowNim</c> instance very briefly in the string returned by the <c>toString()</c> method:
  </p>
 <program language="java"><input>
public String toString()
{ 
  return "nSticks = " + nSticks + ", player = " + player;
}
 </input></program>
  <p>
    If we add the <c>toString()</c> method to the <c>OneRowNim</c> class and then run the program shown in <xref ref="fig-orntostring">Figure</xref>,
    we get the following output:
  </p>
 <program language="java"><input>
  nSticks = 9, player = 2
  nSticks = 13, player = 1
 </input></program>
  <figure xml:id="fig-orntostring">
    <caption>An application to test the overridden <c>toString()</c> method.</caption>
 <program language="java"><input>
public class TestToString
{
  public static void main(String argv[])
  { OneRowNim g1 = new OneRowNim(11);
    OneRowNim g2 = new OneRowNim(13);
    g1.takeSticks(2);
    System.out.println(g1.toString());
    System.out.println(g2.toString());
  } //main
} //TestToString
 </input></program>
  </figure>

  <p>Since <c>System.out.println</c> looks for a String to print out, 
    it will automatically look for a toString() method of an object and invoke it. 
    It is possible to leave out the method call to toString() inside <c>System.out.println</c> methods.
  </p>
  <program language="java"><input>
        // Equivalent code
        System.out.println(g1.toString());
        System.out.println(g1);
     </input></program>
    <p>
    While this new method may not play an important role in the
<c>OneRowNim</c> class,
    it does provide a very brief,
    understandable description of the state of the object.
    This is the reason that the
<c>toString()</c> method was included in the <c>Object</c> class.
  </p>

  <activity label="toString">
  <statement><p>Add a toString() method to the Student class below that prints out 
    the name, email, and id instance variables. Run to test.
  </p></statement>
  <program language="java" interactive="activecode"><input>
    /** Add a toString() method to the Student class below. */
    class Student
    {
       private String name;
       private String email;
       private int id;
    
       public Student(String initName, String initEmail, int initId)
       {
          name = initName;
          email = initEmail;
          id = initId;
       }
    
       /* Write a toString() method here */
       
       
    }
    public class TesterClass
    {
       // main method for testing
       public static void main(String[] args)
       {
          Student s1 = new Student("Skyler", "skyler@sky.com", 123456);
          System.out.println(s1);
       }
     }    
  </input></program>
  </activity>
</section>