<section xml:id="boolean-dataand-operators">
  <title>Boolean Data and Operators</title>
  <introduction>
    <p>
      As we learned in Chapter<nbsp/> 1,
      the <c>boolean</c> type is one of Java's primitive types.
      For this type, there are only two possible values, <c>true</c> and <c>false</c>. 
    </p>
    <p>
      The <c>boolean</c> type is derived from the work of British mathematician 
      <url href="https://en.wikipedia.org/wiki/George_Boole" visual="">George Boole</url>,
      who in the 1850s,
      developed an algebra to process logical expressions such as <c>p and q</c>.
      Such <term>boolean expressions</term>
      produce a value that is either <c>true</c> or <c>false</c>.
      Every modern programming language provides some means of representing boolean expressions.
  </p>
  <p>
      The <c>boolean</c> type has several important uses.
      As we saw in Chapter<nbsp/> 1,
      expressions of the form <c>num == 7</c> and
      <c>5 &lt; 7</c> have <c>boolean</c> values.
      Similarly, as we saw in Chapter<nbsp/> 3, the <c>boolean</c> type is also used 
      to represent the condition in the if statement:
<pre>
        if (boolean expression)
           statement
</pre>
</p>
<p>
      For this reason,
      boolean expressions are also called <em>conditions</em>.
      Along these same lines,
      a <c>boolean</c> variable can be used as a
      <em>flag</em> or a <em>signal</em> to
      <q>remember</q>
       whether or not a certain condition holds.
      For example, in the following code fragment,
      we use <c>isDone</c> to mark when a particular process is completed:
</p>
 <program language="java"><input>
boolean isDone = false; // Initialize the flag
...                     // Do some processing task
isDone = true;          // Set flag when the task done
...                     // Do some other stuff
if (isDone)             // Check if finished the task
...                     //  If so, do something
else
...                     //  Or, do something else
 </input></program>
</introduction>

<subsection xml:id="self-study-exercisesA16">
<title>Boolean (or Logical) Operations</title>
<p>
      Like all the other simple data types,
      the <c>boolean</c> type consists  of certain data<mdash/>
the values <c>true</c> and <c>false</c>
<mdash/>
and certain actions or operations that can be performed on those data.
      For the boolean type there are four basic operations: AND
      (signified by &amp;&amp;),
      OR
      (signified by <m>\mid\mid</m>),
      EXCLUSIVE-OR
      (signified by <m>\wedge</m>),
      and NOT
      (signified by !).
      These are defined in the <term>truth table</term>
      shown in <xref ref="tab-truth">Table</xref>.
</p>
<p>
      A truth tables defines boolean operators by giving their values in all possible situations.
      The first two columns of the table give possible boolean values for two
      <em>operands</em>,<c>o1</c> and <c>o2</c>. An <term>operand</term>
      is a value used in an operation.
      Note that each row gives a different value assignment to the two operands,
      so that all possible assignments are represented.
      The remaining columns give the values that result for the various operators given the assignment of values to <c>o1</c> and <c>o2</c>.
</p>
<table xml:id="tab-truth">
<title>Truth-table definitions of the boolean operators:
      AND (&amp;&amp;), OR (<m>\mid\mid</m>), EXCLUSIVE-OR (<m>\wedge</m>), and  NOT (!).</title>
      
<tabular>

<row bottom="minor" left="minor">
<cell>OP 1</cell>
<cell>OP 2</cell>
<cell>AND</cell>
<cell>OR</cell>
<cell>XOR</cell>
<cell>not</cell>
</row>

<row bottom="minor">
<cell>o1</cell>
<cell>o2</cell>
<cell>o1 &amp;&amp; o2</cell>
<cell>o1 || o2</cell>
<cell>o1 <m>\wedge</m> o2</cell>
<cell>!o1</cell>
</row>
<row>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>false</c>
</cell>
</row>

<row>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>false</c>
</cell>
</row>

<row>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>true</c>
</cell>
<cell>
  <c>true</c>
</cell>
</row>

<row bottom="minor">
<cell>
  <c>false</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>false</c>
</cell>
<cell>
  <c>true</c>
</cell>
</row>
</tabular>
</table>
<p>
      To see how to read this table,
      let's look at the AND operation,
      which is defined in column 3.
      The AND operator is a <term>binary operator</term> <mdash/> that is,
      it requires two operands, <em>o1</em> and <em>o2</em>.
      If both <em>o1</em> and <em>o2</em> are true,
      then (<em>o1</em> &amp;&amp; <em>o2</em>) is true
      (row1).
      If either <em>o1</em> or <em>o2</em> or both <em>o1</em>
      and <em>o2</em> are false,
      then the expression (<em>o1</em> &amp;&amp;
      <em>o2</em>) is false
      (rows 2, 3 and 4).
      So, the only case in which (<em>o1</em> &amp;&amp;
      <em>o2</em>) is true is when both
      <em>o1</em> and <em>o2</em> are true
      (row 1).
</p>
<p>
      The boolean OR operation (column 4) is also a binary operation.
      If both <em>o1</em> and <em>o2</em> are false,
      then <m>(o1 \mid\mid o2)</m> is false
      (row 4).
      If either <em>o1</em> or <em>o2</em> or both <em>o1</em>
      and <em>o2</em> are true,
      then the expression <m>(o1 \mid\mid o2)</m> is true
      (rows 1-3).
      So, the only case in which
      <m>(o1 \mid\mid o2)</m> is false is when both <em>o1</em>
      and <em>o2</em> are false.
</p>
<p>
      The boolean EXCLUSIVE-OR (XOR) operation (column 5) is a binary operation,
      which differs from the OR operator in that it is true when either <em>o1</em>
      or <em>o2</em> is true (rows 2 and 3),
      but it is false when both <em>o1</em> and <em>o2</em> are true
      (row 1).
</p>
<p>
      The NOT operation (column 6)
      is a <term>unary operator</term>
      <mdash/>
      it takes only one operand<mdash/>
      and it simply reverses the truth value of its operand.
      Thus, if <em>o1</em> is true, !<em>o1</em>
      is false, and vice versa.
</p>
</subsection>
<subsection>
<title>Precedence and Associativity</title>
<p>
      In order to evaluate complex boolean expressions,
      it is necessary to understand the order in which boolean operations are 
      carried out by the computer.
      For example, what is the value of the following expression?
</p>
 <program language="java"><input>
true || true &amp;&amp; false
 </input></program>
<p>
      The value of this expression depends on whether we evaluate the
<m>\mid\mid</m> first or the &amp;&amp; first.
      If we evaluate the <m>\mid\mid</m> first,
      the expression's value will be false;
      if we evaluate the &amp;&amp;
      first, the expression's value will be true.
      In the following example,
      we use parentheses to force one operation to be done before the other:
</p>
 <program language="java"><input>
EXPRESSION                EVALUATION
----------                ----------
( true || true )  &amp;&amp;  false ==> true  &amp;&amp;  false ==> false
true || ( true  &amp;&amp;  false ) ==> true || false ==> true
 </input></program>
<p>
      As these evaluations show,
      we can use parentheses to force one operator or the other to be evaluated first.
      However, in  Java,
      the &amp;&amp; operator has higher precedence
<idx>
<h>precedence</h>
</idx>
      than the <m>\mid\mid</m> operator.
      Therefore, the second alternative corresponds to the default interpretation that 
      Java would apply to the expression that has no parentheses.
      In other words,
      given the expression <c>true || true  &amp;&amp;  false</c>,
      the AND operation would be evaluated before the OR operation even though 
      the OR operator occurs first (i.e., to the left) in the unparenthesized expression.
</p>
<table xml:id="tab-boolprec">
 <title>Precedence order of the boolean operators</title>
<tabular>
<row bottom="minor" left="minor">
<cell>Precedence Order</cell>
<cell>Operator</cell>
<cell>Operation</cell>
</row>
<row>
<cell>1</cell>
<cell>
<c>(  )</c>
</cell>
<cell>Parentheses</cell>
</row>
<row>
<cell>2</cell>
<cell>
<c>!</c>
</cell>
<cell>NOT</cell>
</row>
<row>
<cell>3</cell>
<cell>
<c> ^ </c>
</cell>
<cell>EXCLUSIVE-OR</cell>
</row>
<row>
<cell>4</cell>
<cell>
<c>&amp;&amp;</c>
</cell>
<cell>AND</cell>
</row>
<row bottom="minor">
<cell>5</cell>
<cell>
<c>||</c>
</cell>
<cell>OR</cell>
</row>
</tabular>
</table>
<p>
      As this example illustrates,
      the boolean operators have a built-in <term>precedence order</term>
      which is used to determine how boolean expressions are to be evaluated.
      The precedence rules are set out in <xref ref="tab-boolprec">Table</xref>.
</p>
<p>
      A simple method for evaluating an expression is to parenthesize the 
      expression and then evaluate it.
      For example, to evaluate the complex expression
</p>
 <program language="java"><input>
true || !false ^ false &amp;&amp; true
 </input></program>
<p>
      we would first parenthesize it according to the rules
      in  <xref ref="tab-boolprec">Table</xref>, which gives the following expression:
</p>
 <program language="java"><input>
true || (((!false) ^ false) &amp;&amp; true)
 </input></program>
<p>
      We can then evaluate this fully parenthesized expression,
      step by step, starting at the innermost parentheses:
</p>
 <program language="java"><input>
Step 1. true || ((true ^ false) &amp;&amp; true)
Step 2. true || (true &amp;&amp; true)
Step 3. true || true
Step 4. true
 </input></program>
<principle>
<title>PROGRAMMING TIP: Parentheses</title>
<p>
        Parentheses can
        (and should)
        be used to clarify any expression that appears 
        ambiguous or to override Java's default precedence rules.
</p>
</principle>
<p>
      In addition to operator precedence,
      it is necessary to know about an operator's <term>associativity</term>
      in order to evaluate boolean expressions of the form 
      <c>(op1 || op2 &amp;&amp; op3)</c>.
      Should this expression be evaluated as <c>((op1 || op2) &amp;&amp; op3)</c> 
      or as <c>(op1 || (op2 &amp;&amp; op3))}</c>?
      </p>
      <p>
      The binary boolean operators all associate from left to right.
      Thus, the expressions
</p>
 <program language="java"><input>
true ^ true ^ true   // Same as: (true ^ true) ^ true
true &amp;&amp; true &amp;&amp; true // Same as: (true &amp;&amp; true) &amp;&amp; true
true || true || true // Same as: (true || true) || true
 </input></program>
<p>
      would be evaluated as follows:
</p>
 <program language="java"><input>
EXPRESSION               EVALUATION
----------------         -----------------
(true ^ true)  ^ true    ==> false ^ true  ==> true
(true &amp;&amp; true)  &amp;&amp; true  ==> true  &amp;&amp; true ==> true
(true || true)  || true  ==> true  || true ==> true
 </input></program>
</subsection>
<subsection xml:id="self-study-exerciseN16">
<title>Short-Circuit Evaluation</title>
<p>
      Another important feature of the boolean operators is that they 
      utilize a form of evaluation known as
      <term>short-circuit evaluation</term>,
      in which a boolean expression is evaluated from left to right,
      and the evaluation is discontinued as soon as the expression's value can be determined,
      regardless of whether it contains additional operators and operands.
      For example, in the expression
</p>
 <program language="java"><input>
expr1 &amp;&amp; expr2
 </input></program>
<p>
      if <c>expr1</c> is false,
      then the AND expression must be false,
      so <c>expr2</c> need not evaluated.
      Similarly, in the expression
</p>
 <program language="java"><input>
expr1 || expr2
 </input></program>
<p>
      if <c>expr1</c> is true,
      then the OR expression must be true,
      so
<c>expr2</c> need not evaluated.
</p>
<p>
      In addition to being a more efficient form of evaluating boolean expressions,
      short-circuit evaluation has some practical uses.
      For example,
      we can use short-circuit evaluation to guard against null pointer exceptions.
      Recall from Chapter <nbsp/> 2 that a null pointer exception results 
      when you try to use an uninstantiated reference variable <mdash/> that is,
      a reference variable that has not been assigned an object.
      For example,
      if we declare a <c>OneRowNim</c> variable without instantiating it and then try to use it,
      a null pointer exception will result:
</p>
 <program language="java"><input>
OneRowNim game;        // Uninstantiated Reference
if (!game.gameOver())  // Null pointer exception
    game.takeSticks(num);
 </input></program>
<p>
      In this code,
      a null pointer exception results when we use <c>game</c> in the 
      method call <c>game.gameOver()</c>. We can use short-circuit 
      evaluation to prevent the exception from occurring:
</p>
 <program language="java"><input>
if ((game != null) &amp;&amp; (!game.gameOver())
    game.takeSticks(num);
 </input></program>
<p>
      In this case,
      because <c>game != null</c> is false,
      neither method call involving <c>game</c> is made,
      thus avoiding the exception.
</p>
</subsection>
</section>