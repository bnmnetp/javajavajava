<section xml:id="ch5-numformat">
  <title>From the Java Library
<c>java.text.NumberFormat</c></title>
<introduction>
<p>
    Although the <c>Math.round()</c> method is useful for rounding 
    numbers,
    it is not suitable for business applications.
    Even for rounded values, Java will drop trailing zeroes.
    So a value such as $10,000.00 would be output as $10000.0.
    This wouldn't be acceptable for a business report.
  </p>
  <p>
    Fortunately, Java supplies the <c>java.text.NumberFormat</c> 
    class precisely for the task of representing numbers as dollar amounts,
    percentages, and other formats (<xref ref="fig-numformat"></xref>).
  </p>
    <figure xml:id="fig-numformat">
      <caption>The <c>NumberFormat</c> class.</caption>
      <image width="50%" source="chptr05/p267f1.png"/> 
    </figure>
  <p>
    The <c>NumberFormat</c> class is an <c>abstract</c> class,
    which means that it cannot be directly instantiated.
    Instead, you would use its static <c>getInstance()</c> methods to create an 
    instance that can then be used for the desired formatting tasks.
  </p>
  <p>
    Once a <c>NumberFormat</c> instance has been created,
    its <c>format()</c> method can be used to put a number into a particular format.
    The <c>setMaximumFractionDigits()</c> and 
    <c>setMaximumIntegerDigits()</c> methods can be 
    used to control the number of digits before and after the decimal point.
  </p>
  <p>
    For example,
    the following statements can be used to format a decimal 
    number as a currency string in dollars and cents:
  </p>
  <program language="java"><input>
    NumberFormat dollars = NumberFormat.getCurrencyInstance();
    System.out.println(dollars.format(10962.555));
  </input></program>
  <p>
    These statements would cause the value 10962.555 to be shown as $10,962.56.
    Similarly, the statements,
  </p>
  <program language="java"><input>
    NumberFormat percent = NumberFormat.getPercentInstance();
    percent.setMaximumFractionDigits(2);
    System.out.println(percent.format(6.55));
  </input></program>
  <p>
    would display the value 6.55 as 6.55%. The utility of the <c>Math</c> and 
    <c>NumberFormat</c> classes illustrates the following principle:
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: Code Reuse</title>
    <p>
      Often the best way to solve a programming task is to 
      find the appropriate methods in the Java class library.
    </p>
  </principle>
</introduction>
<exercises xml-id="ss-5-8-1">
    <title>Self-Study Exercise</title>
    
      <p>
          A Certificate of Deposit (CD) is an investment instrument 
          that accumulates interest at a given rate for an initial principal 
          over a fixed number of years.
          The formula for compounding interest is shown in <xref ref="tab-cd">Table</xref>.
        </p>
          <table xml:id="tab-cd">
            <title>Formula for calculating compound interest</title> 
            <tabular>
              <row bottom="minor" left="minor">
                <cell><m>a = p(1 + r)^n</m> where</cell>
              </row>
              <row>
                <cell><m>\bullet</m> <em>a</em> is the CD's value at the end of the <em>n</em>th year</cell>
              </row>
              <row>
                <cell><m>\bullet</m> <em>p</em> is the principal or original investment amount</cell>
              </row>
              <row>
                <cell><m>\bullet</m> <em>r</em> is the annual interest rate</cell>
              </row>
              <row>
                <cell><m>\bullet</m> <em>n</em> is the number of years or the compounding period</cell>
              </row>
            </tabular>
          </table>
        <p>        
          It assumes that interest is compounded annually.
          For daily compounding, the annual rate must be divided by 365,
          and the compounding period must be multiplied by 365, giving:
          <m>a = p(1 + r/365)^{365n}</m>.
        </p>
        <figure xml:id="fig-bankcd">
          <caption>The <c>BankCD</c> class.</caption>
         <image width="40%" source="chptr05/bankcd.png"/>
        </figure>
      
        <exercise label="bankCDex" xml:id="ex-bankcd">
          <title>BankCD</title>
          <statement>
        <p> 
          Implement a <c>BankCD</c> class that calculates the maturity value of a CD. 
          <xref ref="fig-bankcd">Figure</xref> gives the design of the class.
          It should have three instance variables for the CD's principal, rate,
          and years.
          Its constructor method sets the initial values of 
          these variables when a <c>BankCD</c> is instantiated.
          Its two public methods <c>calcYearly()</c> and <c>calcMonthly()</c> calculate and return the maturity value 
          using yearly and daily compounding interest,
          respectively.
          Use the <c>Math.pow()</c> method to calculate maturity values.
          For example,
          the following expression calculates maturity value with annual compounding:
      <c>principal * Math.pow(1 + rate, years)</c>
        </p></statement>
        <program language="java" interactive="activecode"><input>
         public class BankCD
         {


          public static void main(String argv[])
          {
             BankCD cd = new BankCD(1000, 0.05, 10);
             System.out.println("Yearly Interest: " + cd.calcYearly());
             System.out.println("Monthly Interest: " + cd.calcMonthly());
          }
         }
        </input>   </program>
        <solution>
          <program language="java"><input>
            public class BankCD 
            { private double principal;   // The CD's initial principal
              private double rate;        // CD's interest rate
              private double years;       // Number of years to maturity
              public BankCD(double p, double r, double y) 
              {   principal = p;
                rate = r;
                years = y;
              } // BandCD()
              public double calcYearly() 
              {   return principal * Math.pow(1 + rate, years);
              } // calcYearly()
              public double calcDaily() 
              {   return principal * Math.pow(1 + rate/365, years*365);
              } // calcDaily()
            } // BankCD
          </input></program>
        </solution>
        </exercise>
      
        <exercise>
          <title>BankCD UI</title>
          <statement><p> Using a development environment that allows user input, 
            design a command-line user interface to the <c>BankCD</c> 
          class that lets the user input principal,
          interest rate, and years,
          and reports the CD's maturity value with both yearly and daily compounding.
          Use <c>NumberFormat</c> objects to display percentages 
          and dollar figures in an appropriate format.
          The program's output should look something like the following (user's inputs follow
          the '>' prompt):
        <pre>
        ************************ OUTPUT ********************
        Compare daily and annual compounding for a Bank CD.
        Input CD initial principal, e.g.  1000.55 > 2500
        Input CD interest rate, e.g.  6.5 > 7.8
        Input the number of years to maturity, e.g., 10.5 > 5 
        For Principal = 2,500.00 Rate= 7.8% Years= 5.0
        The maturity value compounded yearly is 3,639.43
        The maturity value compounded daily is: $3,692.30
        ************************ OUTPUT ********************
      </pre>
  </p></statement>
  <solution><p>
    <program language="java"><input>
       public class TestBankCD 
       { 
         private KeyboardReader reader = new KeyboardReader();   
         private NumberFormat dollars = NumberFormat.getCurrencyInstance(); 
         private NumberFormat percent = NumberFormat.getPercentInstance();
         private BankCD cd;
         public void run()
         { reader.display("Compares daily and annual compounding for a CD.\n");
           reader.prompt("  Input the CD's initial principal, e.g.  1000.55 > ");
           double principal = reader.getKeyboardDouble();
           reader.prompt("  Input the CD's interest rate, e.g.  6.5 > ");
           double rate = reader.getKeyboardDouble() / 100.0;
           reader.prompt("  Input the number of years to maturity, e.g., 10.5 > ");
           double years = reader.getKeyboardDouble();
           cd = new BankCD(principal, rate, years);
           percent.setMaximumFractionDigits(2);
           System.out.println("For Principal = " + dollars.format(principal) +
                              " Rate= " + percent.format(rate) +
                              " Years= " + years);
           double cdAnnual = cd.calcYearly();  // Compounded yearly
           double cdDaily =  cd.calcDaily();   // Compounded annually
           System.out.println(" The maturity value compounded yearly is " +
                          dollars.format(cdAnnual));
           System.out.println(" The maturity value compounded daily is: " +
                          dollars.format(cdDaily));
         } // run()
         public static void main( String args[] ) 
         { TestBankCD cd = new TestBankCD();
           cd.run();
         } // main()
       }// TestBankCD
    </input></program>
  </p></solution>
</exercise>
</exercises>
</section>