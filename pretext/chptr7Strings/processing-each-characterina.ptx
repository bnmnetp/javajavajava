<section xml:id="processing-each-characterina">
  <title>Processing Each Character in a <c>String</c></title>
  <introduction>
    <p>
      Many string-processing applications require you to process each character in a string.
      For example, to encrypt the string
      <q>hello</q>
      into
      <q>jgnnq</q>, we have to go through each letter of the string and change
      each character to its substitute.
    </p>
  </introduction>
  <subsection>
  <title>Counting Loops</title>
    <p>
      These types of algorithms usually involve a counting loop bounded by
      the length of the string.
      Recall that the <c>length()</c> method determines the number of
      characters in a <c>String</c> and that strings are zero indexed.
      This means that the first character is at index 0, and the last
      character is at index <c>length()-1</c>. For example,
      to print each character in a string on a separate line,
      we would step through the string from its first to its
      last character and print each character::
    </p>
    <p>

    </p>
 <program language="java"><input>
// Precondition:  str is not null
// Postcondition: the letters in str will have been printed
public void printLetters(String str)
{
  for (int k = 0; k &lt; str.length(); k++)// For each char
    System.out.println(str.charAt(k));  //  Print it
}
 </input></program>
    <p>
      Note that our loop bound is <c>k &lt; str.length()</c>, since
      the index of the last character of any <c>String</c> is
      <c>length()-1</c>. Note also the use of <c>str.charAt(k)</c> to retrieve the
      <em>k</em>th character in <c>str</c> on each iteration of the loop.
    </p>
    <p>
      Note the use of pre- and postconditions in the method's comment block.
      The precondition states that <c>str</c> has been properly initialized <mdash/> that is,
      it is not <c>null</c>. The postcondition merely states the expected behavior of the method.
    </p>
  </subsection>
  <subsection>
    <title>Off-by-One Error</title>
    <p>
      A frequent error in coding counter-controlled loops is known as the
      <term>off-by-one error</term>,
          <idx><h>off-by-one error</h></idx>
      which can occur in many different ways.
      For example,
      if we had coded the loop boundary condition as
      <c>k &lt;= str.length()</c>, this would cause an off-by-one error,
      because the last  character in <c>str</c> is at location <c>length()-1</c>. This would lead to a Java <c>IndexOutOfBoundsException</c>, which would be reported as soon as the program executed this statement.
    </p>
    <p>
      The only way to avoid off-by-one errors is to check your loop bounds whenever you code a loop.
      Always make sure you have the loop counter's initial and final values correct.
    </p>
    <principle>
      <title>DEBUGGING TIP: Off-by-One Errors</title>
      <p>
        Loops should be carefully checked to make sure they don't commit an off-by-one error.
        During program testing,
        develop data that tests the loop variable's initial and final values.
      </p>
    </principle>
  </subsection>
  <subsection>
    <title>Example: Counting Characters</title>
    <p>
      As another example of an algorithm that processes each character in a string,
      consider the problem of computing the frequency of the letters in a given document.
      Certain text analysis programs,
      such as programs that analyze encrypted data and spam filters,
      perform this type of function.
    </p>
    <p>
      The <c>countChar()</c> method will count the number of occurrences of
      any particular character in a <c>String</c> (<xref ref="lst-countchar">Listing</xref>).
      This method takes two parameters:
      a <c>String</c> parameter that stores the string being searched and a
      <c>char</c> parameter that stores the character being counted.
    </p>
    <listing xml:id="lst-countchar">
      <caption>A method to count the occurrence of a particular
      character in a string.</caption>
 <program language="java"><input>
// Precondition: Neither str nor ch are null
// Postcondition: countchar() == the number of ch in str
public int countChar(String str, char ch)
{
  int counter = 0;              // Initialize a counter
  for (int k = 0; k &lt; str.length(); k++)// For each char
    if (str.charAt(k) == ch)           //  If it's a ch
      counter++;                          //   count it
  return counter;                  // Return the result
}
 </input></program>
    </listing>
    <p>
      Begin by initializing the local variable, <c>counter</c>, to  0.
      As in the previous example,
      the <c>for</c> loop here will iterate through each character of
      the <c>String</c><mdash/>from 0 to <c>length()-1</c>. On each
      iteration a check is made to see if the character in the
      <em>k</em>th position (<c>str.charAt(k)</c>) is the character being counted.
      If so, <c>counter</c> is incremented.
      The method ends by returning <c>counter</c>, which,
      when the method completes,
      will store an integer representing the number of
      <em>ch</em>'s in <c>str</c>.
    </p>
  </subsection>
  <subsection>
    <title>Example: Reversing a String</title>
    <p>
      Another interesting method that processes each character in a
      string is the <c>reverse()</c> method.
      This is a method that reverses the letters in a string.
      For example,
      the reverse of <c>"java"</c> is <c>"avaj"</c>.
    </p>
    <p>
      The algorithm for the <c>reverse()</c> method should use a simple
      counting loop to reverse the letters in its <c>String</c> parameter.
      In this case,
      however, we can process the string from right to left,
      beginning at its last character and ending with its first character.
      That way we can just append each character,
      left to right, in the result string:
    </p>
 <program language="java"><input>
/*
  * Pre:  s is any non null string
  * Post: s is returned in reverse order
  */
public String reverse(String s)
{
    StringBuffer result = new StringBuffer();
    for (int k = s.length()-1; k >= 0; k--) {
        result.append(s.charAt(k));
    } //for
    return result.toString();
} // reverse()
 </input></program>
    <p>
      Note that as in the other string-manipulation algorithms <mdash/> for example,
      <c>keywordSearch()</c> <mdash/> we should us a <c>StringBuffer</c> to store
      the method's result.
      Thus we declare the <c>result</c><c>StringBuffer</c> at the beginning
      of the method and convert it back into a <c>String</c> at the end of the method.
    </p>
    <principle>
      <title>PROGRAMMING TIP: Changing Each Character in a String</title>
      <p>
        Algorithms that require you to alter a string should use a
        <c>StringBuffer</c> to store the result.
      </p>
    </principle>
  </subsection>
  <subsection xml:id="capitalizing">
    <title>Example: Capitalizing the First Letter</title>
    <p>
      Another string manipulation method is the <c>capitalize()</c> method,
      which returns a <c>String</c> whose  initial letter is capitalized but
      whose other letters are lowercase <mdash/> for example,
      <q>Hello</q>. We use the <c>static</c><c>toUpperCase()</c>
      and <c>toLowerCase()</c> methods from the <c>Character</c> class
      to convert individual letters.
      The algorithm converts the first letter to upper case and then
      loops through the remaining letters converting each to lowercase:
    </p>
    <p>

    </p>
 <program language="java"><input>
/*
 * Pre:  s is any non null string
 * Post: s is returned with only its first letter capitalized
 */
public String capitalize(String s)
{
  if (s.length() == 0)    // Special case: empty string
    return s;
  StringBuffer result = new StringBuffer();
  result.append(Character.toUpperCase(s.charAt(0)));
                          // Convert the first letter
  for (int k = 1; k &lt; s.length(); k++) { // And the rest
    result.append(Character.toLowerCase(s.charAt(k)));
  } //for
  return result.toString();
} // capitalize()
 </input></program>
    <exercises>
    <title>Self-Study Exercises</title>
      <exercise label="string-processor">
      <title>String processor</title>
      <statement>
        <p>Run this program to see how it works and then modify it to perform the following tasks.</p>
          <ol>
          <li><p>Add <c>reverse()</c> as a static method and write code to test it in the main while loop.</p></li>
          <li><p>Define and test a new method, <c>removeBlanks()</c>, that accepts a string parameter
          and returns a string with all blank characters removed.</p></li>
          </ol>
      </statement>

    <program language="java" interactive="activecode"><input>

    public class StringProcessor {

      public static int countChar(String str, char ch) {
        int counter = 0;                  // Initialize a counter
        for (int k = 0; k &lt; str.length(); k++)   // For each char
          if (str.charAt(k) == ch)               //  If it's a ch
            counter++;                           //   count it
        return counter;                   // Return the result
      }

        // Add static reverse() method



        // Add static removeBlanks() method

        public static void main(String args[]) {
          String s = "This is a test";
          System.out.println("Testing countChar()");
          System.out.println( s + " has " +
            StringProcessor.countChar(s, 't') + " t's");

          // Add code to test your methods here

        } // main()
    } // StringProcessor
    </input></program>
    <solution>
        <program language="java"><input>
    public static String removeBlanks(String s) {
      StringBuffer sb = new StringBuffer();
      for (int k = 0; k &lt; s.length(); k++) {
        if (s.charAt(k) != ' ') {
          sb.append(s.charAt(k));
        }
      }
      return sb.toString();
    }
        </input></program>
    </solution>
    </exercise>
  </exercises>
  </subsection>
  <subsection>
    <title>Miscellaneous <c>String</c> Methods</title>
    <p>
      In addition to the several <c>String</c> class methods we have
      discussed <mdash/> <c>valueOf()</c>, <c>equals()</c>, <c>indexOf()</c>,
      <c>lastIndexOf()</c>, <c>charAt()</c>, <c>substring()</c> <mdash/>
      <xref ref="tab-strmethods">Table</xref> shows some of the other
      useful methods in the <c>String</c> class.
    </p>

    <table xml:id="tab-strmethods">
      <title>Some useful <c>String</c> methods applied to the literal
      string <q>Perfection</q>.</title>
      <tabular>
        <row bottom="minor" left="minor">
          <cell>Method Signature</cell>
          <cell>Example</cell>
        </row>
        <row>
          <cell><c>boolean endsWith(String suffix)</c></cell>
          <cell><c>"Perfection".endsWith("tion")</c><m>\Rightarrow</m> true </cell>
        </row>
        <row>
          <cell><c>boolean startsWith(String prefix)</c></cell>
          <cell><c>"Perfection".startsWith("Per")</c><m>\Rightarrow</m> true </cell>
        </row>
        <row>
          <cell><c>boolean startsWith(String prefix, int offset)</c></cell>
          <cell><c>"Perfection".startsWith("fect",3)</c><m>\Rightarrow</m> true </cell>
        </row>
        <row>
          <cell><c>String toUpperCase()</c></cell>
          <cell><c>"Perfection".toUpperCase()</c><m>\Rightarrow</m> <c>"PERFECTION"</c></cell>
        </row>
        <row>
          <cell><c>String toLowerCase()</c></cell>
          <cell><c>"Perfection".toLowerCase()</c><m>\Rightarrow</m> <c>"perfection"</c></cell>
        </row>
        <row bottom="minor">
          <cell><c>String trim()</c></cell>
          <cell><c>"Perfection".trim()</c><m>\Rightarrow</m> <c>"Perfection"</c></cell>
        </row>
      </tabular>
    </table>
    <p>
      Note that because of what we said about the read-only nature of <c>String</c>,
      methods such as <c>toUpperCase()</c>, <c>toLowerCase()</c>, and <c>trim()</c>
      do not change their string. Instead they produce a new string.
      If you want to use one of these methods to convert a string,
      you must reassign its result back to the original string:
    </p>
 <program language="java"><input>
String s = new String("hello world");
s = s.toUpperCase(); // s now equals "HELLO WORLD"
 </input></program>
    <p>
    </p>
  </subsection>
</section>