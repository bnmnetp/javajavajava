<section>
  <title>{Special Topic:} Are We Computers?</title>
  <introduction>
    <p>
      {George Boole} published his seminal work,
      <em>An Investigation of the Laws of Thought</em>, in 1854.
      His achievement was in developing an algebra for logic<mdash/>that is,
      a purely abstract and symbolic system for representing the laws of logic.
      Boole's was not the first attempt to explore the relationship between the human mind and an abstract system of computation.
      Back in 1655, Thomas Hobbes had already claimed that all thought was computation.
    </p>
    <p>
      It is estimated that the human brain contains (<m>10^{12}</m> <m>=</m> <m>10{,}000{,}000{,}000{,}000</m>) <em>neurons</em>,
      and each neuron contains something like 10,000 <em>dendrites</em>,
      the fibers that connect one neuron to another.
      Together, the neurons and dendrites make up a web of enormous complexity.
      Since the 1840s it has been known that the brain is primarily electrical,
      and by the 1940s scientists had developed a pretty good model of the electrical interactions among neurons.
      According to this model,
      neurons emit short bursts of electricity along their <em>axons</em>,
      which function like output wires.
      The bursts leap over the gap separating axons and dendrites,
      which function like the neurons' input wires.
    </p>
    <p>
      In 1943, just before the first digital computers were developed, Warren McCulloch,
      a neurophysiologist,
      and Walter Pitts, a mathematician, published a paper titled,
      <q>A Logical Calculus of the Ideas Imminent in Nervous Activity.</q>
      In this paper,
      they showed that all of the boolean operators<mdash/>AND, OR, NOT, and EXCLUSIVE-OR<mdash/>could be represented by the behavior of small sets of neurons.
      For example,
      they showed that three neurons could be connected together in such a way that the third neuron fired if and only if both of the other two neurons fired.
      This is exactly analogous to the definition of the boolean AND operator.
    </p>
    <p>
      A few years later, when the first computers were built,
      many scientists and philosophers were struck by the similarity between the logic elements that made up the computer's circuits and the neuronal models that McCulloch and Pitts had developed.
    </p>
    <p>
      The area of neural networks is a branch of artificial intelligence
      (one of the applied areas of computer science)
      and is based on this insight by McCulloch and Pitts.
      Researchers in this exciting and rapidly advancing field develop neural network models of various kinds of human thinking and perception.
    </p>
  </introduction>
  <subsection>
    <title>Using Booleans in OneRowNim</title>
    <p>
      Now that we have introduced the <c>boolean</c> data type,
      let's use it to improve the <c>OneRowNim</c> class,
      the latest version of which, from Chapter<nbsp/>3,
      is given in <xref ref="fig-ornclass">Figure</xref>.
      Previously we used an <c>int</c> variable,
<c>player</c>, to represent who's turn it is.
      For a two-person game, such as One Row Nim,
      a <c>boolean</c> variable is well suited for this purpose,
      because it can toggle between true and false.
      For example,
      let's declare a variable, <c>onePlaysNext</c>, and initialize it to true,
      to represent the fact that player one will play first:
    </p>
 <program language="java"><input>
private boolean onePlaysNext = true;
 </input></program>
    <p>
      When <c>onePlaysNext</c> is true,
      it will be player one's turn.
      When it is false, it will be player two's turn.
      Note that we are deliberately remaining uncommitted as to whether one or the other player is the computer.
    </p>
    <p>
      Given this new variable,
      it is necessary to redefine the methods that had previously used the <c>player</c> variable.
      The first method that needs revision is the constructor:
    </p>
 <program language="java"><input>
public OneRowNim(int sticks, int starter)
{   nSticks = sticks;
    onePlaysNext = (starter == 1);}  // OneRowNim() constructor3
 </input></program>
    <p>
      In the constructor,
      the <c>starter</c> parameter is used with a value of 1 or 2 to set which player goes first.
      Note how we use an assignment statement to set <c>onePlaysNext</c> to true if <c>starter</c> equals 1;
      otherwise it is set to false.
      The assignment statement first evaluates the expression on its right hand side (<c>starter == 1</c>).
      Because this is a boolean expression,
      it will have a value of true or false,
      which will be assigned to <c>onePlaysNext</c>. Thus,
      the assignment statement is equivalent to the following if/else statement:
    </p>
 <program language="java"><input>
if (player == 1)
   onePlaysNext = true;
else
   onePlaysNext = false;
,
 </input></program>
    <p>
      The remaining changes are shown in <xref ref="fig-newonerow">Figure</xref>.
      There are only two instance methods that need revision to accommodate the use of <c>boolean</c> variables.
      The <c>takeSticks()</c> method contains two revisions.
      The first uses the boolean OR operator to test whether a move is valid:
    </p>
 <program language="java"><input>
public boolean takeSticks(int num)
{   if (num &lt; 1 || num > 3 || num > nSticks)
        return false;                // Error
    else                             // Valid move
    {   nSticks = nSticks - num;
        onePlaysNext = !onePlaysNext;
        return true;
    } //else} // takeSticks()
 </input></program>
    <p>
      It also uses the boolean NOT operator to toggle the value of <c>onePlaysNext</c>, to switch to the other player's turn:
    </p>
 <program language="java"><input>
onePlaysNext = !onePlaysNext;
 </input></program>
    <p>
      Finally, the <c>getPlayer()</c> method now uses a if/else statement to return either 1 or 2 depending on who's turn it is:
    </p>
 <program language="java"><input>
public int getPlayer()
{   if (onePlaysNext)
        return 1;
    else return 2;} // getPlayer()
 </input></program>
    <figure xml:id="fig-newonerow">
      <caption>The revised <c>OneRowNim</c> uses a <c>boolean</c>
      variable to keep track of who's turn it is.</caption>
 <program language="java"><input>
public class OneRowNim
{    private int nSticks = 7;
     private boolean onePlaysNext = true;
     public OneRowNim()
     {
     } //OneRowNim() constructor1
     public OneRowNim(int sticks)
     {   nSticks = sticks;
     }  // OneRowNim() constructor2
     public OneRowNim(int sticks, int starter)
     {   nSticks = sticks;
         onePlaysNext = (starter == 1);
     }  // OneRowNim() constructor3
     public boolean takeSticks(int num)
     {   if (num &lt; 1 || num > 3 || num > nSticks)
             return false;                // Error
         else                             // Valid move
         {   nSticks = nSticks - num;
             onePlaysNext = !onePlaysNext;
             return true;
         } //else
     } // takeSticks()
     public int getSticks()
     {   return nSticks;
     }{ // getSticks()}
     public int getPlayer()
     {   if (onePlaysNext) return 1;
         else return 2;
     } // getPlayer()
     public boolean gameOver()
     {   return (nSticks &lt;= 0);
     } // gameOver()
     public int getWinner()
     {   if (nSticks &lt; 1) return getPlayer();
         else return 0;  // game is not over
     } // getWinner()
     public void report()
     {   System.out.println("Number of sticks left: "
                             + getSticks());
         System.out.println("Next turn by player "
                             + getPlayer());
     }   // report()} // OneRowNim class
 </input></program>
    </figure>
  </subsection>
</section>