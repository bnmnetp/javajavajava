<section xml:id="the-java-event-model">
  <title>The Java Event Model</title>
  <introduction>
    <p>
      As we saw in Chapter 4, whatever happens while the computer is running is classified as an event.
      Every keystroke and mouse click,
      every time a disk is inserted into a disk drive, an event is generated.
      The handling of events are an important element of GUI programming.
      Therefore, before we begin discussing how to design GUIs, it will be useful to review the main concepts of Java's <term>event model</term>.
          <idx><h>event model</h></idx>
    </p>
    <p>
      When a Java program is running,
      events generated by the hardware are passed up through the operating system
      (and through the browser, for applets)
      to the program.
      Those events that belong to the program must be handled by the program
      (refer to Fig.<nbsp/>4.18 in Chapter<nbsp/>4).
      For example, if you click your browser's menu bar,
      that event will be handled by the browser itself.
      If you click a button contained in the Java program,
      that event should be handled by the program.
    </p>
    <p>
      In Java, whenever something happens within a GUI component,
      an event object is generated and passed to the <em>event listener</em>
      that has been registered to handle that component's events.
      You've seen numerous examples of this process in earlier chapters,
      but we've included a simple example to serve as a reminder.
    </p>
    <p>
      Suppose you create a <c>JButton</c> in a GUI as follows:
    </p>
 <program language="java"><input>
private JButton clickme = new JButton("ClickMe");
 </input></program>
    <p>
      Whenever the user clicks the <c>JButton</c>, an <c>ActionEvent</c> is generated.
      In order to handle these events,
      the GUI must register the <c>JButton</c> with a listener object that listens for action events.
      This can be done in an applet's <c>init()</c> method or in an application's constructor method,
      as in this example:
    </p>
 <program language="java"><input>
public MyGUI() {
  // Add clickme to the GUI and assign it a listener
  add(clickme);
  clickme.addActionListener(this); }
 </input></program>
    <p>
      In this case,
      we have designated the GUI itself (<c>this</c>) as an <c>ActionListener</c> for <c>clickme</c>(Fig.<nbsp/>13.5).
      <image width="73%" source="chptr13/p478f1.png"/> A <term>listener</term>
          <idx><h>listener</h></idx>
      is any object that implements a
      <em>listener interface</em>,
      which is one of the interfaces derived from <c>java.util.EventListener</c>. An <c>ActionListener</c> is an object that listens for and receives <c>ActionEvent</c> s.
    </p>
    <p>
      In order to complete the event-handling code,
      the GUI must implement the <c>ActionListener</c> interface.
      As <xref ref="fig-clickme">Figure</xref> shows,
      implementing an interface is a matter of declaring the interface in the class heading and implementing the methods contained in the interface,
      in this case the <c>actionPerformed()</c> method.
    </p>
    <figure xml:id="fig-clickme">
      <caption>A simple GUI application that handles action events
      on a <c>JButton</c>.</caption>
 <program language="java"><input>
import javax.swing.*;
import java.awt.event.*;
public class MyGUI extends JFrame
                              implements ActionListener {
    private JButton clickme = new JButton("ClickMe");
    public MyGUI() {
     // Add clickme to the GUI and assign it a listener
        getContentPane().add(clickme);
        clickme.addActionListener(this);
        setSize(200,200);
        setVisible(true);
    } // init()
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == clickme) {
      clickme.setText(clickme.getText()+"*");
        }
    } // actionPerformed()
    public static void main(String args[]) {
        MyGUI gui = new MyGUI();
    }} // MyGUI
 </input></program>
    </figure>
    <figure xml:id="fig-p479f1">
      <caption>A UML depiction of the sequence of actions
      and events that take place when a button is clicked. The vertical
      lines represent time lines, with time running from top to bottom. The
      arrows between lines represent messages passing between objects.</caption>
      <image width="73%" source="chptr13/p479f1.png"/>
    </figure>
    <p>
      Now that we have implemented the code in <xref ref="fig-clickme">Figure</xref>,
      whenever the user clicks <c>clickme</c>, that action is encapsulated within an <c>ActionEvent</c> object and passed to the <c>actionPerformed()</c> method.
      This method contains Java code that will handle the user's action in an appropriate way.
      For this example,
      it modifies the button's label by appending an asterisk to it each time it is clicked.
      <xref ref="fig-p479f1">Figure</xref>
      depicts the sequence of actions and events that occur when the the user clicks a button.
    </p>
    <p>
      The methods used to handle the <c>ActionEvent</c> are derived from the <image width="73%" source="chptr13/p479f2.png"/> \caption{An <c>EventObject</c>. The <c>getSource()</c> method is used to get the object that caused the event. }<c>java.util.EventObject</c> class,
      the root class for all events (Fig.<nbsp/>13.8).
      Our example (Fig.
      <xref ref="fig-clickme"></xref>) uses the <c>getSource()</c> method to get a reference to the object that generated the event.
      To see what information is contained in an event object,
      we can use the <c>toString()</c> method to print a string representation of the event that was generated.
      Here's what it displays:
    </p>
 <program language="java"><input>
java.awt.event.ActionEvent[ACTION_PERFORMED,cmd=ClickMe]
  on javax.swing.JButton[,58,5,83x27,
  layout=javax.swing.OverlayLayout]
 </input></program>
    <p>
      As you can see,
      the event generated was an <c>ACTION_PERFORMED</c> event,
      in response to the <c>ClickMe</c> command.
      The source of the event was the <c>JButton</c>.
    </p>
  </introduction>
  <subsection xml:id="self-study-exercisesA32">
    <title>Event Classes</title>
    <p>
      Although the event model is the same for both AWT and Swing classes,
      the Swing package introduces many additional events.
      Table<nbsp/>13.1 lists the events that are generated by both AWT and Swing components.
      You already have worked with some of these.
      We have written GUIs that handled <c>ActionEvent</c> s for <c>JButton</c> s and
<c>JTextField</c> s in preceding chapters.
    </p>
    <table>
      \TBTvar{0pc}{Java's <c>AWTEvent</c> s<idx><h>AWTEvent</h></idx> for each <c>Component</c> type
      (Original source: David Flanagan,
      <em>Java in a Nutshell</em>, 2d ed., O'Reilly Associates, 1997. Modified for Swing components.)}
      
      <tabular>
        <row>
          <cell><c>__________</c></cell>
        </row>
        <row>
          <cell>{Components}</cell>
          <cell>{Events}</cell>
          <cell>{Description}</cell>
        </row>
        <row>
          <cell><c>__________</c></cell>
        </row>
        <row>
          <cell><c>Button, JButton</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User clicked button\cr
<c>CheckBox, JCheckBox</c></cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User toggled a checkbox\cr
<c>CheckboxMenuItem, JCheckboxMenuItem</c></cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User toggled a checkbox\cr
<c>Choice, JPopupMenu</c></cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User selected a choice\cr
<c>Component, JComponent</c></cell>
          <cell><c>ComponentEvent</c></cell>
          <cell>Component was moved or resized\cr</cell>
          <cell><c>FocusEvent</c></cell>
          <cell>Component acquired or lost focus\cr</cell>
          <cell><c>KeyEvent</c></cell>
          <cell>User typed a key\cr</cell>
          <cell><c>MouseEvent</c></cell>
          <cell>User manipulated the mouse\cr
<c>Container, JContainer</c></cell>
          <cell><c>ContainerEvent</c></cell>
          <cell>Component added/removed from container\cr
<c>List, JList</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User double-clicked a list item\cr</cell>
          <cell><c>ItemEvent</c></cell>
          <cell>User clicked a list item\cr
<c>Menu, JMenu</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User selected menu item\cr
<c>Scrollbar, JScrollbar</c></cell>
          <cell><c>AdjustmentEvent</c></cell>
          <cell>User moved scrollbar\cr
<c>TextComponent, JTextComponent</c></cell>
          <cell><c>TextEvent</c></cell>
          <cell>User edited text\cr
<c>TextField, JTextField</c></cell>
          <cell><c>ActionEvent</c></cell>
          <cell>User typed Enter key\cr
<c>Window, JWindow</c></cell>
          <cell><c>WindowEvent</c></cell>
          <cell>User manipulated window</cell>
        </row>
        <row>
          <cell><c>__________</c></cell>
        </row>
      </tabular>
      \endTB
    </table>
    <p>
      In viewing Table<nbsp/>13.1, it's important to remember that the classes listed there are arranged in a hierarchy.
      This will affect the events that a particular object can generate.
      For example,
      a
<c>JButton</c> is a <c>JComponent</c>(Fig.
      <xref ref="fig-swing2-guis"></xref>),
      so in addition to generating <c>ActionEvent</c> s when the user clicks on it,
      it can also generate <c>MouseEvent</c> s when the user moves the mouse over it.
      Similarly, because a <c>JTextField</c> is also a <c>JComponent</c>, it can generate <c>KeyEvent</c> s as well as <c>ActionEvent</c> s.
    </p>
    <p>
      Note that the more generic events,
      such as those that involve moving, focusing,
      or resizing a component, are associated with the more generic components.
      For example,
      the <c>JComponent</c> class contains methods that are used to manage <c>ComponentEvent</c> s.
      Because they are subclasses of <c>JComponent</c>, <c>JButton</c> s and <c>JTextField</c> s can also use these methods.
      Defining the more generic methods in the <c>JComponent</c> superclass is another example of the effective use of inheritance.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN:Inheritance</title>
      <p>
        The higher a method is defined in the inheritance hierarchy,
        the broader is its use.
      </p>
    </principle>
    <p>
      Table<nbsp/>13.2 lists events that are new with the Swing classes.
      Some of the events apply to new components.
      For example,
<c>JTable</c> and <c>JTree</c> do not have AWT counterparts.
      Other events provide Swing components with capabilities that are not available in their AWT counterparts.
      For example,
      a <c>CaretEvent</c> allows the programmer to have control over mouse clicks that occur within a text component.
    </p>
    <table>
      \TBT{-5.5pc}{Some of the events that are defined in the Swing library.}
      
      <tabular>
        <row>
          <cell><c>__________</c></cell>
        </row>
        <row>
          <cell>{Component}</cell>
          <cell>{Events}</cell>
          <cell>{Description}</cell>
        </row>
        <row>
          <cell><c>__________</c></cell>
        </row>
        <row>
          <cell><c>JPopupMenu</c></cell>
          <cell><c>PopupMenuEvent</c></cell>
          <cell>User selected a choice\cr
<c>JComponent</c></cell>
          <cell><c>AncestorEvent</c></cell>
          <cell>An event occurred in an ancestor\cr
<c>JList</c></cell>
          <cell><c>ListSelectionEvent</c></cell>
          <cell>User double-clicked a list item\cr</cell>
          <cell><c>ListDataEvent</c></cell>
          <cell>List's contents were changed\cr
<c>JMenu</c></cell>
          <cell><c>MenuEvent</c></cell>
          <cell>User selected menu item\cr
<c>JTextComponent</c></cell>
          <cell><c>CaretEvent</c></cell>
          <cell>Mouse clicked in text\cr</cell>
          <cell><c>UndoableEditEvent</c></cell>
          <cell>An undoable edit has occurred\cr
<c>JTable</c></cell>
          <cell><c>TableModelEvent</c></cell>
          <cell>Items added/removed from table\cr</cell>
          <cell><c>TableColumnModelEvent</c></cell>
          <cell>A table column was moved\cr
<c>JTree</c></cell>
          <cell><c>TreeModelEvent</c></cell>
          <cell>Items added/removed from tree\cr</cell>
          <cell><c>TreeSelectionEvent</c></cell>
          <cell>User selected a tree node\cr</cell>
          <cell><c>TreeExpansionEvent</c></cell>
          <cell>User expanded or collapsed a tree node\cr
<c>JWindow</c></cell>
          <cell><c>WindowEvent</c></cell>
          <cell>User manipulated window</cell>
        </row>
        <row>
          <cell><c>__________</c></cell>
        </row>
      </tabular>
      \endTB
    </table>
    <p>
      Tables<nbsp/>13.1 and 13.2 provide only a brief summary of these classes and Swing components.
      For further details you should consult the JDK online documentation at
    </p>
    <p>
       }
    </p>
 <program language="java"><input>
http://java.sun.com/j2se/1.5.0/docs/api/
 </input></program>
    </subsection><subsection><title>Self-Study Exercises</title>
      <ol>
        <li>
          <p>
            Is it possible to register a component with more than one listener?
          </p>
        </li>
        <li>
          <p>
            Is it possible for a component to have two different kinds of listeners?
          </p>
        </li>
      </ol>
  </subsection>
</section>