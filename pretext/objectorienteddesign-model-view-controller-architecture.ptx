<section xml:id="objectorienteddesign-model-view-controller-architecture">
  <title>OBJECT-ORIENTED DESIGN:
  Model-View-Controller Architecture</title>
  <introduction>
    <p>
      Java's Swing components have been implemented using an object-oriented design known as the
      <term>model-view-controller (MVC)</term> model.
      Any Swing component can be considered in terms of three independent aspects:
      what state it's in
      (its model),
      how it looks
      (its view),
      and what it does
      (its controller).
    </p>
    <p>
      For example,
      a button's role is to appear on the interface waiting to be clicked.
      When it is clicked, the button's appearance changes.
      It looks pushed in or it changes color briefly,
      and then it changes back to its original (unclicked) appearance.
      In the MVC model,
      this aspect of the button is its <term>view</term>.
          <idx><h>view</h></idx>
      If you were designing an interface  for a button,
      you would need visual representations for both the clicked and the unclicked button
      (as well as other possible states).
    </p>
    <p>
      When you click a button,
      its internal state changes from pressed to unpressed.
      You've also probably seen buttons that were disabled<mdash/>that is,
      in a state where they just ignore your clicks.
      Whether a button is enabled or disabled and whether it is pressed or  not are properties of its internal state.
      Taken together,
      such properties constitute the button's <term>model</term>.
          <idx><h>model</h></idx>
      Of course, a button's view<mdash/>how it looks<mdash/>depends on its model.
      When a button is pressed,
      it has one appearance, and when it is disabled, it has another.
    </p>
    <p>
      Because a button's state will change when it is clicked or when it is enabled by the program,
      some object needs to keep track of these changes.
      That part of the component is its <em>controller</em>.
          <idx><h>controller</h></idx>
      
    </p>
    <p>
      <xref ref="fig-mvc">Figure</xref>
      shows how the button's model, view,
      and controller interact with each other.
      Suppose the user clicks the button.
      This action is detected by the controller.
      Whenever the mouse button is pressed,
      the controller tells the model to change into the pressed state.
      The model, in turn, generates an event that is passed to the view.
      The event tells the view that the button needs to be redrawn to reflect its change in state.
    </p>
    <figure xml:id="fig-mvc">
      <caption>The model-view- controller architecture.</caption>
      <image width="73%" source="chptr13/9f3.png"/>
    </figure>
    <p>
      When the mouse button is released,
      a similar sequence of events occurs.
      The model is told to change to the unpressed state.
      It in turn generates an event,
      handled by the view, which changes the button's appearance.
    </p>
    <p>
      A change in the button's appearance does not necessarily depend on direct action by the user.
      For example,
      the program itself could call a method that disables the button.
      In this case,
      the program issues a command directly to the model,
      which in turn generates an event that causes the view to change the object's appearance.
    </p>
    <p>
      For some Swing components, such as the text components,
      this three-part model is implemented almost exactly as we just described.
      For others, such as <c>JButton</c>, one class is used to implement both the view and the controller.
      The <c>JButton</c> model is defined in the <c>DefaultButtonModel</c> class,
      and its view and controller are defined in the <c>BasicButtonUI</c> class (The <c>UI</c> acronym stands for User Interface).
      The point is that for some components, Swing has organized the view and control<mdash/>the look and the feel<mdash/>into a single class.
    </p>
  </introduction>
  <subsection xml:id="fig-lafs">
    <title>Pluggable Look and Feel</title>
    <p>
      The MVC model uses a clear division of labor to implement a GUI component.
      The main advantage of this design is the independence between the model,
      the view, and the controller.
      If you want to give a button a different look and feel,
      you can redefine its view and its controller.
    </p>
    <p>
      By combining the view and controller into a single class, Swing makes it even easier to change a component's look and feel.
      For example,
      to design your own look and feel for a <c>JButton</c>, you would define a class that implemented all of the methods in the
<c>BasicButtonUI</c>. Of course,
      this is a job for an experienced software developer.
    </p>
    <p>
      However, if you just want to set your program to use one of the pre-defined look and feel models,
      you can simply use the <c>UIManager.setLookAndFeel()</c> method:
    </p>
 <program language="java"><input>
public static void main (String args[]){
  try{
     UIManager.setLookAndFeel(
        "javax.swing.plaf.metal.MetalLookAndFeel");
  }catch (Exception e) {
     System.out.err("Exception: " + e.getMessage());
  }}//main()
 </input></program>
    <p>
      Java's default, the <em>Metal</em> look and feel,
      has been designed specifically for Java applications.
      For a Windows look,
      you can use the following argument:
<c>com.sun.java.swing.plaf.windows.WindowsLookAndFeel</c>.
    </p>
    <p>
      Figure<nbsp/>13.4 <image width="73%" source="chptr13/9f4.png"/> shows how the simple application would appear under the three different look-and-feel styles.
    </p>
    <subsection><title>Self-Study Exercise</title>
      <ol>
        <li>
          <p>
            The MVC architecture is a model of object-oriented design.
            But if a
<c>JButton</c> is really composed of three separate parts,
            how can we still call it a component?
            Isn't it really three things?
          </p>
        </li>
      </ol>
  </subsection>
</section>