<section xml:id="example-counting-frequenciesof-letters">
  <title>Example: Counting Letter Frequencies</title>
  <introduction>
    <p>
      Suppose you wish to write a program to help break a text message that has been 
      encrypted with one of the historical ciphers that we have discussed in the 
      two previous chapters.
    </p>
    <p>
      It is well known that historical ciphers often can be broken,
      that is, the plaintext can be found from the ciphertext,
      by examining the frequencies of letters and comparing them to the average 
      frequencies of typical samples of plaintext.
      For example, <c>E</c> and <c>T</c> are the two most frequent letters in the 
      English language.
      So, in a ciphertext encrypted with a Caesar cipher, <c>E</c> and <c>T</c> are 
      good guesses as the plaintext letter corresponding to the most 
      frequent letter in a ciphertext message.
    </p>
    <p>
      Let's write a program that will count how many times each of the <c>26</c> letters 
      appears in a given string.
      There are a number of ways to design such a program depending on how flexible 
      you wish the program to be.
    </p>
    <p>
      Let's keep this example simple by assuming that we will only be interested 
      in counting occurrences of the letters <c>A</c> through <c>Z</c> and not of 
      occurrences of spaces or punctuation marks.
      Assume further that we will change lowercase letters in our string sample to 
      uppercase before counting letters and that we will want to print out 
      the frequencies of letters to the console window.
    </p>
    <p>
      Finally, assume that,
      later in the chapter after we discuss sorting arrays,
      we will want to enhance our program so that it can print out the 
      letter frequencies in order of increasing frequency.
    </p>
  </introduction>
  <subsection xml:id="fig-letfrequml">
    <title>A Class to Store the Frequency of One Letter</title>
    <p>
      It is clear that an array should be used for storing the frequencies,
      but a decision must also be made as to what to store as the array elements.
      If we store letter frequencies as <c>int</c> values,
      with the frequency of <em>A</em>
      stored at index 0, and the frequency of <em>B</em>
      at index 1, and so forth,
      we will not be able to rearrange the frequencies into increasing order without losing track of which letter corresponds to which frequency.
      One way of solving this problem is to create an array of objects,
      where each object stores both a letter and its frequency.
    </p>
    <p>
      So let us design a <c>LetterFreq</c> class that stores a letter in an instance variable of type <c>char</c> and its frequency in an instance variable of type <c>int</c>. These instance variables can be declared as:
    </p>
 <program language="java"><input>
 private char letter;    //A character being counted
 private int freq;       //The frequency of letter
 </input></program>
    <p>
      We will want a constructor that can initialize these two values 
      and two accessor methods to return these values.
      We are familiar enough with these kinds of methods that 
      it will not be necessary to discuss them any further.
      We need one additional method to increment <c>freq</c> whenever 
      we encounter the letter while processing the string:
    </p>
 <program language="java"><input>
public void incrFreq() {
     freq++;
 } //setFreq()
 </input></program>
    <p>
      A UML diagram for the <c>LetterFreq</c> class is given in 
      <xref ref="fig-letterfrequml">Figure</xref> 
      and the class definition is given in <xref ref="lst-letfreq">Listing</xref>.
    </p>
    <figure xml:id="fig-letterfrequml">
      <caption>The <c>LetterFreq</c> class.</caption>
      <image width="40%" source="chptr09/letfrequml.png"/>
    </figure> 
    <listing xml:id="lst-letfreq">
      <caption>The <c>LetterFreq</c> class definition.</caption>
 <program language="java"><input>
public class LetterFreq {
    private char letter;    //A character being counted
    private int freq;       //The frequency of letter
    public LetterFreq(char ch, int fre) {
        letter = ch;
        freq = fre;
    }
    public char getLetter() {
        return  letter;
    }
    public int getFreq() {
        return  freq;
    }
    public void incrFreq() {
        freq++;
    }} //LetterFreq
 </input></program>
    </listing>
    <p>
      Note that we will have to make a minor modification to this class 
      later in this chapter to enable us to sort an array of objects from this class.
    </p>
  </subsection>
  <subsection xml:id="sunsec-anafrequml">
    <title>A Class to Count Letter Frequencies</title>
    <p>
      Now let us turn to designing a class named <c>AnalyzeFreq</c> that 
      will use an array of objects of type <c>LetterFreq</c> to count the 
      frequencies of the letters <c>A</c> through <c>Z</c> in a given string.
    </p>
    <p>
      The array, let's call it <c>freqArr</c>, will be the only instance variable of the class.
      The class needs a constructor to instantiate the array and to create the <c>26</c> array elements,
      each with a different letter and an initial frequency of <c>0</c>. 
      This class should also have two methods:
      a method to count the frequencies of the <c>26</c> letters in a given string 
      and a method that prints out the frequency 
      of each letter to the console window.
      The UML diagram for the class is given in <xref ref="fig-anafrequml">Listing</xref>.
    </p>
    <figure xml:id="fig-anafrequml">
      <caption>The <c>LetterFreq</c> class.</caption>
      <image width="40%" source="chptr09/anafrequml.png"/> 
    </figure> 
    <p>
      The array instance variable can be declared by:
    </p>
 <program language="java"><input>
private LetterFreq[] freqArr; //An array of frequencies
 </input></program>
    <p>
      The constructor creates an array of <c>26</c> elements to store 
      references to <c>LetterFreq</c> objects with the statement
    </p>
 <program language="java"><input>
freqArr = new LetterFreq[26];
 </input></program>
    <p>
      The indices of the array range from <c>0</c> to <c>25</c> and 
      the elements at these locations should store the letters <c>A</c> to
      <c>Z</c>. Recall that in Java, <c>char</c> data are a form of <c>int</c> 
      data and can be used in arithmetic.
      If we let <c>k</c> be an integer that ranges between <c>0</c> and <c>25</c>, 
      then the expression <c>(char)('A' + k)</c> will correspond to the 
      letters <c>A</c> to <c>Z</c>. . Thus,
      the following loop will initialize the array correctly.
    </p>
 <program language="java"><input>
for (int k = 0; k &lt; 26; k++) {
    freqArr[k] = new LetterFreq((char)('A' + k), 0);
} //for
 </input></program>
    <p>
      The <c>countLetters()</c> method must identify the array index 
      for <c>LetterFreq</c> object that stores a letter between 
      <c>A</c> and <c>Z</c>. If <c>let</c> is a <c>char</c> variable 
      that stores such a letter,
      then the expression <c>(let - 'A')</c> will give the index of 
      the array element corresponding to <c>let</c>. 
      Thus the following code will calculate the frequencies of the 
      letters in the string parameter, <c>str</c>:
    </p>
 <program language="java"><input>
public void countLetters(String str) {
     char let;     //For use in the loop.
     str = str.toUpperCase();
     for (int k = 0; k &lt; str.length(); k++) {
         let = str.charAt(k);
         if ((let >= 'A') &amp;&amp; (let &lt;= 'Z')) {
             freqArr[let - 'A'].incrFreq();
         } //if
     } //for
 } //countLetters()
 </input></program>
    <p>
      The definition of the <c>printArray()</c> method is completely straight forward:
    </p>
 <program language="java"><input>
public void printArray() {
  for (int k = 0; k &lt; 26; k++) {
    System.out.print("letter: " + freqArr[k].getLetter());
    System.out.println("   freq: " + freqArr[k].getFreq());
  } //for
} //printArray()
 </input></program>
    <p>
      The entire definition of <c>AnalyzeFreq</c> is
      given in <xref ref="lst-anafreq">Figure</xref>.
      We will modify this class later in the chapter to be able to sort 
      the array after counting.
    </p>
    <listing xml:id="lst-anafreq">
      <caption>The <c>AnalyzeFreq</c> class definition.</caption>
      
 <program language="java" interactive="activecode"><input>
public class AnalyzeFreq {

  private LetterFreq[] freqArr; //An array of frequencies
  
  public AnalyzeFreq() {
    freqArr = new LetterFreq[26];
    for (int k = 0; k &lt; 26; k++) {
      freqArr[k] = new LetterFreq((char)('A' + k), 0);
    } //for
  }
  public void countLetters(String str) {
    char let; //For use in the loop.
    str = str.toUpperCase();
    for (int k = 0; k &lt; str.length(); k++) {
      let = str.charAt(k);
      if ((let >= 'A') &amp;&amp; (let &lt;= 'Z')) {
        freqArr[let - 'A'].incrFreq();
      } //if
    } //for
  }
  public void printArray() {
    for (int k = 0; k &lt; 26; k++) {
      System.out.print("letter: " + freqArr[k].getLetter());
      System.out.println(" freq: " + freqArr[k].getFreq());
    } //for
  } 
} //AnalyzeFreq
 </input></program>
</listing>
    <p>
      We leave the coding of the <c>main()</c> method as an exercise.
    </p>

<exercises>
<title>Self-Study Exercises</title>
<exercise label="count-letters">
<title>Letter Frequencies</title>
   <statement>
          <p>
            Add a 
            <c>main()</c> method to 
            the <c>AnalyzeFreq</c> class that will count the letter
            frequencies in the sentence <q>Now is the time for all good students to study 
            computer related topics</q>.
          </p>
    </statement>
    <solution>
 <program language="java"><input>
    public static void main(String[] argv) {
      AnalyzeFreq af = new AnalyzeFreq();
      af.countLetters("Now is the time for all good students" +
        " to study computer related topics.");
      af.printArray();
    } //main()
 </input></program>    
 </solution>
 </exercise>
 </exercises>
  </subsection>
</section>