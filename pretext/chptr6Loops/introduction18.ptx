<section xml:id="introduction18">
  <title>Introduction</title>
  <p>
    As we learned in Chapter<nbsp/>3,
    a control structure is a language element that changes the flow of control of a program.
    Thus far, we have used the <c>if</c> and <c>if/else</c> statements to select between two or more alternate paths in a program.
    We have used the <c>while</c>-loop structure to repeat statements.
    And we have used method-call-and-return to invoke methods that carry out certain well-defined tasks in a program.
  </p>
  <p>
    In this chapter we will extend our repertoire of control structures.
    We will introduce the <em>for</em>
    and <em>do-while</em> statements,
    both of which are used in programs that require calculations to be repeated.
    We will also introduce the <c>switch</c> statement,
    which will give us another way,
    in addition to <c>if/else</c>, to select from among several alternate paths in a program.
  </p>
  <p>
    We begin by introducing the idea of a <em>counting loop</em>,
    which is used for repetitive tasks when you know beforehand exactly how many repetitions are necessary.
    This type of loop is most often implemented using a <c>for</c> statement.
  </p>
  <p>
    We then distinguish two kinds of
    <em>conditional loops</em>,
    which are used for performing repetitive tasks where the number of repetitions depends on some kind of non-counting condition.
    These kinds of loops are usually implemented using Java's <c>while</c> and <c>do-while</c> statements.
    We give examples of several kinds of <em>loop bounds</em>
    and use them to identify several useful principles of loop design.
    Finally, we introduce some of the key principles of the
    <em>structured programming</em> approach,
    a disciplined design approach that preceded the object-oriented approach.
  </p>
</section>