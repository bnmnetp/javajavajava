<section xml:id="enumeration">
  <title>Enumeration</title>
  <p>
    A new <term>enumeration</term> construct was included in Java 5.0 to make it simpler to represent a finite list of named values as a type.
    The <term>enum</term> keyword was added as part of this construct.
    Standard examples of lists of values appropriate for enumerations are the days of the week,
    months of the year, the four seasons, the planets,
    the four suits in a deck of cards,
    and the ranks of cards in a deck of cards.
    The following declaration of <c>Season</c> enumerated type is an example used by the Sun online documentation.
  </p>
 <program language="java"><input>
public enum Season {spring, summer, fall, winter}
 </input></program>
  <p>
    Compiling a file that contains only this statement will create a
<c>Season.class</c> file that defines a Java type just in the same way that compiling class definitions does.
    The variables and values of type
<c>Season</c> can be referred to in other classes just like other types and values.
    For example,
    the following statements are valid statements in a method definition in another class:
  </p>
 <program language="java"><input>
Season s1 = winter;
if (s1 == spring)
    System.out.println(s1);
 </input></program>
  <p>
    Note that the values of enumerated types can be used in assignment statements,
    equality relations,
    and it will be printed out exactly as declared in the <c>enum</c> statement.
  </p>
  <p>
    The <c>enum</c> declaration could also occur inside the definition of a class and be declared as either <c>public</c> or <c>private</c>. In this case the visibility of the type would be determined in a manner similar to inner classes.
  </p>
  <p>
    A standard way to represent such a finite list of values in Java before the
<c>enum</c> construct was to create a list of constants of type <c>int</c>. For example,
    if one wanted to represent the four seasons you would have to do it inside a definition of a class,
    say of a class named <c>Calendar</c>. Such a representation might look like:
  </p>
 <program language="java"><input>
public class Calendar {
    public static final int SPRING = 0;
    public static final int SUMMER = 1;
    public static final int FALL = 2;
    public static final int WINTER = 3;
    // Other Calendar definitions
    } // Calendar
 </input></program>
  <p>
    In addition to being a lengthier declaration,
    note that other classes that wish to refer to this representation would have to use notation something like:
  </p>
 <program language="java"><input>
int s1 = Calendar.WINTER;
if (s1 == Calendar.SPRING)
    System.out.println(s1);
 </input></program>
  <p>
    In addition to being more awkward,
    note that the <c>println()</c> call will print out an integer in this case.
    Some additional code would have to be written to be able to print the names of the seasons from the
<c>int</c> values used to represent them.
    It is the case that for methods in the
<c>Calendar</c> class,
    the names of the constants look very much like the values of the <c>enum</c> type.
  </p>
  <p>
    To illustrate a couple of additional advantages of the <c>enum</c> structure,
    lets consider using the <c>int</c> representation above in a method definition that describes the start date of a given season.
    Code for such a method would look something like:
  </p>
 <program language="java"><input>
public static String startDate(int s){
        switch(s){
        case SPRING : return "Vernal Equinox";
        case SUMMER : return "Summer Solstice";
        case FALL : return "Autumnal Equinox";
        case WINTER : return "Winter Solstice";
        } // switch
        return "error";
    } // startDate()
 </input></program>
  <p>
    This method has a problem referred to as not being <term>typesafe</term>.
    We would want the <c>startDate()</c> method to be called only with an argument equal to an <c>int</c> value of 0, 1, 2, or 3.
    There is no way to tell the compiler to make sure that other <c>int</c> values are not used as an argument to this method.
  </p>
  <p>
    Let's contrast this with a similar <c>startDate()</c> method that can refer to the <c>Season</c> enumerated type that was defined above.
    The <c>Calendar</c> class (Figure<nbsp/>G<ndash/>1) shows the definition of a <c>startDate()</c> method as well as a method to print a list of seasons with corresponding starting dates.
  </p>
  <figure xml:id="fig-calendar">
    <caption>A Calendar class using the <c>Season</c>.</caption>
 <program language="java"><input>
public class Calendar {
    public static String startDate(Season s){
        switch(s){
        case spring : return "Vernal Equinox";
        case summer : return "Summer Solstice";
        case fall : return "Autumnal Equinox";
        case winter : return "Winter Solstice";
        } // switch
        return "error";
    } // startDate()
    public static void printDates(){
        for (Season s : Season.values())
            System.out.println(s + " - " + startDate(s));
    } // printDates()} // Calendar
 </input></program>
  </figure>
  <p>
    Note that the parameter of <c>startDate()</c> is of type <c>Season</c> and so the Java compiler can check that call to this method have an argument of this type.
    This time the <c>startDate()</c> is typesafe.
  </p>
  <p>
    The <c>printDates()</c> method illustrates another feature of the enumeration structure.
    The <c>for</c> loop in this method is the
<c>for-in</c> loop which was added to Java 5.0.
    The expression
<c>Season.values()</c> denotes a list of the elements of the type in the order that they were declared.
    The <c>for-in</c> loop iterates through all the values of the type in the correct order and,
    in this case,
    prints out the type name followed by a dash followed by the <c>String</c> computed by the <c>startDate()</c> method.
    The output when the <c>printDates()</c> method is called is given below:
  </p>
 <program language="java"><input>
spring - Vernal Equinox
summer - Summer Solstice
fall - Autumnal Equinox
winter - Winter Solstice
 </input></program>
  <p>
    The <c>for-in</c> loop provides a very nice way to iterate through the values of any enumerated type.
    You may wish to write a corresponding method for the earlier <c>int</c> representation of the seasons for a comparison.
  </p>
  <p>
    Sun's online Java 5.0 documentation provides a more precise definition of enumerated types and describes quite a number of other features that we have not alluded to.
  </p>
</section>