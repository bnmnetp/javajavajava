<section xml:id="two-dimensional-arrays">
  <title>Two-Dimensional Arrays</title>
  <introduction>
    <p>
      A <term>two-dimensional array</term>,
      an array whose components are themselves arrays,
      is necessary or useful for certain kinds of problems.
      For example,
      you would use this type of array if you are doing a scientific study in 
      which you have to track the amount of precipitation for every day of the year.
    </p>
    <p>
      One way to organize these data would be to create a one-dimensional array,
      consisting of 365 elements:
    </p>
 <program language="java"><input>
double rainfall[] = new double[365];
 </input></program>
    <p>
      However, with this representation,
      it would make it very difficult to calculate the average rainfall within a given month,
      which might be an important part of your study.
    </p>
    <p>
      A better representation for this problem would be to  use a two-dimensional array,
      one dimension for the months and one for the days.
      The following statement declares the array variable <c>rainfall</c> and creates a 
      12 by 31 array object as its reference:
    </p>
 <program language="java"><input>
double rainfall[][] = new double[12][31];
 </input></program>
    <p>
      Thus, <c>rainfall</c> is an
      <em>array of arrays</em>.
      You can think of the first array as the 12 months required for the problem.
      And you can think of each month as an array of 31 days.
      The months will be indexed from 0 to 11,
      and the days will be indexed from 0 to 30.
    </p>
    <p>
      The problem with this representation is that when we want to refer to  the 
      rainfall for January 5, we would have to use
<c>rainfall[0][4]</c>. This is awkward and misleading.
      The problem is that dates<mdash/>1/5/1999<mdash/>are unit indexed,
      while arrays are zero indexed.
      Because it will be difficult to remember this fact,
      our representation of the rainfall data may cause us to make errors when we 
      start writing our algorithms.
    </p>
    <p>
      We can easily remedy this problem by just defining our array to have an extra 
      month and an extra day each month:
    </p>
 <program language="java"><input>
double rainfall[][] = new double[13][32];
 </input></program>
    <p>
      This representation creates an array with 13 months,
      indexed from 0 to 12, with 32 days per month, indexed from 0 to 31.
      However, we can simply ignore the 0 month and 0 day by using unit indexing 
      in all of the algorithms that process the array.
      In other words, if we view this array as a two-dimensional table,
      consisting of 13 rows and 32 columns,
      we can leave row 0 and column 0 unused (Fig.
      <xref ref="fig-rainfall"></xref>).
    </p>
    <figure xml:id="fig-rainfall">
      <caption>A two-dimensional array with 13 rows
      and 32 columns.  To represent 12 months of the year, we can simply
      ignore row 0 and column 0.</caption>
      <image width="73%" source="chptr09/8f14.png"/>
    </figure>
    <p>
      As <xref ref="fig-rainfall">Figure</xref> shows,
      the very first element of this 416-element array has subscripts (0,0) 
      while the last location has subscripts (12,31).
      The main advantages of this representation is that the program as a 
      whole will be much easier to read and understand and much less prone to error.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Readability</title>
      <p>
        To improve a program's robustness and readability,
        it may be preferable to use unit array indexing by declaring extra array 
        elements and ignoring those with index 0.
      </p>
    </principle>
    <p>
      In order to refer to an element in a two-dimensional array,
      you need to use two subscripts.
      For the <c>rainfall</c> array,
      the first subscript will specify the <em>month</em>
      and the second will specify the
      <em>day</em> within the month.
      Thus, the following statements assign 1.15 to the <c>rainfall</c> element 
      representing January 5, and then print its  value:
    </p>
 <program language="java"><input>
rainfall[1][5] = 1.15;   // Rainfall for January 5
System.out.println( rainfall[1][5] );
 </input></program>
    <p>
      Just as in the case of one-dimensional arrays,
      it is an error to attempt to reference an element that is not in the array.
      Each of the following examples would cause Java to raise an
<c>IndexOutOfBoundsException</c>:
          <idx><h>IndexOutOfBoundsException</h></idx>
    </p>
 <program language="java"><input>
rainfall[13][32] = 0.15 ;  // No such element
rainfall[11][33] = 1.3;    // No such column
rainfall[14][30] = 0.74;   // No such row
 </input></program>
    <p>
      If the initial values of an array's elements are supposed to be zero,
      there is no need to initialize the elements.
      Java will do it automatically when you create the array with <c>new</c>. However,
      for  many array problems it is necessary to initialize the array elements to some other value.
      For a two-dimensional array, this would require a nested loop.
      To illustrate this algorithm,
      let's use a nested for loop to initialize each element of the <c>rainfall</c> array to 0:
    </p>
 <program language="java"><input>
// Note that both loops are unit indexed.
for (int month = 1; month &lt; rainfall.length; month++)
  for (int day = 1; day &lt; rainfall[month].length; day++)
     rainfall[month][day] = 0.0;
 </input></program>
    <p>
      Note that both for loops use unit indexing.
      This is in keeping with our decision to leave month 0 and day 0 unused.
    </p>
    <p>
      Remember that when you have a nested for loop,
      the inner loop iterates  faster than the outer loop.
      Thus, for each month, the inner loop will iterate over 31 days.
      This is equivalent to processing the array as if you were going across each row and then down to the next row in the representation shown in <xref ref="fig-rainfall">Figure</xref>.
    </p>
    <p>
      Note that for a two-dimensional array,
      both dimensions have an associated <c>length</c> variable,
      which is used in this example to specify the upper bound of each for loop.
      For the <c>rainfall</c> array,
      the first dimension (months) has a length of 13 and the second dimension (days) has a length of 32.
    </p>
    <p>
      Another way to view the <c>rainfall</c> array is to remember that it is an array of arrays.
      The length of the first array,
      which  corresponds to the number (13) of months,
      is given by
      <c>rainfall.length</c>. The length of each month's array,
      which corresponds to the number of days (32) in a month,
      is given by
      <c>rainfall[month].length</c>.
    </p>
    <p>
      The outer loop of the nested for loop iterates through months 1 through 12,
      and the inner for loop iterates through days 1 through 31.
      In this way,
      <m>372\; =\; 12\;\times\; 31</m> elements of the array are set to 0.0.
      In <xref ref="tab-rinfall">Table</xref>, the numbers in curly brzces along the 
      top represent the day subscripts,
      while the numbers in curly braces along the left represent the month subscripts.
    </p>
    <table xml:id="tab-rinfall">
      <title>The initialized <c>rainfall</c> array.  The unused array
      elements are shown as dashes.</title>
      
      <tabular>
        <row bottom="minor" left="minor">
          <cell></cell>
          <cell>{0}</cell>
          <cell>{1}</cell>
          <cell>{2}</cell>
          <cell>{3}</cell>
          <cell>{<m>\cdots</m>}</cell>
          <cell>{30}</cell>
          <cell>{31}</cell>
        </row>
        <row>
          <cell>{0}</cell>
          <cell><ndash/></cell>
          <cell><ndash/> </cell>
          <cell> <mdash/> </cell>
          <cell><ndash/> </cell>
          <cell><m>\cdots</m> </cell>
          <cell> <ndash/></cell>
          <cell>
            <ndash/></cell>
        </row>
        <row>
          <cell>{1}</cell>
          <cell><mdash/></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell><m>\cdots</m></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
        </row>
        <row>
          <cell>{2}</cell>
          <cell><mdash/></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell><m>\cdots</m></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
        </row>
        <row>
          <cell>{<m>\vdots</m>}</cell>
          <cell><m>\vdots</m></cell>
          <cell><m>\vdots</m></cell>
          <cell><m>\vdots</m></cell>
          <cell><m>\vdots</m></cell>
          <cell><m>\vdots</m></cell>
          <cell><m>\vdots</m></cell>
          <cell><m>\vdots</m></cell>
        </row>
        <row>
          <cell>{10}</cell>
          <cell><mdash/></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell><m>\cdots</m></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
        </row>
        <row>
          <cell>{11}</cell>
          <cell><mdash/></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell><m>\cdots</m></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
        </row>
        <row bottom="minor">
          <cell>{12}</cell>
          <cell><mdash/></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
          <cell><m>\cdots</m></cell>
          <cell>0.0</cell>
          <cell>0.0</cell>
        </row>
      </tabular>
    </table>
    </introduction>
    <subsection><title>Self-Study Exercises</title>
      <ol>
        <li>
          <p>
            Declare a two-dimensional array of <c>int</c>, named <c>int2d</c>, that contains five rows,
            each of which contains ten integers.
          </p>
        </li>
        <li>
          <p>
            Write a statement that prints the last integer in the third row of the array 
            that you created in the previous exercise.
            Then write an assignment statement that assigns 100 to the 
            last element in the <c>int2d</c> array.
          </p>
        </li>
        <li>
          <p>
            Write a loop to print all of the elements of <c>int2d</c>, 
            which you declared in the previous exercise.
            Print one row per line with a space between each element on a line.
          </p>
        </li>
      </ol>
  </subsection>
  <subsection>
    <title>Two-Dimensional Array Methods</title>
    <introduction>
      <p>
        Now that we have figured out how to represent the data for our scientific experiment,
        let's develop methods to calculate some results.
        First, we want a method to initialize the array.
        This method will simply incorporate the nested loop algorithm we developed previously:
      </p>
 <program language="java"><input>
public void initRain (double rain[][]) {
    for (int month = 1; month &lt; rain.length; month++)
        for (int day = 1; day &lt; rain[month].length; day++)
            rain[month][day] = 0.0;
} // initRain()
 </input></program>
      <p>
        Note how we declare the parameter for a multidimensional array.
        In addition to the element type (<c>double</c>), and the name of  
        the parameter (<c>rain</c>), we must also include a set of brackets for
        <em>each</em> dimension of the array.
      </p>
      <p>
        Note also that we use the parameter name within the method to refer to the array.
        As with one-dimensional arrays,
        the parameter is a reference to the array,
        which means that any changes made to the array within 
        the method will persist when the method is exited.
      </p>
    </introduction>
    <subsubsection>
      <title>The <c>avgDailyRain()</c>Method</title>
      <p>
        One result that we need from our experiment is the average daily  rainfall.
        To calculate this result,
        we would add up all of the rainfalls stored in the
        <m>12 \;\times\; 31</m> array and divide by 365.
        Of course, the array itself contains more than 365 elements.
        It contains 416 elements, but we're not using the first month of the array,
        and within some months<mdash/>those with fewer than 31 days<mdash/>
        we're not using some of the day elements.
        For example,
        there's no such day as <c>rainfall[2][30]</c>, which would represent February 30.
      </p>
      <p>
        However, because we initialized all of the array's 
        elements to 0, the rainfall recorded for the non-days will be 0, 
        which won't affect our overall average.
      </p>
      <p>
        The method for calculating average daily rainfall should take  our two-dimensional 
        array of double as a parameter,
        and it should return a double . Its algorithm will use a nested for loop 
        to iterate through the elements of the array,
        adding each element to a running total.
        When the loops exits, the total will be divided by 365 and returned:
      </p>
 <program language="java"><input>
public double avgDailyRain(double rain[][]) {
    double total = 0;
    for (int month = 1; month &lt; rain.length; month++)
        for (int day = 1; day &lt; rain[month].length; day++)
            total += rain[month][day];
    return total/365;
} // avgDailyRain()
 </input></program>
</subsubsection>
<subsubsection>
  <title>The <c>avgRainForMonth()</c> Method</title>
      <p>
        One reason we used a two-dimensional array for this problem is so 
        we could calculate the average daily rainfall for a given month.
        Let's write a method to solve this problem.
        The algorithm for this method  will not require a nested for loop.
        We will just iterate through the 31 elements of a given month,
        so the month subscript will not vary.
        For example,
        suppose we are calculating the average for January,
        which is represented in our array as month 1:
      </p>
 <program language="java"><input>
double total = 0;
for (int day = 1; day &lt; rainfall[1].length; day++)
    total = total + rainfall[1][day];
 </input></program>
      <p>
        Thus, the month subscript is held constant (at 1) while the day subscript iterates from 1 to 31.
        Of course, in our method we would use a parameter to represent the month,  
        thereby allowing us to calculate the average daily rainfall for any given month.
      </p>
      <p>
        Another problem that our method has to deal with is that months don't all have 31 days,
        so we can't always divide by 31 to compute the monthly average.
        There are various ways to solve this problem,
        but  perhaps the easiest is to let the number of days for that month be specified as a third parameter.
        That way, the month itself and the number of days for the month are supplied by the user of the method:
      </p>
 <program language="java"><input>
public double avgRainForMonth(double rain[][],
                           int month, int nDays) {
    double total = 0;
    for (int day = 1; day &lt; rain[month].length; day++)
        total = total + rain[month][day];
    return total/nDays;
} // avgRainForMonth()
 </input></program>
      <p>
        Given this definition,
        we can call this method to calculate and print the average daily 
        rainfall for March as in the following statement:
      </p>
 <program language="java"><input>
System.out.println("March: " +
                         avgRainForMonth(rainfall,3,31));
 </input></program>
      <p>
        Note that when passing the entire two-dimensional array to the method,
        we just use the name of the array.
        We do not have to follow the name with subscripts.
      </p>
</subsubsection>
</subsection>
<subsection xml:id="sec-passarraypart">
    <title>Passing Part of an Array to a Method</title>
    <p>
      Instead of passing the entire rainfall array to the
      <c>avgRainForMonth()</c> method,
      we could redesign this method so that it is only passed the particular 
      month that's being averaged.
      Remember that a two-dimensional array is an array of arrays,
      so if we pass the month of January,
      we are passing an array of 32 days.
      If we use this  approach,
      we need only two parameters:
      the month, which is array of days,
      and the number of days in that month:
    </p>
 <program language="java"><input>
public double avgRainForMonth(double monthRain[],
                                          int nDays) {
    double total = 0;
    for (int day = 1; day &lt; monthRain.length; day++)
        total = total + monthRain[day];
    return total/nDays;
} // avgRainForMonth()
 </input></program>
    <p>
      Given this definition,
      we can call it to calculate and print the average daily rainfall for 
      March as in the following statement:
    </p>
 <program language="java"><input>
System.out.println("March: " +
                      avgRainForMonth(rainfall[3],31));
 </input></program>
    <p>
      In this case,
      we're passing an array of <c>double</c> to the method,
      but in order to reference it,
      we have to pull it out of the two-dimensional array by giving its
      <em>row</em> subscript as well.
      Thus, <c>rainfall[3]</c> refers to one month of data in the two-dimensional array,
      the month of March.
      But <c>rainfall[3]</c> is itself a one-dimensional array.
      <xref ref="fig-twodrow">Figure</xref> helps to clarify this point.
    </p>
    <figure xml:id="fig-twodrow">
      <caption>Referencing individual elements and
      array elements in a two-dimensional array.</caption>
      <image width="73%" source="chptr09/8f15.png"/>
    </figure>
    <p>
      It's important to note that deciding whether to use brackets when  
      passing data to a method is not just a matter of whether you are passing an array.
      It is a matter of what type of data the method parameter specifies.
      So, whenever you call a method that involves a parameter,
      you have to look at the method definition to see what kind of data that parameter specifies.
      Then you must supply an argument that refers to that type of data.
    </p>
    <p>
      For our two-dimensional <c>rainfall</c> array,
      we can refer to the entire array as <c>rainfall</c>. We can refer to one of its months as
      <c>rainfall[j]</c>, where <em>j</em>
      is any integer between 1 and 12.
      And we can refer to any of its elements as <c>rainfall[j][k]</c>, where <em>j</em>
      is any integer between 1 and 12,
      and <em>k</em> is any integer between 1 and 31.
    </p>
    <principle>
      <title>Arguments and Parameters</title>
      <p>
        The argument in a method call must match the data type in the method definition.
        This applies to all parameters,
        including array parameters.
      </p>
    </principle>
    <figure xml:id="fig-rainfalluml">
      <caption>The <c>Rainfall</c> class.</caption>
      <image width="73%" source="chptr09/p440f1.png"/>
    </figure>
   <p>
      The <c>Rainfall</c> class (<xref ref="fig-rainfalluml">Figure</xref> and 
      <xref ref="lst-rainfallclass">Listing</xref>)
      shows how we can test our array algorithms.
      It creates the <c>rainfall</c> array in the <c>main()</c> method.
      It then initializes the array and prints out average daily rainfall and average 
      daily rainfall for the month of March.
  <program language="java"><input>
rain[month][day] = Math.random() * 2.0;
 </input></program>    
 </p>
 
<listing xml:id="lst-rainfallclass">
  <caption>Definition of the <c>Rainfall</c> class.</caption>
      
 <program language="java"><input>
public class Rainfall {
  /**
   * Initializes the rainfall array
   * @param rain is a 2D-array of rainfalls
   * Pre:  rain is non null
   * Post: rain[x][y] == 0 for all x,y in the array
   * Note that the loops use unit indexing.
   */
  public void initRain(double rain[][]) {
    for (int month = 1; month &lt; rain.length; month++)
      for (int day = 1; day &lt; rain[month].length; day++)
        rain[month][day] = Math.random() * 2.0;    // Random rainfall
  } // initRain()

  /**
   * Computes average daily rainfall for a year of rainfall data
   * @param rain is a 2D-array of rainfalls
   * @return The sum of rain[x][y] / 356
   * Pre:  rain is non null
   * Post: The sum of rain / 365 is calculated
   * Note that the loops are unit indexed
   */
  public double avgDailyRain(double rain[][]) {
    double total = 0;
    for (int month = 1; month &lt; rain.length; month++)
      for (int day = 1; day &lt; rain[month].length; day++)
        total += rain[month][day];
    return total/365;
  } // avgDailyRain()

  /**
   * Computes average daily rainfall for a given month containing nDays
   * @param monthRain is a 1D-array of rainfalls
   * @param nDays is the number of days in monthRain
   * @return The sum of monthRain / nDays
   * Pre:  1 &lt;= nDays &lt;= 31
   * Post: The sum of monthRain / nDays is calculated
   */
  public double avgRainForMonth(double monthRain[], int nDays) {
    double total = 0;
    for (int day = 1; day &lt; monthRain.length; day++)
      total = total + monthRain[day];
    return total/nDays;
  } // avgRainForMonth()

  public static void main(String args[]) {
    double rainfall[][] = new double[13][32];
    Rainfall data = new Rainfall();
    data.initRain(rainfall);
    System.out.println("The average daily rainfall = "
                      +  data.avgDailyRain(rainfall));
    System.out.println("The average daily rainfall for March = "
                      +  data.avgRainForMonth(rainfall[3],31));
  } // main()
}//Rainfall
 </input></program>
</listing>

    <p>
      However, note that we have made a slight modification to the <c>initRain()</c> method.
      Instead of just assigning 0 to each element,
      we assign a random value between 0 and 2.0:
      Using the <c>Math.random()</c> method in this way enables us to generate 
      some realistic test data.
    </p>
    <p>
      In this case,
      we  have scaled the data so that the daily rainfall is between 0 and 2 inches. 
      (Rainfall like this would probably be appropriate for an Amazonian rain forest!) 
      Testing our algorithms with these data provides some indication that our 
      methods are in fact working properly.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Generating Test Data</title>
      <p>
        The <c>Math.random()</c> method can be used to generate numeric test data,
        when large amounts of data are required.
        The data can be scaled to fit within the range that the actual data are expected to have.
      </p>
    </principle>
</subsection>
<subsection>
<title>Self-Study Exercises</title>
      <ol>
        <li>
          <p>
            Suppose you're going to keep track of the daily newspaper sales at the local kiosk.
            Declare a <m>52\;\times\;7</m> two-dimensional array of <c>int</c> 
            and initialize each of its elements to 0.
          </p>
        </li>
        <li>
          <p>
            Write a method to calculate the average number of newspapers sold per week,
            using the array you declared in the previous exercise.
          </p>
        </li>
        <li>
          <p>
            Write a method to calculate the average number of newspapers sold on Sundays,
            using the array you declared in the previous exercise.
            Assume that Sunday is the last day of the week.
          </p>
        </li>
      </ol>
  </subsection>
</section>