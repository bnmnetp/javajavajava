<section xml:id="the-multiway-selection-structure">
  <title>The <c>switch</c> Multiway Selection Structure</title>
<subsection><title>Switch</title>
  <p>
    Another selection structure to add to our repertoire is the
    <term>switch/break structure</term>.
    It is meant to provide a shorthand way of coding the following type of multiway selection structure:
  </p>
 <program language="java"><input>
if (integralVar == integralValue1)
     // some statements
else if (integralVar == integralValue2)
     // some statements
else if (integralVar == integralValue3)
     // some statements
else // some statements
 </input></program>
  <p>
    Note that each of the conditions in this case involves the equality of an integral variable and an integral value.
    This type of structure occurs so frequently in programs that most languages contain statements specially designed to handle it.
    In Java, we use a combination of the <c>switch</c> and <c>break</c> statements to implement multiway selection.
  </p>
  <p>
    The <c>switch</c> is designed to select one of several actions depending on the value of some integral expression:
  </p>
 <program language="java"><input>
switch (integralExpression)
{  case integralValue1:
       // some statements
   case integralValue2:
       // some statements
   case integralValue3:
       // some statements
   default:
       some statements
}
 </input></program>
  <p>
    The <em>integralExpression</em>
    must evaluate to a primitive integral value of type <c>byte</c>, <c>short</c>, <c>int</c>, <c>char</c>,  or <c>boolean</c>. It may not be a <c>long</c>, <c>float</c>, <c>double</c>, or a class type.
    The <em>integralValues</em> must be literals or <c>final</c> variables.
    They serve as labels in the one or more case clauses that make up the <c>switch</c> statement body.
    The <c>default</c> clause is optional,
    but it is a good idea to include it.
  </p>
  <p>
    A <c>switch</c> statement
        <idx><h>switch statement</h></idx>
    is executed according to the following rules:
  </p>
  <p>
    <ol><li><p>
    The <em>integralExpression</em>
    is evaluated. </p></li>
    <li><p>Control passes to the statements following the <c>case</c> label whose value equals the
    <em>integralExpression</em> or, if no cases apply,
    to the <c>default</c> clause.
  </p></li>
  <li> <p>
    Beginning at the selected label or at the default,
    all of the statements up to the end of the <c>switch</c> are executed. \end{NL}
  </p></li>
</ol>
</p>
 
  <p>
    Consider the following example:
  </p>
 <program language="java"><input>
int m = 2;
switch (m)
{  
  case 1:
      System.out.print(" m = 1");
   case 2:
      System.out.print(" m = 2");
   case 3:
      System.out.print(" m = 3");
   default:
      System.out.print(" default case");
}
 </input></program>
  <p>
    In this case, because <em>m</em>
    equals 2, the following output would be produced:
  </p>
 <pre>
m = 2 m = 3 default case
 </pre>
  <p>
    Obviously, this output does not match the following if-else multiway selection structure,
        <idx><h>multiway-selection structure</h></idx>
    which would output,
    simply, <c>m = 2</c>:
  </p>
 <program language="java"><input>
int m = 2;
if (m == 1)
     System.out.print(" m = 1");
else if (m == 2)
     System.out.print(" m = 2");
else if (m == 3)
     System.out.print(" m = 3");
else
     System.out.print(" default case");
 </input></program>
  <p>
    The reason for this disparity is that the <c>switch</c> executes <em>all</em>
    statements following the label that matches the value of the
    <em>integralExpression</em>
    (see again Rule 3 above).
  </p>
  <p>
    In order to use the switch as a multiway selection,
    you must force it to <c>break</c><idx><h>break</h></idx> out of the case clause after executing that clause's statements:
  </p>
 <program language="java"><input>
int m = 2;
switch (m)
{  case 1:
       System.out.print(" m = 1");
       break;
   case 2:
       System.out.print(" m = 2");
       break;
   case 3:
       System.out.print(" m = 3");
       break;
   default:
       System.out.print(" default case");
}
 </input></program>
  <p>
    In this example,
    the <c>break</c> statement causes control to pass to the end of the <c>switch</c>, with the effect being that one and only one case will be executed within the <c>switch</c>. Thus,
    the output of this code segment will be simply m = 2 , matching exactly the behavior of the multiway if-else selection structure (Fig.
    <xref ref="fig-multiwayswitch"></xref>).
  </p>
  <figure xml:id="fig-multiwayswitch">
    <caption>Flowchart of the multiway switch structure.
    Note that because of the <c>break</c> statement, one and only one case is
    executed.</caption>
    <image width="73%" source="chptr03/switchfl.png"/>
  </figure>
  <principle>
    <title>PROGRAMMING TIP: Multiway Selection</title>
    <p>
      A typical use for the
<c>switch</c> statement is to use it together with <c>break</c> to code a multiway selection structure.
    </p>
  </principle>
  <principle>
    <title><c>break</c></title>
    <p>
      The <c>break</c> statement transfers control out of its enclosing <term>block</term>,
      where a block is any sequence of statements contained within curly brackets { and }.
    </p>
  </principle>
  <principle>
    <title>DEBUGGING TIP: Switch without <c>break</c></title>
    <p>
      A common error in coding the switch-based multiway selection is forgetting to put a <c>break</c> statement at the end of each clause.
      This may cause more than one case to be executed.
    </p>
  </principle>
  </subsection>
  
  <exercises><title>Self-Study Exercises</title>
   
        <exercise label="switchbug1">
         <statement><p>Identify and fix the errors in the following switch structure (if there is no error,
          specify the output).</p></statement> 
 <program language="java" interactive="activecode"><input>
public class Bugs 
{
  public static void main(String args[]) 
  {
    int k = 0;
    switch (k)
    case 0:
        System.out.println("zero");
        break;
    case 1:
        System.out.println("one");
        break;
    default:
        System.out.println("default");
        break;
  }
}
 </input></program>
</exercise>

 <exercise label="switchbug2">
  <statement><p>Identify and fix the errors in the following switch structure (if there is no error,
   specify the output).</p></statement> 
<program language="java" interactive="activecode"><input>
public class Bugs 
{
  public static void main(String args[]) 
  {
    int k = 0;
    switch (k + 1)
    {   case 0:
            System.out.println("zero");
            break;
        case 1:
            System.out.println("one");
            break;
        default:
            System.out.println("default");
            break;
    }
  }
}
 </input></program>
</exercise>

<exercise label="switchbug3">
         <statement><p>Identify and fix the errors in the following switch structure (if there is no error,
          specify the output).</p></statement> 
 <program language="java" interactive="activecode"><input>
public class Bugs 
{
  public static void main(String args[]) 
  {
    int k = 6;
    switch (k / 3.0)
    {   case 2:
            System.out.println("zero");
            break;
        case 3:
            System.out.println("one");
            break;
        default:
            System.out.println("default");
            break;
    }
  }
}
 </input></program>
        </exercise>

    
  

    <exercise label="flavorsEx">
      <statement><p>
        Write a <c>switch</c> statement that checks an integer variable <c>flavor</c> and 
        prints out the name of the ice cream flavor (where 0 is vanilla, 1 is chocolate,
        and 2 is strawberry) or prints
          <q>Error</q>
          in the default case. Test by changing the flavor variable's value.  Then, modify your solution to use constants
          (final variables)
          to represent the ice cream flavors.
      </p></statement>
      <program language="java" interactive="activecode"><input>
        public class Flavors 
        {
          public static void main(String args[]) 
          {
            /*  Write a switch statement below that checks flavor and 
            prints out the name of the ice cream flavor 
            (where 0 is vanilla, 1 is chocolate,and 2 is strawberry) 
            or prints Error in the default case.
            */
            int flavor = 1;


          }
        }
        </input></program></exercise>
</exercises>
</section>