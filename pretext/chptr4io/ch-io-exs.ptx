<section xml:id="ch-io-exs">
    <title>Exercises</title>
    <p>
      <term>Note:</term> For programming exercises, <term>first</term> draw a UML class diagram
      describing all classes and their inheritance relationships and/or associations.
    </p>
     <subsection>
    <exercise>
       <p>
          Fill in the blanks in each of the following sentences:
        </p>
        <ol>
          <li>
            <p>
              A method that lacks a body is an <c>__________</c> method.
            </p>
          </li>
          <li>
            <p>
              An <c>__________</c> is like a class except that it contains only instance methods,
              no instance variables.
            </p>
          </li>
          <li>
            <p>
              In a Java class definition a class can <c>__________</c> a class and <c>__________</c> an interface.
            </p>
          </li>
          <li>
            <p>
              Classes and methods not defined in a program must be <c>__________</c> from the Java class library.
            </p>
          </li>
          <li>
            <p>
              A subclass of a class inherits that class's <c>__________</c> instance variables and instance methods.
            </p>
          </li>
          <li>
            <p>
              An object can refer to itself by using the <c>__________</c> keyword.
            </p>
          </li>
          <li>
            <p>
              The <c>JButton</c>, <c>JTextField</c>, and <c>JComponent</c> classes are defined in the <c>__________</c> package.
            </p>
            </li>
            </ol>
    </exercise>
     <exercise>
        <p>
          Fill in the blanks in each of the following sentences:
        </p>
        <ol>
          <li>
            <p>
              Java GUIs utilize a form of control known as <c>__________</c> programming.
            </p>
          </li>
          <li>
            <p>
              When the user clicks on a program's <c>JButton</c>, an <c>__________</c> will automatically be generated.
            </p>
          </li>
          <li>
            <p>
              Two kinds of objects that generate <c>ActionEvent</c> s are <c>__________</c> and <c>__________</c> . JButtons, <c>JTextField</c> s, and
<c>JLabel</c> s are all subclasses of <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              The <c>JFrame</c> class is a subclass of <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              If java class intends to handle <c>ActionEvent</c> s, it must implement the <c>__________</c> interface.
            </p>
          </li>
        </ol>
    </exercise>
    <exercise>
       <p> Explain the difference between the following pairs of concepts:
       </p>
        <ol>

          <li>
            <p>
              Class and <em>interface</em>.
            </p>
          </li>
          <li>
             <p>
              Extending a class and <em>instantiating an object</em>.
            </p>
          </li>
           <li>
             <p>
               Defining a method and <em>implementing a method</em>.
            </p>
          </li>
         <li>
            <p>
              A <c>protected</c> method and a <c>public</c> method.
            </p>
          </li>
          <li>
            <p>
              A <c>protected</c> method and a <c>private</c> method.
            </p>
          </li>
          <li>
            <p>
              An <c>ActionEvent</c> and an <c>ActionListener()</c> method.
            </p>
          </li>
        </ol>
    </exercise>
    <exercise>
           <p>
          Draw a hierarchy chart to represent the following situation.
          There are lots of languages in the world.
          English, French, Chinese, and Korean are examples of natural languages.
          Java, C, and C++ are examples of formal languages.
          French and Italian are considered romance languages,
          while Greek and Latin are considered classical languages.
        </p>
    </exercise>
    <exercise>
        <p>
          Arrange the Java library classes mentioned in the Chapter Summary into their proper hierarchy,
          using the
<c>Object</c> class as the root of the hierarchy.
        </p>
    </exercise>
    <exercise>
        <p>
          Look up the documentation for the <c>JButton</c> class on Sun's Web site:

<program language="java">
    <input>
http://java.sun.com/j2se/1.5.0/docs/api/
    </input>
</program>List the signatures of all its constructors.

        </p>
    </exercise>
    <exercise>
          <p>
          Suppose we want to set the text in our program's <c>JTextField</c>.
          What method should we use and where is this method defined?
           (<em>Hint</em>: Look up the documentation for <c>JTextField</c>.
           If no appropriate method is defined there, see if it is inherited from a superclass.)
        </p>
    </exercise>
    <exercise>
        <p>
          Does a <c>JButton</c> have an <c>init()</c> method?
          Explain.
        </p>
    </exercise>
    <exercise>
         <p>
          Does a <c>JButton</c> have an <c>add()</c> method?
          Explain.
        </p>
    </exercise>
    <exercise>
        <p>
          Suppose you have a program containing a <c>JButton</c> named <c>button</c>. Describe what happens,
          in terms of Java's event handling model,
          when the user clicks the button.
        </p>
    </exercise>
    <exercise>
        <p>
          Java's <c>Object</c> class contains a public method, <c>toString()</c>, which returns a string that represents this object.
          Because every class is a subclass of <c>Object</c>, the <c>toString()</c> method can be used by any object.
          Show how you would invoke this method for a <c>JButton</c> object named <c>button</c>.
        </p>
    </exercise>
     <exercise>
         <p>
          The JFrame that follows contains a semantic error in its <c>SomeFrame()</c> constructor.
          The error will cause the
<c>actionPerformed()</c> method never to display
          <q>Clicked</q>
          even though the user clicks the button in the JFrame.
          Why? (<em>Hint</em>: Think scope!)

<program language="java">
    <input>
public class SomeFrame extends JFrame
                        implements ActionListener
{
     // Declare instance variables
    private JButton button;
    public JFrame()
    {
       // Instantiate the instance variable
        JButton button = new JButton("Click me");
        add(button);
        button.addActionListener(this);
    } // init()
    public void actionPerformed(ActionEvent e)
    {
        if (e.getSource() == button)
           System.out.println("Clicked");
    } // actionPerformed()
} // SomeFrame
    </input>
</program>

        </p>
    </exercise>
    <exercise>
        <p>
          What would be output by the following program?

<program language="java">
    <input>
public class SomeFrame2 extends JFrame
{
  // Declare instance variables
  private JButton button;
  private JTextField field;
  public SomeFrame()
  {
    // Instantiate instance variables
    button = new JButton("Click me");
    add(button);
    field = new JTextField("Field me");
    add(field);
    System.out.println(field.getText() + button.getText());
  } // init()
  public static void main(String[] args) {
     SomeFrame2 frame = new SomeFrame2();
     frame.setSize(400,400);
     frame.setVisible(true);
  }
} // SomeFrame2}
    </input>
</program>

        </p>
    </exercise>
    <exercise>
         <p>
          Design and implement a GUI that has a <c>JButton</c>, a <c>JTextField</c>, and a <c>JLabel</c>
          and then uses the <c>toString()</c> method to display each object's string representation.
        </p>
    </exercise>
    <exercise>
       <p>
          The <c>JButton</c> class inherits a <c>setText(String s)</c> from its <c>AbstractButton()</c> superclass.
          Using that method,
          design and implement a GUI that has a single button labeled initially,
          <q>The Doctor is out.</q>
          Each time the button is clicked,
          it should toggle its label to,
          <q>The Doctor is in</q>
          and vice versa.
        </p>
    </exercise>
    <exercise>
         <p>
          Design and implement a GUI that contains two <c>JButton</c> s, initially labeled,
          <q>Me first!</q>
          and
          <q>Me next!</q>
          Each time the user clicks either button,
          the labels on both buttons should be exchanged.
          (<em>Hint</em>: You don't need an if-else statement for this problem.)
        </p>
    </exercise>
    <exercise>
         <p>
          Modify the GUI in the previous exercise so that it contains three <c>JButton</c> s,
          initially labeled <q>First,</q> <q>Second,</q> and <q>Third.</q>
          Each time the user clicks one of the buttons,
          the labels on the buttons should be rotated.
          Second should get first's label,
          third should get second's, and first should get third's label.
        </p>
    </exercise>
    <exercise>
         <p>
          Design and implement a GUI that contains a
<c>JTextField</c> and two <c>JButton</c> s, initially labeled
          <q>Left</q>
          and
          <q>Right.</q>
          Each time the user clicks a button,
          display its label in the <c>JTextField</c>. A <c>JButton()</c>'s label can be gotten with the <c>getText()</c> method.
        </p>
    </exercise>
    <exercise>
         <p>
          You can change the size of a <c>JFrame</c> by using the
<c>setSize(int h, int v)</c> method,
          where <em>h</em> and <em>v</em>
          give its horizontal and vertical dimensions pixels.
          Write a GUI application that contains two <c>JButton</c> s, labeled
          <q>Big</q>
          and
          <q>Small.</q>
          Whenever the user clicks on small,
          set the <c>JFrame's</c> dimensions to 200 <times/> 100,
          and whenever the user clicks on big,
          set the dimensions to 300 <times/> 200.
        </p>
    </exercise>
    <exercise>
         <p>
          Rewrite your solution to the previous exercise so that it uses a single button whose label is toggled appropriately each time it is clicked.
          Obviously, when the <c>JButton</c> is labeled
          <q>Big,</q>
          clicking it should give the <c>JFrame</c> its big dimensions.
          Challenge: Design and write a Java GUI application that allows the user to change the <c>JFrame</c>'s background color to one of three choices,
          indicated by buttons.
          Like all other Java <c>Component</c> s, <c>JFrame</c>'s have an associated background color,
          which can be set by the following commands:

<program language="java">
    <input>
setBackground(Color.red);
setBackground(Color.yellow);
    </input>
</program>

The <c>setBackground()</c> method is defined in the
<c>Component</c> class,
          and 13 primary colors<mdash/><c>black</c>, <c>blue</c>,
<c>cyan</c>, <c>darkGray</c>, <c>gray</c>, <c>green</c>, <c>lightGray</c>,
<c>magenta</c>, <c>orange</c>, <c>pink</c>, <c>red</c>, <c>white</c>, <c>yellow</c><mdash/>are
defined in the <c>java.awt.Color</c> class.
         </p>
    </exercise>
    <exercise>
       <p>
          Given the classes with the following headers

<program language="java">
    <input>
public class Animal ...
public class DomesticAnimal extends Animal ...
public class FarmAnimal extends DomesticAnimal...
public class HousePet extends DomesticAnimal...
public class Cow extends FarmAnimal ...
public class Goat extends FarmAnimal ...
public class DairyCow extends Cow ...
    </input>
</program>

draw a UML class diagram representing the hierarchy created by these declarations.
        </p>
    </exercise>
    <exercise>
         <p>
          Given the preceding hierarchy of classes,
          which of the following are legal assignment statements?

<program language="java">
    <input>
DairyCow dc = new FarmAnimal();
FarmAnimal fa = new Goat();
Cow c1 = new DomesticAnimal();
Cow c2 = new DairyCow();
DomesticAnimal dom = new HousePet();
    </input>
</program>

        </p>
    </exercise>
  </subsection>
</section>
