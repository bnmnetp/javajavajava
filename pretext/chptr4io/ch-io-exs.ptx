<section xml:id="ch-io-exs">
    <title>Exercises</title>
   
 
    
       <p>
          Fill in the blanks in each of the following sentences:
        </p>
        <ol>
        
          <li>
            <p>
              The <c>JButton</c>, <c>JTextField</c>, and <c>JComponent</c> classes are 
              defined in the <c>__________</c> package.
            </p>
            </li>
           
          <li>
            <p>
              Java GUIs utilize a form of control known as <c>__________</c> programming.
            </p>
          </li>
          <li>
            <p>
              When the user clicks on a program's <c>JButton</c>, an <c>__________</c> will automatically be generated.
            </p>
          </li>
          <li>
            <p>
              Two kinds of objects that generate <c>ActionEvent</c> s are <c>__________</c> and <c>__________</c> . JButtons, <c>JTextField</c> s, and
<c>JLabel</c> s are all subclasses of <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              The <c>JFrame</c> class is a subclass of <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              If a Java class intends to handle <c>ActionEvent</c> s, it must implement the <c>__________</c> interface.
            </p>
          </li>
        </ol>
    
    
    
<ol>        
  <li>
    <p>
      Explain the difference between: An <c>ActionEvent</c> and an <c>ActionListener()</c> method.
    </p>
  </li>
    <li>
        <p>
          Look up the documentation for the <c>JButton</c> class on Sun's Web site:

<url href="http://java.sun.com/j2se/1.5.0/docs/api/" visual="">http://java.sun.com/j2se/1.5.0/docs/api/</url>.
   List the signatures of all its constructors.

        </p>
    </li>
    <li>
    
          <p>
          Suppose we want to set the text in our program's <c>JTextField</c>.
          What method should we use and where is this method defined?
           (<em>Hint</em>: Look up the documentation for <c>JTextField</c>.
           If no appropriate method is defined there, see if it is inherited from a superclass.)
        </p>
    
      </li>
      <li>
        <p>
          Does a <c>JButton</c> have an <c>init()</c> method?
          Explain.
        </p>
      </li>
      <li>
    
         <p>
          Does a <c>JButton</c> have an <c>add()</c> method?
          Explain.
        </p>
      </li>
      <li>
    
        <p>
          Suppose you have a program containing a <c>JButton</c> named <c>button</c>. Describe what happens,
          in terms of Java's event handling model,
          when the user clicks the button.
        </p>
    
    
      </li>
      <li>
   
         <p>
          Design and implement a GUI that contains two <c>JButton</c> s, initially labeled,
          <q>Me first!</q>
          and
          <q>Me next!</q>
          Each time the user clicks either button,
          the labels on both buttons should be exchanged.
          (<em>Hint</em>: You don't need an if-else statement for this problem.)
        </p>
    
    </li>
    <li>
         <p>
          Modify the GUI in the previous exercise so that it contains three <c>JButton</c> s,
          initially labeled <q>First,</q> <q>Second,</q> and <q>Third.</q>
          Each time the user clicks one of the buttons,
          the labels on the buttons should be rotated.
          Second should get first's label,
          third should get second's, and first should get third's label.
        </p>
    
      </li>
      <li>
         <p>
          Design and implement a GUI that contains a
<c>JTextField</c> and two <c>JButton</c> s, initially labeled
          <q>Left</q>
          and
          <q>Right.</q>
          Each time the user clicks a button,
          display its label in the <c>JTextField</c>. A <c>JButton()</c>'s label can be gotten with the <c>getText()</c> method.
        </p>
    
      </li>
      <li>
         <p>
          You can change the size of a <c>JFrame</c> by using the
<c>setSize(int h, int v)</c> method,
          where <em>h</em> and <em>v</em>
          give its horizontal and vertical dimensions pixels.
          Write a GUI application that contains two <c>JButton</c> s, labeled
          <q>Big</q>
          and
          <q>Small.</q>
          Whenever the user clicks on small,
          set the <c>JFrame's</c> dimensions to 200 <times/> 100,
          and whenever the user clicks on big,
          set the dimensions to 300 <times/> 200.
        </p>
    
      </li>
      <li>
         <p>
          Rewrite your solution to the previous exercise so that it uses a single button whose label is toggled appropriately each time it is clicked.
          Obviously, when the <c>JButton</c> is labeled
          <q>Big,</q>
          clicking it should give the <c>JFrame</c> its big dimensions.
      </p>
      </li>
      <li><p>
          Challenge: Design and write a Java GUI application that allows the user to change
           the <c>JFrame</c>'s background color to one of three choices,
          indicated by buttons.
          Like all other Java <c>Component</c> s, <c>JFrame</c>'s have an associated background color,
          which can be set by the following commands:
<program language="java">
    <input>
setBackground(Color.red);
setBackground(Color.yellow);
    </input>
</program>
</p>
<p>
The <c>setBackground()</c> method is defined in the
<c>Component</c> class,
          and 13 primary colors<mdash/><c>black</c>, <c>blue</c>,
<c>cyan</c>, <c>darkGray</c>, <c>gray</c>, <c>green</c>, <c>lightGray</c>,
<c>magenta</c>, <c>orange</c>, <c>pink</c>, <c>red</c>, <c>white</c>, <c>yellow</c><mdash/>are
defined in the <c>java.awt.Color</c> class.
         </p>
    
        </li>
      </ol>
      

    
    
  
    
  
</section>
