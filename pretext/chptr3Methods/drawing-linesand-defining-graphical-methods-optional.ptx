<section xml:id="drawing-linesand-defining-graphical-methods-optional">
  <title>Drawing Lines and Defining Graphical Methods (Optional)</title>
  <p>
    We used a <c>Graphics</c> object in the previous chapter to draw rectangles and ovals in a JFrame window.
    The <c>Graphics</c> class also possesses a method for drawing a line segment.
    Problems involving drawing pictures in an JFrame window using a series of line segments can be a source of examples of defining useful methods and also of making good use of loops.
  </p>
  <p>
    The <c>Graphics</c> class has a public instance method with the header:
  </p>
 <program language="java"><input>
public  void  drawLine(int x1, int y1, int x2, int y2)
 </input></program>
  <p>
    The method call <c>g.drawLine(x1, y1, x2, y2)</c> draws a line from the point <m>(x1,y1)</m> to <m>(x2,y2)</m> where <m>(x,y)</m> refers to a point that is <m>x</m> pixels from the left edge of the area that <c>g</c> is drawing in and <m>y</m> pixels from the top edge.
    Thus <c>g.drawLine(10, 10, 10, 60)</c> draws a vertical line segment that is 50 pixels long and is 10 pixels from the left edge of the drawing area, that is,
    a line segment from the point <m>(10,10)</m> to the point <m>(10,60)</m>.
  </p>
  <p>
    Consider the problem of creating an Swing program with a method called <c>drawSticks()</c> to draw any specified number of vertical line segments.
    This method might be useful for an graphical user interface to the <c>OneRowNim</c> game to draw the number of sticks at a given point in a game.
    Suppose that this method must have an
<c>int</c> parameter to specify the number of vertical lines to draw and two <c>int</c> parameters to specify the location of the top endpoint of the left most line segment.
    The <c>drawSticks()</c> method will need to use a <c>Graphics</c> object connected to the JFrame window for drawing the line segment.
    The only such
<c>Graphics</c> object available is the parameter in the <c>paint()</c> method of the Canvas.
    Thus the method must have a <c>Graphics</c> parameter and it will be called in the <c>paint()</c> method using the <c>Graphics</c> object there as an argument.
    Thus the header of the method should look like:
  </p>
 <program language="java"><input>
public void drawSticks(Graphics g,int x,int y,int num)
 </input></program>
  <p>The body of the method could use a while loop with a counter variable <c>k</c> to draw <c>num</c> lines.
    The counter <c>k</c> is initialized to 0 before the loop and incremented at the end of the loop. The loop 
    runs as long as <c>k &lt; num</c>.</p>

    <program language="java"><input>
        public void drawSticks(Graphics g, int x, int y, int num)
        {   
            int k = 0;
            while (k &lt; num)
            {   g.drawLine(x, y, x, y + 50);
                x = x + 10;
                k = k + 1;
            } // while
        } // drawSticks()
      
       </input></program>   
<p>
    The complete class is in <xref ref="fig-drawsticksprog">Figure</xref>. You can run it online at
    <url href="https://replit.com/@BerylHoffman/DrawSticks" visual="" target="_blank">DrawSticks on repl</url>. 
</p>
  
  <figure xml:id="fig-drawsticksprog">
    <caption>A Swing Class with a method for drawing a set of sticks.</caption>
 <program language="java"><input>
/** DrawLineCanvas   demonstrates some graphics commands.
 *It draws a set of 12 vertical lines and a set of 7 lines.
 */
import java.awt.*;
import javax.swing.JFrame;
public class DrawSticksCanvas extends Canvas
  /** drawSticks(g,x,y,num) will draw num vertical line
   * segments.  The line segments are 10 pixels apart and
   * 50 pixels long. The top endpoint of the left most
   *line segment is at the point (x,y).
   */
  public void drawSticks(Graphics g, int x, int y, int num)
  {   int k = 0;
      while (k &lt; num)
      {   g.drawLine(x, y, x, y + 50);
          x = x + 10;
          k = k + 1;
      } // while
  } // drawSticks()
  public void paint(Graphics g)
  {   drawSticks(g, 25, 25, 12);
      g.setColor(Color.cyan);
      drawSticks(g, 25, 125, 7);
  } // paint()
   } // DrawSticksCanvas
 </input></program>
  </figure>
  <p>
    Note that the body of <c>drawSticks()</c> uses a while-loop to draw the lines and declares and initializes a local variable to zero to use for counting the number of lines drawn.
    The statement <c>g.drawLine(x, y, x, y + 50);</c> draws a vertical line which is <m>50</m> pixels long.
    Increasing the value of <m>x</m> by <m>10</m> each time through the loop moves the next line <m>10</m> pixels to the right.
  </p>
  <p>
    The first call to <c>drawSticks()</c> in the <c>paint()</c> method draws <m>12</m> lines with <m>(25,25)</m> the top point of the left-most line.
    The second call to
<c>drawSticks()</c> will draw <m>7</m> cyan sticks <m>100</m> pixels lower.
    Note that changing the color of <c>g</c> before passing it as an argument to
<c>drawSticks()</c> changes the drawing color.
  </p>
  <p>
    An image of the <c>DrawSticksCanvas</c> as it appears in a window is shown in <xref ref="fig-drawstickseps">Figure</xref>.
    Try it online at
    <url href="https://replit.com/@BerylHoffman/DrawSticks" visual="" target="_blank">DrawSticks on repl</url>. 
</p>
  <p>
    <figure xml:id="fig-drawstickseps">
      <caption>The DrawSticksCanvas as displayed in a Java window.</caption>
    <image width="80%" source="chptr03/drawsticks.png"/>
    </figure>


  </p>
  <p>
    As we have seen in this example,
    defining methods with parameters to draw an object makes the code reusable and makes it possible to draw a complex scene by calling a collection of simpler methods.
    It is a typical use of the divide-and-conquer principle.
    The while-loop can be useful in drawing almost any geometrically symmetric object.
  </p>
</section>