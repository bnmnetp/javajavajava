<section xml:id="simple-array-examples">
  <title>Simple Array Examples</title>
  <p>
    The program in <xref ref="lst-initarrays">Listing</xref>
    creates two arrays of ten elements each and displays their values on the Java console.
  </p>
  <listing xml:id="lst-initarrays">
    <caption>A program that displays two arrays. Its output
    is shown in <xref ref="tab-output">Table</xref>.</caption>
    
 <program language="java" interactive="activecode"><input>
public class PrintArrays 
{
  static final int ARRSIZE = 10;         // The array's size
  static int intArr[] = new int[ARRSIZE];// Create int array
  static double realArr[] = { 1.1, 2.2, 3.3, 4.4,
     5.5, 6.6, 7.7, 8.8, 9.9, 10.10 }; // And a double array

  public static void main (String args[]) 
  {
    System.out.println("Ints \t Reals");  // Print a heading
                          // For each int and double element
    for (int k = 0; k &lt; intArr.length; k++)
       System.out.println( intArr[k] + " \t " +
                                 realArr[k]);  // Print them
  } // main()
} // PrintArrays
 </input></program>
  </listing>
  <p>
    In this example, the elements of  <c>intArr</c> have not been given 
    initial values whereas the elements of  <c>realArr</c> have been initialized.
    Note the use of the integer constant  <c>ARRSIZE</c> to store the arrays' size.
    By using the constant in this way,
    we do not have to use the literal value <c>10</c> anywhere in the program,
    thereby making it easier to read and to modify the program.
    If we want to change the size of the array that the program handles,
    we can just change the value of <c>ARRSIZE</c>. 
    This is an example  of the maintainability principle.
        <idx><h>Maintainability Principle</h></idx>
  </p>
   <table xml:id="tab-output">
    <title>Output of the <c>PrintArrays</c> program. </title>
  <tabular>
    <row>
      <cell>Ints</cell>
      <cell>Reals</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>1.1</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>2.2</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>3.3</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>4.4</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>5.5</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>6.6</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>7.7</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>8.8</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>9.9</cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>10.1</cell>
    </row>
  </tabular>
  </table>
 <principle>
    <title>EFFECTIVE DESIGN: Symbolic Constants</title>
    <p>
      Using symbolic constants
      (final variables)
      instead of literal values makes the program easier to read and to maintain.
    </p>
  </principle>
  <p>
    Note the use of the <c>static</c> qualifier throughout the
    <c>PrintArrays</c> class.
    This enables us to refer to the array and the other variables from within the 
    <c>main()</c> method.
    If <c>intArr</c> were not declared <c>static</c>, we would get 
    the compiler error <c>attempt to make static use of a non-static variable.</c> 
  </p>
  <p>
    This use of <c>static</c> is justified mainly as a coding convenience 
    rather than a principle of object-oriented design.
    The only examples we've seen so far in which static elements 
    were a necessary design element were the use of static elements 
    in the <c>Math</c> class <mdash/><c>Math.PI</c> and <c>Math.sqrt()</c> <mdash/> and 
    the use of static final variables in <c>TwoPlayerGame</c> <mdash/> 
    e.g., <c>TwoPlayerGame.PLAYER_ONE</c>.
  </p>
  <p>
    For large arrays,
    it is not always feasible to initialize them in an initializer statement.
    Consider the problem of initializing an array with the squares of the first 100 integers.
    Not only would it be tedious to set these values in an initializer statement,
    it would also be error prone,
    since it is relatively easy to type in the wrong value for one or more of the squares.
  </p>
  <principle>
    <title>DEBUGGING TIP:Array Initialization</title>
    <p>
      Initializer statements should be used only for relatively small arrays.
    </p>
  </principle>
  <p>
    The example in <xref ref="lst-squares100">Listing</xref>
    creates an array of 50 integers and then fills the elements with the 
    values 1, 4, 9, 16, and so on.
    It then prints the entire array.
  </p>
  <listing xml:id="lst-squares100">
    <caption>A program with an array that stores the squares of the first 50 integers.
    Its output is shown in <xref ref="fig-squares">Figure</xref>.</caption>
 <program language="java" interactive="activecode"><input>

public class Squares 
{
  static final int ARRSIZE = 50;     // The array's size
  static int intArr[] = new int[ARRSIZE]; // Instantiate

  public static void main(String args[]) 
  {
    for (int k = 0; k &lt; intArr.length; k++)// Initialize
      intArr[k] = (k+1) * (k+1);

    System.out.print("The first 50 squares are");

    for (int k = 0; k &lt; intArr.length; k++) { // Print
      if (k % 5 == 0)             // For each 5th square
        System.out.println(" ");//   print a new line
      System.out.print( intArr[k] + " ");
    } // for
  } // main()
} // Squares
 </input></program>
  </listing>
<figure xml:id="fig-squares">
  <title>Output of the Squares program.</title>
<pre>
1 4 9 16 25
36 49 64 81 100
121 144 169 196 225
256 289 324 361 400
441 484 529 576 625
676 729 784 841 900
961 1024 1089 1156 1225
1296 1369 1444 1521 1600
1681 1764 1849 1936 2025
2116 2209 2304 2401 2500
</pre>
</figure>
  <p>
    This example illustrates some important points about the use of array variables.
    The array's elements are individual storage
        <idx><h>array storage</h></idx>
    locations.
    In this example, <c>intArr</c> has 50 storage locations.
    Storing a value in one of these variables is done by an assignment statement:
  </p>
 <program language="java"><input>
intArr[k] = (k+1) * (k+1);
 </input></program>
  <p>
    The use of the variable <em>k</em>
    in this assignment statement allows us to vary the location that is assigned 
    on each iteration of the for loop.
    Note that in this example,
    <em>k</em> occurs as the array index on the left-hand side of this expression,
    while <em>k+1</em> occurs on the right-hand side as the value to be squared.
  </p>
  <p>
    The reason for this is that arrays are indexed starting at 0 but we 
    want our table of squares to begin with the square of 1.
    So the square of some number <em>n+1</em>
    will always be stored in the array whose index is one 
    less than the number itself <mdash/> that  is,
    <em>n</em>.
  </p>
  <p>
    An array's <c>length</c> variable can always be used as a 
    loop bound when iterating through all elements of the array:
  </p>
 <program language="java"><input>
for (int k = 0; k &lt; intArr.length; k++)
    intArr[k] = (k+1) * (k+1);
 </input></program>
  <p>
    However, it is important to note that the last element in the array is 
    always at location <c>length-1</c>. Attempting to refer 
    to <c>intArr[length]</c> would cause an 
    <c>IndexOutOfBoundsException</c> because no such element exists.
  </p>
  <principle>
    <title>DEBUGGING TIP: Off-by-One Error</title>
    <p>
      Because of zero indexing,
      the last element in an array is always <m>length-1</m>.
      Forgetting this fact can cause an off-by-one error.
    </p>
  </principle>
  <exercises>
    <title>Self-Study Exercise</title>
    <exercise label="sq-rt-array">
   <title>Square Roots</title>

  <statement>
    <p>
      Create an array of <c>double</c>s and populate it with 
      the square roots of the first 20 integers <m>\geq</m> 1. [Use <c>Math.sqrt(double)</c>.]
      Then write a loop to display the arrays elements. 
    </p>
  </statement>
  <program language="java" interactive="activecode"><input>
public class SquareRoots
{                   
  public static void main(String[] args)
  {
      // Create array to store the square roots of the first 20 integers.
      // Then print its values.





  }
}
</input></program>
<solution>
  <program language="java" interactive="activecode"><input>
public class SquareRoots {                   
  public static void main(String[] args) {
      // Create array to store the square roots of the first 20 integers.
      // Then print its values.

    double doubarr[] = new double[100];
    for (int k = 0; k &lt; doubarr.length; k++)
      doubarr[k] = Math.sqrt(k+1);
    for (int k = 0; k &lt; doubarr.length; k++)
      System.out.print(doubarr[k] + " ")
  }
}
</input></program>
</solution>
</exercise>
</exercises>
</section>