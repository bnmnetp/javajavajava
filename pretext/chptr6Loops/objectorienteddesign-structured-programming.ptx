<section xml:id="ood-structured-programming">
  <title>OBJECT-ORIENTED DESIGN:
  Structured Programming</title>
  <introduction>
    <p>
          <idx><h>structured programming</h></idx> <term>Structured programming</term> is the practice of writing programs that are built up from a small set of predefined control structures.
      As an overall approach to programming,
      structured programming has largely been superseded by the object-oriented approach.
      Nevertheless,
      its design principles are still relevant to the design of the algorithms and methods that make up a program's objects.
    </p>
    <p>
      The principles of structured programming seem so obvious today that it may be difficult to appreciate their importance.
      In the 1960s and 1970s, one of the main controls used in programs was the infamous <em>go to
          <idx><h>goto statement</h></idx>
      </em> statement,
      which could be used to transfer control of a program to any arbitrary location within it,
      and from there to any other arbitrary location, and so on.
      This led to incredibly complex and ill-formed programs<mdash/>so called
      <q>spaghetti  code</q>
      <mdash/>that were almost impossible to understand and modify.
    </p>
    <p>
      Structured programming evolved in reaction to the unstructured software development practices of the 1960s,
      which were fraught with budget overruns,
      costly delays, and failed products.
      One of the classic research results of that era was a 1966 paper by Boehm
          <idx><h>Boehm</h></idx>
      and Jacopini
          <idx><h>Jacopini</h></idx>
      that showed that any program using go to's could be represented by an equivalent program that used a sequence of two types of controls:
      if/else and while structures.
      Another influential paper by Edgar Dikjstra
          <idx><h>Dikjstra</h></idx>
      (
      <q>GoTo Statement Considered Harmful</q>
      ) pointed out the various ways in which the go to statement could lead to impossibly complex programs.
    </p>
    <p>
      The Pascal language, introduced by Nicklaus Wirth
          <idx><h>Wirth</h></idx>
      in 1971, was designed to promote structured programming techniques and became the language of choice within academic institutions because of its suitability as a teaching language.
      In Pascal, the go to was replaced with the four structures that control the flow of execution in a program (
      <xref ref="fig-controlstructs"></xref>):
    </p>
    <figure xml:id="fig-controlstructs">
      <caption>Flowcharts of the four types of
      control structures. Each small rectangle represents a single executable
      statement.<idx><h>control structures</h></idx>
      </caption>
      <image width="73%" source="chptr06/6f10.png"/>
    </figure>
    <ul>
      Sequence<mdash/>The statements in a program are executed in
      sequential order unless their flow is interrupted by one of the
      following control structures.
      Selection<mdash/>The <c>if</c>, <c>if/else</c>, and <c>switch</c>
      statements are <em>branching</em> statements that allow choice through
      the forking of the control path into two or more alternatives.
      Repetition<mdash/>The <c>for</c>, <c>while</c>, and <c>do-while</c>
      statements are <em>looping</em> statements that allow the program to
      repeat a sequence of statements.
      Method Call<mdash/>Invoking a method transfers control temporarily
      to a named method. Control returns to the point of invocation when the
      method is completed.
    </ul>
    <p>
      No matter how large or small a program you write,
      its flow of control can be constructed as a combination of these four basic types of structures.
    </p>
  </introduction>
  <subsection>
    <title>Preconditions and Postconditions</title>
    <p>
      The Java language supplies us with a good collection of control structures,
      and Java's syntax constrains the way we can use them.
      One of the features of the four control structures is that each has a single entry point and exit (
      <xref ref="fig-controlstructs"></xref>).
      This is an extremely important property.
      To grasp its importance, consider the following debugging problem:
    </p>
 <program language="java"><input>
k = 0;                        // 1. Unstructured code
System.out.println("k= " + k);// 2. k should equal 0 here
goto label1;                  // 3.
label2:
System.out.println("k= " + k);// 4. k should equal 1 here
 </input></program>
    <p>
      In this example a <em>goto</em>
      statement is used to jump to <c>label1</c>, a label that marks a section of code somewhere else in the program.
      Suppose we're trying to determine how <em>k</em>
      has acquired an erroneous value and that its value is correct in line 2 of this sequence.
      Given the go to statement on line 3, there's no guarantee that control will ever return to the <c>println()</c> statement on line 4.
      Thus, in unstructured code it is very difficult to narrow the scope of an error to a fixed segment of code.
      Because the go to statement can transfer control anywhere in the program,
      with no guarantee of return,
      any segment of code can have multiple entry points and multiple exits.
    </p>
    <p>
      Now contrast the unstructured code with the following well-structured code:
    </p>
 <program language="java"><input>
k = 0;                         // 1. Structured code
System.out.println("k= " + k); // 2. k should equal 0 here
someMethod();                  // 3.
System.out.println("k= " + k); // 4. k should equal 1 here
 </input></program>
    <p>
      In this case,
      we can be certain that control will eventually return to line 4.
      If <em>k</em>'s value is erroneous on line 4, we can trace  through <c>someMethod()</c> to find the error.
      Because any segment of a structured program has a single entry and exit,
      we can use a pair of <c>println()</c> statements in this way to converge on the location of the program bug.
    </p>
    <p>
      An important implication of the single-entry/single-exit property is that we can use
      <term>preconditions</term>
      and <term>postconditions</term>
      to help us design and debug our code.
      The previous example provided a simple example: The precondition is that <em>k</em>
      should equal 0 on line 2, and the postcondition is that
      <em>k</em> should equal 1 on line 4.
      <xref ref="fig-preposts">Figure</xref>
      shows some additional examples.
    </p>
    <figure xml:id="fig-preposts">
      <caption>Using pre- and postconditions to document code.</caption>
      <m>\bullet</m>  \vspace{-18pt}
 <program language="java"><input>
int k = 0;   // Precondition: k == 0
  k = 5;       // Assignment to k
 // Postcondition: k == 5
 </input></program>
      <m>\bullet</m>  \vspace{-18pt}
 <program language="java"><input>
int k = 0;           // Precondition: k == 0
  while (k &lt; 100) {    // While loop
      k = 2 * k + 2;
  }
  // Postcondition: k >= 100
 </input></program>
      <m>\bullet</m>  \vspace{-18pt}
 <program language="java"><input>
/*
   * factorial(n):
   *   factorial(n) is 1 if n is 0
   *   factorial(n) is n * n-1 * n-2 * ... * 1 if n > 0
   * Precondition:  n >= 0
   * Postcondition:
   *  factorial(n) = 1 if n = 0
   *               = n * n-1 * n-2 * ... * 1 if n > 0
   */
  public int factorial(int n) {
      if (n == 0)
          return 1;
      else {
          int f = 1;         // Init a temporary variable
          for (int k = n; k >= 1; k--) // For n down to 1
              f = f * k;      //   Accumulate the product
          return f;               // Return the factorial
      } // else
  } // factorial()
 </input></program>
    </figure>
    <p>
      In the first example,
      we use pre- and postconditions to define the semantics of an assignment statement.
      No matter what value <em>k</em>
      has before the assignment,
      the execution of the assignment (<c>k = 5</c>) will make the postcondition (<c>k == 5</c>) true.
    </p>
    <p>
      In the second example,
      the postcondition follows from the semantics of the while loop.
      Because the loop-entry condition is <c>k &lt; 100</c>, when the loop exits the postcondition (<c>k >= 100</c>) must be true.
    </p>
    <p>
      The third example shows how pre- and postconditions can be used to design and document methods.
      The <em>factorial(n)</em> is defined for <m>n \geq 0</m> as follows:
    </p>
 <program language="java"><input>
factorial(n) is 1, if n == 0
factorial(n) is n * n-1 * n-2 * ... * 1, if n > 0
 </input></program>
    <p>
      In other words, the factorial of <em>N</em>
      is defined as the cumulative product of multiplying 1 times 2, times 3, and so on up to <em>N</em>.
      For example,
      if <em>N</em> is 5, then <c>factorial(5)</c> is 1 * 2 * 3 * 4 * 5 = 120.
    </p>
    <p>
      Note how the factorial computation is done in the method.
      The variable <em>f</em>,
      which is used to accumulate the product, is initialized to 1.
      Then on each iteration of the <c>for</c> loop,
      <em>f</em> is multiplied by <em>k</em>
      and the product is assigned back to <em>f</em>.
      This is similar to the way we accumulate a sum,
      except in this case we are accumulating a product.
    </p>
    <p>
      The precondition on the <c>factorial()</c> method represents the condition that must be true in order for the method to work correctly.
      Factorial is undefined for <m>n \lt 0</m>,
      so it is important that <em>n</em>
      be greater than or equal to 0 whenever this method is called.
      Given that the precondition holds,
      the postcondition gives a precise specification of what must be true when the<nbsp/>method is finished.
    </p>
  </subsection>
  <subsection>
    <title>Design: Defensive Programming</title>
    <p>
      The pre- and postconditions for a method can be used to design <term>defensive code</term>
      <mdash/>that is,
      code that guards against errors.
      For example,
      what action should <c>factorial()</c> take if its precondition fails to hold?
      In Java, the best way to handle this situation is to <em>throw</em>
      an <c>IllegalArgumentException</c>, as the following example illustrates:
    </p>
 <program language="java"><input>
public int factorial(int n) {
  if (n &lt; 0)                  // Precondition failure
   throw new IllegalArgumentException("Factorial:"+ n);
  if (n == 0)
    return 1;
  else {
    int f = 1;           // Init a temporary variable
    for (int k = n; k >= 1; k--)   // For n down to 1
      f = f * k;        //     Accumulate the product
    return f;                 // Return the factorial
  }} // factorial()
 </input></program>
    <p>
      An <term>exception</term> is an erroneous condition
      (an error)
      that arises during the running of a program.
      An <c>Exception</c> is an object that encapsulates information about the erroneous condition.
      A program can <em>throw</em> an <c>Exception</c>, thereby stopping the program,
      when an erroneous condition is detected.
      In this example,
      we create a new <c>IllegalArgumentException</c> that would report the illegal value of <em>n</em>
      with something like the following error message:
    </p>
 <program language="java"><input>
Exception in thread "main" java.lang.IllegalArgumentException:
          Factorial: -1
   at Test.factorial(Param.java:5)
   at Test.main(Param.java:18)
 </input></program>
    <p>
      You have undoubtedly already encountered thrown exceptions during program development.
      Java has an extensive hierarchy of <c>Exception</c> s, which we will cover in some depth in Chapter<nbsp/>11.
      For now, however,
      we just note how to use the <c>IllegalArgumentException</c>. As its name implies,
      an <c>IllegalArgumentException</c> is used when an argument in a method call is not legal.
    </p>
    <p>
      Rather than continuing the program with an erroreous data value,
      throwing an exception causes the program to stop and print an error message.
      Determining whether an argument is legal or illegal is an important use of the method's preconditions.
      The failure of the precondition in <c>factorial()</c> points to a problem elsewhere in the program,
      because it is doubtful that the program deliberately passed a negative value to <c>factorial()</c>. The discovery of this error should lead to modifications in that part of the program where <c>factorial()</c> was invoked<mdash/>perhaps to some validation of the user's input:
    </p>
 <program language="java"><input>
int num = Integer.parseInt(textIn.getText());
if (num >= 0)    // If factorial() precondition valid
    factNum = factorial(num);   // Compute factorial
else
    System.out.println("Error");// Report input error
 </input></program>
    <p>
      This would be the traditional way to handle this kind of error.
    </p>
  </subsection>
  <subsection>
    <title>Using  Pre-  and Postconditions</title>
    <p>
      The use of preconditions and postconditions in the ways we've described can help improve a program's design at several distinct stages of its development:
      <ul>
        <li>
          <p>
            Design stage: Using pre- and postconditions in design helps to clarify the design and provides a precise measure of correctness.
          </p>
        </li>
        <li>
          <p>
            Implementation and testing stage: Test data can be designed to demonstrate that the preconditions and postconditions hold for any method or code segment.
          </p>
        </li>
        <li>
          <p>
            Documentation stage: Using pre- and postconditions to document the program makes the program more readable and easier to modify and maintain.
          </p>
        </li>
        <li>
          <p>
            Debugging stage: Using the pre- and postconditions provides precise criteria that can be used to isolate and locate bugs.
            A method is incorrect if its precondition is true and its postcondition is false.
            A method is improperly invoked if its precondition is false.
          </p>
        </li>
      </ul>
    </p>
    <p>
      Like other programming skills and techniques,
      learning how to use pre- and postconditions effectively requires practice.
      One way to develop these skills is to incorporate pre- and postconditions into the documentation of the methods you write for laboratories and programming exercises.
      Appendix<nbsp/>A provides guidelines on how to incorporate pre- and postconditions into your program's documentation.
      However, it would be a mistake to get in the habit of leaving the identification of pre- and postconditions to the documentation stage.
      The method's documentation, including its pre- and postconditions,
      should be developed during the design stage and should play a role in all aspects of program development.
    </p>
  </subsection>
  <subsection>
    <title>Effective Program Design</title>
    <p>
      What we're really saying here is that using pre- and postconditions forces you to analyze your program's logic.
      It is not enough to know that a single isolated statement within a program works correctly at the present time.
      You have to ask yourself: Will it continue to work if you change some other part of the program?
      Will other parts of the program continue to work if you revise it?
      No matter how clever you are,
      it is not possible to keep an entire model of a good-sized program in your head at one time.
      It is always necessary to focus on a few essential details and leave aside certain others.
      Ideally, what you hope is that the details you've left aside for the moment aren't the cause of the current bug you're trying to fix.
      Using pre- and postconditions can help you determine the correctness of the details you choose to set aside.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Pre- and Postconditions</title>
      <p>
        Pre- and postconditions are an effective way of analyzing the logic of your program's loops and methods.
        They should be identified at the earliest stages of design and development.
        They should play a role in the testing and debugging of the program.
        Finally, they should be included,
        in a systematic way, in the program's documentation.
      </p>
    </principle>
    <principle>
      <title>PROGRAMMING TIP:</title>
      <p>
        Develop your program's documentation at the same time that you develop its code and include the pre- and postconditions in the documentation.
      </p>
    </principle>
    <p>
      As the programs you write become longer and more complex,
      the chances that they contain serious errors increase dramatically.
      There's no real way to avoid this complexity.
      The only hope is to try to manage it.
      In addition to analyzing your program's structure,
      another important aspect of program design is the attempt to reduce its complexity.
    </p>
    <principle>
      <title>EFFECTIVE DESIGN: Reducing Complexity</title>
      <p>
        Design your programs with an aim toward reducing their complexity.
      </p>
    </principle>
    <p>
      Perhaps the best way to reduce complexity is to build your programs using a small collection of standard structures and techniques.
      The basic control structures (
      <xref ref="fig-controlstructs"></xref>) help reduce the potential complexity of a program by constraining the kinds of branching and looping structures that can be built.
      The control structures help to manage the complexity of your program's algorithms.
      In the same way,
      the following practices can help reduce and manage the complexity in a program.
    </p>
    <principle>
      <title>PROGRAMMING TIP: Standard Techniques</title>
      <p>
        Acquire and use standard programming techniques for standard programming problems.
        For example,
        using a temporary variable to swap the values of two variables is a standard technique.
      </p>
    </principle>
    <principle>
      <title>PROGRAMMING TIP: Encapsulation</title>
      <p>
        Use methods wherever appropriate in your own code to encapsulate important sections of code and thereby reduce complexity.
      </p>
    </principle>
    <principle>
      <title>PROGRAMMING TIP: Code Reuse</title>
      <p>
        Instead of reinventing the wheel,
        use library classes and methods whenever possible.
        These have been carefully designed by experienced programmers.
        Library code has been subjected to extensive testing.
      </p>
    </principle>
  
    
    <exercises><title>Self-Study Exercises</title>
      <exercise label="prepostcond1">
        <title>Pre/Post Conditions 1</title>
      <statement>
          <p>
            Identify the pre- and postconditions on
            <em>j</em> and <em>k</em>
            where indicated in the following code segment:
 <program language="java"><input>
int j = 0; k = 5;
do {
    if (k % 5 == 0)  {
                       // Precondition
        j += k;
        k--;
    }
    else k *= k;
  } while (j &lt;= k);
                      // Postcondition
 </input></program>
          </p>
        </statement>
      <solution>
        <p>
          Identify the pre- and postconditions on
          <em>j</em> and <em>k</em>
          where indicated in the following code segment:
 <program language="java"><input>
int j = 0; k = 5;
do {
    if (k % 5 == 0) {
                      // Precondition: j &lt;= k
        j += k;
        k--;
    }
    else k *= k;
  } while (j &lt;= k);
                      // Postcondition: j > k
 </input></program>
        </p>
      </solution>  
      </exercise>

          <exercise label="prepostcond2">
            <title>Pre/Post Conditions 2</title>
          <statement>
          <p>
            Identify the pre- and postconditions for the following method,
            which computes <m>x^n</m> for
            <m>n \geq 0</m>:
 <program language="java"><input>
public double power(double x, int n) {
    double pow = 1;
    for (int k = 1; k &lt;= n; k++)
        pow = pow * x;
    return pow;
} // power()
 </input></program>
          </p>
        </statement>
        <solution>
          <p>
            Identify the pre- and postconditions for the following method,
            which computes <m>x^n</m> for <m>n >= 0</m>.
   <program language="java"><input>
   // Precondition: N >= 0
   // Postcondition: power(x,n) == x to the n
   public double power(double x, int n ) {
       double pow = 1;
       for (int k = 1; k &lt;= n; k++)
           pow = pow * x;
       return pow;
   } // power()
   </input></program>
          </p> 
        </solution>  
        </exercise>
        
        </exercises>
    
  </subsection>
</section>