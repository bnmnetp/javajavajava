<section xml:id="object-oriented-design-inheritanceand-polymorphism">
  <title>Object-Oriented Design: Inheritance and Polymorphism</title>
  <p>
    This use of <c>Object</c>'s <c>toString()</c> method provides our first  look at Java's <term>inheritance</term> mechanism and how it promotes the generality and extensibility of the object-oriented approach.
    As a subclass of <c>Object</c>, our <c>OneRowNim</c> class automatically inherits <c>toString()</c> and any other <c>public</c> or <c>protected</c> methods defined in <c>Object</c>. We can simply use these methods as is,
    insofar as they are useful to us.
    As we saw in this case,
    the default version of <c>toString()</c> wasn't very useful.
    In that case,
    we can override the method by defining a method in our class with the exact same method signature.
    The new version of <c>toString()</c> can be customized to do exactly what is most appropriate for the subclass.
  </p>
  <p>
    One of the great benefits of the object-oriented approach is the ability to define a task,
    such as <c>toString()</c>, at a very high level in the class hierarchy and let the inheritance mechanism spread that task throughout the rest of the hierarchy.
    Because <c>toString()</c> is defined in <c>Object</c>, you can invoke this method for any Java object.
    Moreover, if you override <c>toString()</c> in the classes you define,
    you will be contributing to its usefulness.
    Two important lessons from this example are
  </p>
  <principle>
    <title>EFFECTIVE DESIGN: Inheritance</title>
    <p>
      The higher up in the class hierarchy that a method is defined,
      the more widespread its use can be.
    </p>
  </principle>
  <principle>
    <title>EFFECTIVE DESIGN: Overriding <c>toString()</c></title>
    <p>
      The <c>toString()</c> method can be overridden in any user defined Java class.
      It is a useful thing to do in any class where the state of an object can be defined briefly.
    </p>
  </principle>

  <p>
    Another important concept of object-oriented design is polymorphism.
    The <c>toString()</c> method is an example of a polymorphic method.
    The term <term>polymorphism</term>
    is from the Greek terms <em>poly</em>, which means
    <q>many,</q>
    and <em>morph</em>, which means
    <q>form.</q>
    The <c>toString()</c> method is polymorphic because it has different behavior when invoked on 
    different objects.
  </p>
  <p>
    For example,
    suppose we design a class, <c>Student</c>, as a subclass of <c>Object</c> and define its <c>toString()</c> method to return the student ID number.
    Given this design,
    then <c>obj.toString()</c> will return a student ID if <c>obj</c> is an instance of <c>Student</c>, 
    but if it is an instance of <c>OneRowNim</c>, it will return a the description of its state that we defined above.
    The following code segment illustrates this point:
  </p>
 <program language="java"><input>
Object obj;           // obj can refer to any Object
obj = new Student("12345");// obj refers to a Student
System.out.println(obj.toString()); // Prints "12345"
obj = new OneRowNim(11); // obj refers to a OneRowNim
System.out.println(obj.toString());
// Prints: nSticks = 11, player = 1
 </input></program>
  <p>
    In this case,
    the variable <c>obj</c> is used to refer to a
<c>Student</c> and then to a <c>OneRowNim</c> instance.
    This is okay because both classes are subclasses of <c>Object</c>. 
    When <c>toString()</c> is invoked on <c>obj</c>, Java will figure out what subclass of <c>Object</c> 
    the instance belongs to and invoke the appropriate <c>toString()</c> method.
  </p>
</section>