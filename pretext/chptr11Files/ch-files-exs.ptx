
 <section xml:id="ch-files-exs">
    <title>Exercises</title>
 <p>
    <term>Note:</term> For programming exercises,
    <term>first</term> draw a UML class diagram describing all classes and their inheritance relationships and/or associations.
  </p>
  <ol>
    <li>
      <p>
        Explain the difference between each of the following pairs of terms:
      </p>
      <ol>
        System.in and <c>System.out</c>. File and <em>directory</em>. Buffering and <em>filtering</em>. Absolute and <em>relative path name</em>. Input stream and <em>output stream</em>. File and <em>database</em>. Record and <em>field</em>. Binary file and <em>text file</em>. Directory and <em>database</em>.
      </ol>
    </li>
    <li>
      <p>
        Fill in the blanks.
        <ol>
          <li>
            <p>
              Unlike text files,
              binary files do not have a special <c>__________</c> character.
            </p>
          </li>
          <li>
            <p>
              In Java, the <c>String</c> array parameter in the
<c>main()</c> method is used for <c>__________</c> .
            </p>
          </li>
          <li>
            <p>
              <c>__________</c> files are portable and platform independent.
            </p>
          </li>
          <li>
            <p>
              A <c>__________</c> file created on one computer can't be read by another computer.
            </p>
          </li>
        </ol>
      </p>
    </li>
    <li>
      <p>
        Arrange the following kinds of data into their correct hierarchical relationships: <c>bit</c>,
<c>field</c>, <c>byte</c>, <c>record</c>, <c>database</c>,
<c>file</c>, <c>String</c>, <c>char</c>.
      </p>
    </li>
    <li>
      <p>
        In what different ways can the following string of 32 bits be interpreted?
 <program language="java"><input>
00010101111000110100000110011110
 </input></program>
      </p>
    </li>
    <li>
      <p>
        When reading a binary file,
        why is it necessary to use an infinite loop that's exited only when an exception occurs?
      </p>
    </li>
    <li>
      <p>
        Is it possible to have a text file with 10 characters and 0 lines?
        Explain.
      </p>
    </li>
    <li>
      <p>
        In reading a file,
        why is it necessary to attempt to read from the file before entering the read loop?
      </p>
    </li>
    <li>
      <p>
        When designing binary I/O, why is it especially important to design the input and output routines together?
      </p>
    </li>
    <li>
      <p>
        What's the difference between ASCII code and UTF code?
      </p>
    </li>
    <li>
      <p>
        Could the following string of bits possibly be a Java object?
        Explain.
 <program language="java"><input>
00010111000111101010101010000111001000100
11010010010101010010101001000001000000111
 </input></program>
      </p>
    </li>
    <li>
      <p>
        Write a method that could be added to the <c>TextIO</c> program to read a text file and print all lines containing a certain word.
        This should be a <c>void</c> method that takes two parameters: The name of the file and the word to search for.
        Lines not containing the word should not be printed.
      </p>
    </li>
    <li>
      <p>
        Write a program that reads a text file and reports the number of characters and lines contained in the file.
      </p>
    </li>
    <li>
      <p>
        Modify the program in the previous exercise so that it also counts the number of words in the file.
        (<em>Hint</em>: The
<c>StringTokenizer</c> class might be useful for this task.)
      </p>
    </li>
    <li>
      <p>
        Modify the <c>ObjectIO</c> program so that it allows the user to designate a file and then input <c>Student</c> data with the help of a GUI. As the user inputs data,
        each record should be written to the file.
      </p>
    </li>
    <li>
      <p>
        Write a program that will read a file of <c>int</c> s into memory,
        sort them in ascending order,
        and output the sorted data to a second file.
      </p>
    </li>
    <li>
      <p>
        Write a program that will read two files of <c>int</c> s, which are already sorted into ascending order,
        and merge their data.
        For example,
        if one file contains 1, 3, 5, 7, 9, and the other contains 2, 4, 6, 8, 10,
        then the merged file should contain 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.
      </p>
    </li>
    <li>
      <p>
        Suppose you have a file of data for a geological survey.
        Each record consists of a longitude,
        a latitude, and an amount of rainfall,
        all represented by <c>double</c> s.
        Write a method to read this file's data and print them on the screen,
        one record per line.
        The method should be <c>void</c> and it should take the name of the file as its only parameter.
      </p>
    </li>
    <li>
      <p>
        Suppose you have the same data as in the previous exercise.
        Write a method that will generate 1,000 records of random data and write them to a file.
        The method should be <c>void</c> and should take the file's name as its parameter.
        Assume that longitudes have values in the range <m>+/-</m> 0 to 180 degrees,
        latitudes have values in the range <m>+/-</m> 0 to 90 degrees,
        and rainfalls have values in the range 0 to 20 inches.
      </p>
    </li>
    <li>
      <p>
        Design and write a file copy program that will work for either text files or binary files.
        The program should prompt the user for the names of each file and copy the data from the source file into the destination file.
        It should not overwrite an existing file, however.
        (<em>Hint</em>: Read and write the file as a file of <c>byte</c>.)
      </p>
    </li>
    <li>
      <p>
        Design a class,
        similar to <c>Student</c>, to represent an
<c>Address</c>. It should consist of street,
        city, state,
        and zip code and should contain its own <c>readFromFile()</c> and
<c>writeToFile()</c> methods.
      </p>
    </li>
    <li>
      <p>
        Using the class designed in the previous exercise,
        modify the <c>Student</c> class so that it contains an <c>Address</c> field.
        Modify the <c>ObjectIO</c> program to accommodate this new definition of <c>Student</c> and test your program.
      </p>
    </li>
    <li>
      <p>
        Write a program called <c>Directory</c>, which provides a listing of any directory contained in the current directory.
        This program should prompt the user for the name of the directory.
        It should then print a listing of that directory.
        The listing should contain the following information: The full path name of the directory,
        and then include the file name, length,
        and last modified date, and a read/write code for each file.
        The read/write code should be an <em>r</em>
        if the file is readable and a <em>w</em>
        if the file is writeable, in that order.
        Use a
        <q>-</q>
        to indicate not readable or not writeable.
        For example,
        a file that is readable but not writable will have the code
        <em>r</em>-. Here's an example listing:
 <program language="java"><input>
Listing for directory: myfiles
  name          length modified   code
  index.html    548    129098     rw
  index.gif     78     129190     rw
  me.html       682    128001     r-
  private.txt   1001   129000     --
 </input></program>
    Note that the <c>File.lastModified()</c> returns a <c>long</c>, which gives the modification time of the file.
        This number can't easily be converted into a date, so just report its value.
      </p>
      </li>
      <li>
      <p>
        Challenge: Modify the <c>OneRowNimGUI</c> class that is listed in Chapter<nbsp/>4's Figure<nbsp/> 4-25 so 
        that the user can save the position of the game to a file or open and read a game position from a file.
        You should add two new <c>JButton</c> s to the GUI interface.
        Use the object serialization example as a model for your input and output streams.
      </p>
      </li>
      <li>
      <p>
        Challenge: In Unix systems,
        there's a program named
<c>grep</c> that can list the lines in a text file containing a certain string.
        Write a Java version of this program that prompts the user for the name of the file and the string to search for.
      </p>
      </li>
      <li>
      <p>
        Challenge: Write a program in Java named <c>Copy</c> to copy one file into another.
        The program should prompt the user for two file names, <c>filename1</c> and <c>filename2</c>. Both <c>filename1</c> and <c>filename2</c> must exist or the program should throw a <c>FileNotFoundException</c>. Although
<c>filename1</c> must be the name of a file (not a directory),
<c>filename2</c> may be either a file or a directory.
        If <c>filename2</c> is a file,
        then the program should copy <c>filename1</c> to
<c>filename2</c>. If <c>filename2</c> is a directory,
        then the program should simply copy <c>filename1</c> into <c>filename2</c>. That is,
        it should create a new file with the name <c>filename1</c> inside the
<c>filename2</c> directory,
        copy the old file to the new file,
        and then delete the old file.
      </p>
    </li>
  </ol>
</section>