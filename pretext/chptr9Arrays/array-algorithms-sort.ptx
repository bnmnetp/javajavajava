<section xml:id="sec-sort">
  <title>Array Algorithms: Sorting</title>
  <introduction>
    <p>
      <term>Sorting</term> an array is the process of arranging its elements in ascending 
      or descending order.
      Sorting algorithms are among the most widely used algorithms.
      Any time large amounts of data are maintained,
      there is some need to arrange them in a particular order.
      For example,
      the telephone company needs to arrange its accounts by the last 
      name of the account holder as well as by phone number.
    </p>
  </introduction>
  <subsection>
    <title>Insertion Sort</title>
    <p>
      The first sorting algorithm we'll look at is known as
      <term>insertion sort</term>,
      so named because as it traverses through the array from the first to the last element,
      it inserts each element into its correct position in the partially sorted array.
    </p>
    <p>
      For an array of <em>N</em> elements,
      let's think of the array as divided into two parts.
      The <em>sorted</em> part will be the left hand side of the array.
      And the <em>unsorted</em> part will be the right hand side of the array.
    </p>
    <pre>
    Sorted   |  Unsorted   Before inserting the kth element
    5 14 19  |  1 0 67 4
                ^
                k
    </pre>
    <p>
      On each iteration insertion sort will insert the first element in the unsorted
      part of the array, the <em>k</em>th element, into its correct position in the 
      sorted part of the array.
    </p>  
   <pre>
    Sorted    |  Unsorted  After inserting the kth element
    1 5 14 19 |  0 67 4
                 ^ 
                 k
    </pre>
    <p>
      To insert the <em>k</em>th element into the sorted part of the array,
      it will be necessary to move elements greater than it out of the way.
    </p>
    <p>
      In pseudocode, insertion sort can be represented as follows:
    </p>
    <algorithm>
    <title>Insertion sort </title>
 <program language="java"><input>
Insertion Sort of an array, arr, of N elements into ascending order
1. For k assigned 1 through N-1
2.   Save the kth element, arr[k], in temp.
3.   Set i to point to the largest element in the sorted part
4.   While i >= 0 AND the ith element is greater than temp  
5.     Shift the ith element to the right
6.     Set i to point to the next element in the sorted part
7.   Insert temp, the kth element, at its correct location.
 </input></program>
 </algorithm>
    <p>
      As you see, the algorithm has nested loops, an outer for-loop and an inner while-loop.
      Each iteration of the outer loop will insert one element,
      the <em>k</em>th element, into its proper place 
      in the sorted part of the array. The role of the inner while-loop is to move 
      the already sorted elements out of the way.
    </p>
    <p>
      The outer (<em>k</em>) loop, iterates from 1 to <em>N-1</em>. 
      On each iteration, it saves the <em>k</em>th element in temp. It then sets the 
      while-loop variable, <c>i</c>, to point to the largest element in 
      the sorted part of the array, the element just to the left of the
      <em>k</em>th element.
    </p>
    <p>
      The inner loop proceeds from right to left <mdash/> that is, 
      from <c>k-1</c> towards 0. It shifts all numbers greater than temp to the right.
      It terminates when it finds a number smaller or equal to temp.
    </p> 
    <p>
      After the while-loop terminates,  temp (the <em>k</em>th element) 
      is inserted into its proprer place in the sorted part of the array.
    </p>
    <p>
      To see how this works,
      consider an integer array containing five numbers:
    </p>
 <program language="java"><input>
21 |  20  27  24  19      temp = 20
      k
 </input></program>
    <p>
      The vertical line marks the boundary between the sorted and unsorted portions of the array.
      The outer loop will look at each of the remaining elements, starting at arr[1],
      one at a time, inserting them into their proper positions in the sorted portion 
      of the array. The outer loop saves the <em>k</em>th element (20) in temp.
    </p>
    <p>
      Because 21 is greater than 20, the inner loop will move 21 to 
      the right by one position. And will then terminate. 
    </p>
    <p>
      The outer loop will complete its work by inserting 20 in the location 
      previously occupied by 21, in effect swapping 20 and 21.
      At this point, after one complete iteration of the outer loop, 
      the first two numbers are in the correct order relative to each other:
    </p>
 <program language="java"><input>
20  21 |  27  24  19     temp = 27
          k
 </input></program>
    <p>
      For the next element, 27,
      none of elements in the sorted portion need to be moved because they are
      all less than 27. The inner loop will not iterate at all in this case.
      So after two complete iterations we have:
    </p>
 <program language="java"><input>
20  21  27 |  24  19    temp = 24
              k
 </input></program>
    <p>
      For the fourth element, 24, only the 27 needs to be shited to the right, giving:
    </p>
 <program language="java"><input>
20  21  24  27 | 19    temp = 19
                 k
 </input></program>
    <p>
      At this point, the sorted part of the array consists of the first four elements,
      which are in the correct order relative to each other.
    </p>
    <p>
      However, for the last element, 19,
      all of the elements in the sorted part of the array need to be shifted one 
      space to the right. Let's trace each iteration of the inner loop starting
      from this point, where k = 4 and i = 3:
    </p>
 <program language="java"><input>
              k
20 21 24 27 | 19   Save 19 in temp:              temp=19, i=3
20 21 24 27 | 27   Move 27 to the right:         temp=19, i=2
20 21 24 24 | 27   Move 24 to the right:         temp=19, i=1
20 21 21 24 | 27   Move 21 to the right:         temp=19, i=0
20 20 21 24 | 27   Move 20 to the right:         temp=19, i=-1 inner loop terminates
19 20 21 24 27 |   Insert temp=19 at index i+1
 </input></program>
    <p>
      It's important to see that when the inner loop terminates <em>i</em> 
      will always be one space to the left of where we make the insertion. 
      That's why the insertion is made at <c>arr[i+1]</c>.
    </p>
    <p>
      The <c>Sort</c> class
      (<xref ref="lst-insertion">Listing</xref>)
      provides an implementation of the <c>insertionSort()</c> method.
    </p>

<!-- 
Here's a Youtube anomation that matches our algorithm: https://www.youtube.com/watch?v=OGzPmgsI-pQ
<video source="https://www.youtube.com/watch?v=OGzPmgsI-pQ">
</video>
-->

    <listing xml:id="lst-insertion">
      <caption>Source code for  the <c>insertionSort()</c> method.
      Note in <c>main()</c> how an integer array is passed to the method.</caption>

 <program language="java" interactive="activecode"><input>
public class Sort {

  public void insertionSort(int arr[]) {
    int temp;                         // Temporary variable 
    for (int k = 1; k &lt; arr.length; k++)  {
        temp = arr[k];                  // Save the kth element in temp
        int i = k-1;                    // Start at high end of sorted 
        while (i >= 0 &amp;&amp; arr[i] > temp) { // For each element > temp
          arr[i+1] = arr[i];            // Move it to the right
          i--;                          // Move i to the left
        }
        arr[i + 1] = temp;              // Insert the kth element
    } // outer
  } // insertionSort()

  public void print(int arr[]) {
    for (int k = 0; k &lt; arr.length; k++)// For each integer
      System.out.print( arr[k] + " \t "); //  Print it
    System.out.println();
  } // print()

  public static void main(String args[]) {
    int intArr[] = { 21, 20, 27, 24, 19 };
    Sort sorter = new Sort();
    sorter.print(intArr);
    sorter.insertionSort(intArr); // Passing an array
    sorter.print(intArr);
  } // main()
} //Sort
 </input></program>
    </listing>

    <p>
      It's important to see, again, that after the while-loop terminates
      the variable <em>i</em> will always point one space to the left
      of where the <em>k</em>th element should be inserted. Thus,
      the insertion is made at <c>arr[i+1]</c>.
    </p>
    <p>
      Also, note the complex entry condition we use for the inner while-loop:
    </p>
      <program language="java"><input>
      i >= 0 &amp;&amp; arr[i] > temp; 
      </input></program>
    <p>
      This is necessary because we want <c>i</c> to iterate from right to 
      left, but not to go past 0. But we also want the loop to stop if 
      <c>arr[i]</c> isn't greater than  <c>temp</c>. We want it to stop as soon as we 
      find a number that's less than or equal to  <c>temp</c>. That's where 
      <c>temp</c> needs to be inserted.
    </p>
    <p>
      There are also a couple of syntax points that are important to observe.
      First, note in the declaration of the <c>insertionSort()</c> method how 
      empty brackets (<c>[]</c>) are used to  declare an array parameter.
      If the brackets were omitted, then <c>arr</c> would be indistinguishable 
      from an ordinary <c>int</c> parameter.
    </p>
    <principle>
      <title>DEBUGGING TIP: Array Parameter</title>
      <p>
        When declaring an array parameter,
        empty brackets must be used either after the array name or after the 
        type name to distinguish it from a non-array parameter.
      </p>
    </principle>
    <p>
      Second, in the <c>main()</c> method note that brackets are not used
      when an array of integers is passed to the <c>insertionSort()</c> 
      method:
    </p>
 <program language="java"><input>
sorter.insertionSort(intArr); // Pass intArr to the method
 </input></program>

    <principle>
      <title>DEBUGGING TIP: Passing an Array Argument</title>
      <p>
        When passing an array to a method only the array name is used.
        Brackets are not used.
      </p>
    </principle>
  <exercises xml:id="ss-insertion-sort">
    <title>Self Study Exercise</title>
 <exercise label="insertion-sort">
 <title>Run Insertion Sort</title>
  <statement>
    <p>
      Run the insertion sort program. Click on Show CodeLens to step through 
      the code with the Next button.
    </p>
  </statement>
  <program language="java" interactive="activecode"><input>
public class Sort {

  public void insertionSort(int arr[]) {
    int temp;                         // Temporary variable 
    for (int k = 1; k &lt; arr.length; k++)  {
        temp = arr[k];                  // Save the kth element in temp
        int i = k-1;                    // Start at high end of sorted 
        while (i >= 0 &amp;&amp; arr[i] > temp) { // For each element > temp
          arr[i+1] = arr[i];            // Move it to the right
          i--;                          // Move i to the left
        }
        arr[i + 1] = temp;              // Insert the kth element
    } // outer
  } // insertionSort()

  public void print(int arr[]) {
    for (int k = 0; k &lt; arr.length; k++)// For each integer
      System.out.print( arr[k] + " \t "); //  Print it
    System.out.println();
  } // print()

  public static void main(String args[]) {
    int intArr[] = { 21, 20, 27, 24, 19 };
    Sort sorter = new Sort();
    sorter.print(intArr);
    sorter.insertionSort(intArr); // Passing an array
    sorter.print(intArr);
  } // main()
} // Sort
 </input></program>
 <solution>
  <p>Use Codelens to step through the insertion sort algorithm.</p>
 </solution>
 </exercise>

  <exercise label="sort-1">
    <title>Insertion sort trace 1</title>
    <statement>
        <p>Suppose the following array of numbers is sorted from low to high by 
        <term>insertion sort</term>:</p>
        <pre>
        24 18 90 1 0 85 34 18
        </pre>
          <p>Which of the following shows the order of the numbers <term>after one pass</term> 
          through the array?</p>
    </statement>
    <choices>
        <choice>
            <statement>
                <p>24 18 90 1 0 85 34 18</p>
            </statement>
            <feedback>
                <p>Incorrect</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>1 24 18 90 0  85 34 18 </p>
            </statement>
            <feedback>
                <p>Incorrect</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>85 24 90 1  0  18 34 18 </p>
            </statement>
            <feedback>
                <p>Incorrect</p>
            </feedback>
        </choice>
        <choice correct="yes">
            <statement>
              <p>18 24 90 1  0  85 34 18</p>
            </statement>
            <feedback>
                <p>Correct. 18 would be inserted before 24.</p>
            </feedback>
        </choice>
    </choices>
    <hint>
      <p>Trace through one complete iteration of the outer loop.</p>
    </hint>
    <solution>
      <p>Answer: 18 24 90 1  0  85 34 18</p>
      <p>The first pass would insert 18 before 24:</p>
      <pre> 
        24 18 90 1  0  85 34 18 // Initial
        18 24 90 1  0  85 34 18 // Pass 1
       </pre>
    </solution>    
  </exercise>
  <exercise label="sort-2">
    <title>Insertion sort trace 2</title>
    <statement>
        <p>Suppose the following array of numbers is sorted from low to high by <term>insertion sort</term>:</p>
        <pre>
        24 18 90 1 0 85 34 18
        </pre>
          <p>Which of the following shows the order of the numbers <term>after four passes</term>
           through the array?</p>
    </statement>
    <choices>
        <choice>
            <statement>
                <p>18 24 90 1  0  85 34 18</p>
            </statement>
            <feedback>
                <p>Incorrect. That's how it would look after 2 passes.</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>0  1  18 24 85 90 34 18</p>
            </statement>
            <feedback>
                <p>Incorrect. That's how it would look after 5 passes.</p>
            </feedback>
        </choice>
        <choice correct="yes">
            <statement>
              <p>0  1  18 24 90 85 34 18</p>
            </statement>
            <feedback>
                <p>Correct. The left side would be sorted up to the 5th element.</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>0  1  18 18 24 34 85 90</p>
            </statement>
            <feedback>
                <p>Incorrect. The array would not be completely sorted after 4 passes.</p>
            </feedback>
        </choice>
    </choices>
    <hint>
      <p>Trace through four complete iterations of the outer loop. After four passes
      the numbers up to and including location 4 in the original array should be in the correrct order.</p>
    </hint>
    <solution>
      <p>Answer: 0  1  18 24 90 85 34 18</p>
      <p>The entire sort would go like this:</p>
      <pre> 
        24 18 90 1  0  85 34 18 // Initial
        18 24 90 1  0  85 34 18 // Pass 1
        18 24 90 1  0  85 34 18 // Pass 2
        1  18 24 90 0  85 34 18 // Pass 3
        0  1  18 24 90 85 34 18 // Pass 4 
        0  1  18 24 85 90 34 18 // Pass 5
        0  1  18 24 34 85 90 18 // Pass 6
        0  1  18 18 24 34 85 90 // Pass 7        
       </pre>
    </solution>
  </exercise>
   
</exercises>

  </subsection>
  <subsection xml:id="sec-selectionsort">
    <title>Selection Sort</title>
    <p>
      There are a large variety of array sorting algorithms.
      Selection sort is different from,
      but comparable to, insertion sort in its overall performance.
    </p>
    <p>
      To illustrate the <term>selection sort</term> algorithm,
      suppose you want to sort a deck of 25 index cards, numbered from 1 to 25,
      layed out on the table.
      Starting with the first card, assume it is the smallest card.
      Compare it with the second, third, fourth and every other card in the deck.
      Whenever you find a card that is smaller than the first card, swap it with the first card.
    </p>
    <p>
      In this way we will have selected the smallest card and placed it at the first position 
      in the deck.
    </p>
    <p>
      Complete the process again starting this time with the second card. 
      Find the smallest card in the remaining deck and swap it with the second card.
      Repeating this process 24 times a for deck of 25 cards will correctly sort the deck.
    </p>
    <p>
      Translating this strategy into pseudocode gives the following algorithm:
    </p>

     <algorithm>
    <title>Selection sort </title>
 <program language="java"><input>
Selection sort of an N element array <c>arr</c> from small to large
1. For k assigned 0 to N-2          // Outer loop
2.   smallest = k                   // Assume kth is smallest so far
3.   For j assigned k+1 to N-1       // Inner loop: finds smallest
4.     If arr[j] &lt; arr[smallest]
5.        smallest = j               // Remember which is smallest
6.   Swap arr[k] and arr[smallest]   // Swap kth and smallest
 </input></program>
 </algorithm>
    <p>
      For an array of N elements, you need to repeat the outer loop N-1 times.
      On each iteration of the outer loop,the inner loop takes care of 
      finding the next smallest element.
    </p>
    <p>
      In the outer loop, the algorithm assumes that 
      the <em>k</em>th element is the smallest so far (line 2).
      It usually won't be, of course.  But it will be after the inner loop
      terminates and <em>k</em>th element is swapped with the smallest.
    </p>
    <p>
      The inner loop finds smallest by iterating through the rest of the array 
      (from <c>k+1</c> to N-1) comparing each element with the smallest so far
      (lines 4) and remembering the location of the element 
      that is currently the smallest (lines 5).
    </p>
    <p>
      Finally, when the inner loop terminates, the algorithm swaps the smallest 
      element with <em>k</em>th element.
    </p>

<exercises>
  <title>Self-Study Exercises</title>
    <exercise label="sort-3">
    <title>Selection sort trace 1</title>
    <statement>
        <p>Suppose the following array of numbers is sorted from low to high 
        by <term>selection sort</term>:</p>
        <pre>
        24 18 90 1 0 85 34 18
        </pre>
          <p>Which of the following shows the order of the numbers <term>after one pass</term>
           through the array?</p>
    </statement>
    <choices>
        <choice>
            <statement>
                <p>18 24 90 1  0  85 34 18</p>
            </statement>
            <feedback>
                <p>Incorrect. Are you thinking of insertion sort?</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>0  1  18 18  24  85 34 90 </p>
            </statement>
            <feedback>
                <p>Incorrect. That's how it would look after 5 passes.</p>
            </feedback>
        </choice>
        <choice correct="yes">
            <statement>
              <p>0  18 90 1   24  85 34 18</p>
            </statement>
            <feedback>
                <p>Correct. The smallest number would be swapped into the 1st location.</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>0  1  18 18 24 34 85 90</p>
            </statement>
            <feedback>
                <p>Incorrect. The array would not be completely sorted after 1 pass.</p>
            </feedback>
        </choice>
    </choices>
    <hint>
      <p>Trace through one complete iteration of the outer loop.</p>
    </hint>
    <solution>
      <p> Answer: >0  18 90 1   24  85 34 18 </p>
      <p>The first pass would select the smallest number and place it in the first array location:</p>
      <pre>
      24 18 90 1   0   85 34 18 // Initial
      0  18 90 1   24  85 34 18 // Pass 1
      </pre>
    </solution>
  </exercise>

  <exercise label="sort-4">
    <title>Selection sort trace 2</title>
    <statement>
        <p>Suppose the following array of numbers is sorted from low to high 
        by <term>selection sort</term>:</p>
        <pre>
        24 18 90 1 0 85 34 18
        </pre>
          <p>Which of the following shows the order of the numbers <term>after four passes</term>
           through the array?</p>
    </statement>
    <choices>
        <choice>
            <statement>
                <p>0  1  90 18  24  85 34 18</p>
            </statement>
            <feedback>
                <p>Incorrect. That's how it would look after 2 passes.</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>0  1  18 90  24  85 34 18  </p>
            </statement>
            <feedback>
                <p>Incorrect. That's how it would look after 3 passes.</p>
            </feedback>
        </choice>
        <choice correct="yes">
            <statement>
              <p>0  1  18 18  24  85 34 90 </p>
            </statement>
            <feedback>
                <p>Correct. The four smallest numbers would be swapped into their locations.</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>0  1  18 18 24 34 85 90</p>
            </statement>
            <feedback>
                <p>Incorrect. The array would not be completely sorted after 1 pass.</p>
            </feedback>
        </choice>
    </choices>
    <hint>
      <p>Trace through four complete iterations of the outer loop. After
      each iteration the next smallest number should be swapped into place.</p>
    </hint>
    <solution>
      <p> Answer: 0  1  18 18  24  85 34 90 </p>
      <p>The four smallest numbers would be sorted at the left of the array.</p>
      <pre>
        24 18 90 1   0   85 34 18 // Initial
        0  18 90 1   24  85 34 18 // Pass 1
        0  1  90 18  24  85 34 18 // Pass 2
        0  1  18 90  24  85 34 18 // Pass 3
        0  1  18 18  24  85 34 90 // Pass 4
        0  1  18 18  24  85 34 90 // Pass 5
        0  1  18 18  24  34 85 90 // Pass 6
        0  1  18 18  24  34 85 90 // Pass 7
      </pre>
    </solution>  
  </exercise>
  </exercises>
  </subsection>

  <subsection xml:id="sec-swap-vars">
    <title>Algorithm: Swapping Memory Elements</title>
    <p>
      An important feature of the selection sort algorithm is its need to swap two array elements.
      Swapping two memory elements,
      whether they are array elements or not,
      requires the use of a temporary variable.
      For example, to swap the <em>j</em>th and
      <em>k</em>th elements in an <c>int</c> array named <c>arr</c>, you 
      would use the following algorithm: 
    </p>
    <algorithm>
    <title>Swap Two Variables </title>
 <program language="java"><input>
int temp = arr[j]; // Store the jth element in temp
arr[j] = arr[k];   // Move the kth element into j
arr[k] = temp;     // Move the jth element into k
 </input></program>
 </algorithm>
    <p>
      The <c>temp</c> variable temporarily stores the
      <em>j</em>th element so its value is not lost when its location is 
      overwritten by the <em>k</em>th element.
      The need for this variable is a subtlety that beginning programmers frequently overlook.
      But consider what would happen if we used the following erroneous algorithm: 
    </p>
 <program language="java"><input>
arr[j] = arr[k]; // Erroneous swap code
arr[k] = arr[j];
 </input></program>
    <p>
      If <c>arr[j]</c> refers to 4 and <c>arr[k]</c> refers to 2 
      in the array 1 4 2 8 , then the erroneous algorithm would produce 1 2 2 8 , the wrong result.
    </p>
    <principle>
      <title>PROGRAMMING TIP: Swapping Variables</title>
      <p>
        When swapping two memory elements,
        a temporary variable must be used to store one of the 
        elements while its memory location is being overwritten.
      </p>
    </principle>
    <p>
      The following method implements the swap algorithm for two elements,
      <em>el1</em> and <em>el2</em> of an <c>int</c> array:
    </p>
 <program language="java"><input>
void swap(int arr[], int el1, int el2) {
    int temp = arr[el1]; // Assign first element to temp
    arr[el1] = arr[el2]; // Overwrite first with second
    arr[el2] = temp;     // Overwrite second with first
} // swap()
 </input></program>

<exercises>
<title>Self-Study Exercises</title>
  <exercise label="swap-algorithm" adaptive="yes">
   <title>Swapping values in variables</title>
   <statement>
       <p>Suppose the  <c>double</c> variables <c>var1</c> and <c>var2</c> have been properly declared
       and initialized. Arrange the following blocks to swap their values.</p>
   </statement>
   <blocks>
      <block order="1">
           <p><c>double temp = 0;</c></p>
       </block>
      <block order="2">
           <p><c>temp = var1;</c></p>
       </block>
       <block order="3">
          <p><c>var1 = var2;</c></p>
       </block>       
       <block order="4">
          <p><c>var2 = temp;</c></p>
       </block>       
   </blocks>
   <hint>First, you need to save one of the values in <c>temp</c>.</hint>
   <solution>
   <pre>
   double temp = 0;
   temp = var1;
   var1 = var2;
   var2 = temp;
   </pre>
   </solution>
</exercise>
</exercises>
 </subsection>

  <subsection xml:id="paasing-params">
    <title>Passing a Value and Passing a Reference</title>
    <p>
      Recall from Chapter<nbsp/>3 that when an <c>Object</c> is passed to a method,
      a copy of the reference to the <c>Object</c> is passed.
      Because an array is an object,
      a reference to the array is passed to <c>insertionSort()</c>, rather than the whole array itself.
      This is in contrast to how a value of a primitive type is passed.
      In that case, a copy of the actual value is passed.
    </p>
    <principle>
      <title>Primitive vs. Object Parameters</title>
      <p>
        When a value of a primitive data type <mdash/> <c>int, double, char, boolean</c> <mdash/> 
        is passed as an argument to a method,
        a copy of the value is passed;
        when a reference to an <c>Object</c> is passed,
        a copy of the reference is passed.
      </p>
    </principle>
    <p>
      One implication of this distinction is that for arguments of primitive type,
      the original argument cannot be changed from within the method 
      because the method has only a copy of its value.
      For example,
      the following method takes an <c>int</c> parameter <em>n</em>,
      which is incremented within the method:
    </p>
 <program language="java"><input>
public void add1(int n) {
  System.out.print("n = " + n);
  n = n + 1;
  System.out.println(",  n = " + n);
}
 </input></program>
    <p>
      But because <em>n</em> is a parameter of primitive type,
      incrementing it within the method has no effect on its associated argument.
      Thus, in the following segment,
      the value of <em>Num</em> <mdash/> <em>n</em>'s associated argument <mdash/> will 
      not be affected by what goes on inside the <c>add()</c> method.
      The output produced by the code segment is shown in the comments:
    </p>
 <program language="java"><input>
int Num = 5;
System.out.println("Num = " + Num); // Prints Num = 5
add1(Num);                    // Prints n = 5,  n = 6
System.out.println("Num = " + Num); // Prints Num = 5
 </input></program>
    <p>
      Note that while <em>n</em>'s value has changed inside the method,
      <em>Num</em>'s value remains unaffected.
    </p>
    <p>
      The case is much different when we pass a reference to an object.
      In that case,
      the object itself can be manipulated from within the method.
      The <c>insertionSort()</c> method is a good illustration.
      In the following code  segment,
      the array <c>anArr</c> is printed,
      then sorted, and then printed again:
    </p>
 <program language="java"><input>
Sort sorter = new Sorter();
 int anArr[] = { 5, 10, 16, -2, 4, 6, 1 };
 sorter.print(anArr);           // Prints 5 10 16 -2 4 6 1
 sorter.insertionSort(anArr);   // Sorts anArr
 sorter.print(anArr);           // Prints -2 1 4 5 6 10 16
 </input></program>
    <p>
      As you can see, the object itself
      (the array)
      has been changed from within the method.
      This shows that changes within <c>insertionSort</c> to the array 
      referenced by <c>arr</c> are actually being made to <c>anArr</c> itself.
      If fact, because <c>insertionSort()</c> is passed a copy of the 
      reference variable <c>anArr</c>, both <c>arr</c> 
      and <c>anArr</c> are references to the very same object <mdash/> that is,
      to the same array (<xref ref="fig-arrayparam">Figure</xref>).
    </p>
    <figure xml:id="fig-arrayparam">
      <caption>When an array is passed to a method, both
      the parameter and the corresponding argument refer to the same object.</caption>
      <image width="60%" source="chptr09/8f11.png"/>
    </figure>
    <p>
      The justification for passing a reference to an object rather than the  
      entire object itself is a matter of efficiency.
      A reference uses just 4 bytes of data,
      whereas an object may use thousands of bytes.
      It would just be too inefficient to copy hundreds of bytes 
      each time an object is passed to a method.
      Instead, the method is passed a reference to the object,
      thereby giving it access to the object without incurring the 
      expense of copying large amounts of data.
      Indeed, Java provides no way to pass a copy of an object to a method.
    </p>

    <exercises xml:id="ss-params">
    <title>Self-Study Exercise</title>
      <exercise label="params-1">
    <title>Array Parameter</title>
    <statement>
        <p>Consider the fillowing code segment:</p>
         <program language="java"><input>
          int myArr[] = {1,2,3,4,5};    
          int k = 3;
          
          void mystery(int a[], int m) {
            ++a[m];
            --m;
          }
        </input></program>
          <p>Which of the following gives the correct values stored in <c>myArr</c> 
            after  <c>mystery(myArr, k)</c> is called?
          </p>
    </statement>
    <choices>
        <choice>
            <statement>
                <p>1,2,3,4,5</p>
            </statement>
            <feedback>
                <p>Incorrect. The expression will increment one of array elements.</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>1,2,4,4,5</p>
            </statement>
            <feedback>
                <p>Incorrect. Are you forgetting that arrays are zero-indexed?</p>
            </feedback>
        </choice>
        <choice correct="yes">
            <statement>
              <p>1,2,3,5,5</p>
            </statement>
            <feedback>
                <p>Correct. The change in the <c>myArr[3]</c> will persist after the method finishes.</p>
            </feedback>
        </choice>
        <choice>
            <statement>
                <p>1,2,3,4,6</p>
            </statement>
            <feedback>
                <p>Incorrect. Try again you've incremented the wrong element.
                </p>
            </feedback>
        </choice>
      </choices>
      <hint>
        <p>This question has to do with how array arguments are passed to a method.</p>
      </hint>
      <solution>
      <p>Answer: 1,2,3,5,5. The change in the <c>myArr[3]</c> will persist after the method finishes.
      </p>
      </solution>
    </exercise>

 <exercise label="parameters-2"> 
    <title>What's the value?</title>
    <statement>
        <p>Consider the fillowing code segment:</p>
         <program language="java"><input>
          int myArr[] = {1,2,3,4,5};    
          int k = 3;
          
          void mystery(int a[], int m) {
            ++a[m];
            --m;
          }
        </input></program>
          <p>After the <c>mystery(myArr, k)</c> method completes the 
          variable <c>k</c> will have the value <var/>.
          </p>    
    </statement>
    <setup>
        <var>
            <condition number="3">
                <feedback>
                    <p>Correct. Even though the parameter <c>m</c> is changed within the method,
                    that change will not affect <c>k</c>, which is a value argument.</p>
                </feedback>
            </condition>
            <condition string=".*">
                <feedback>
                    <p>Incorrect. Don't forget that <c>k</c> is a value argument.
                    Changes to its parameter inside the method will not affect it.</p>
                </feedback>
            </condition>
        </var>
    </setup>
    <hint>
      <p>Hint: Recall the difference between value and reference parameters.</p>                
    </hint>
    <solution>
      <p>Answer: 3 Even though the parameter <c>m</c> is changed within the method,
                    that change will not affect <c>k</c>, which is a value argument.
      </p>
    </solution>
</exercise>   

 <exercise label="selection-sort" adaptive="yes">
   <title>Selection sort</title>
   <statement>
       <p> Arrange the following blocks to complete the implemention of selection sort.
       <program language="java"><input>
      public void selectionSort(int arr[]) {
        int smallest = 0;
        for (int k = 0; k &lt; arr.length -1; k++)  {

          // Implement here

        } // outer
      } // selectionSort()       
       </input></program>
       </p>
   </statement>          
   <blocks>
      <block>
           <c>smallest = k; </c>
       </block>
      <block>
           <c>for (int i k+1; i&lt;arr.length; i++) {</c>
       </block>
       <block>
           <c>  if (arr[i] &lt; arr[smallest]) </c>
       </block>       
      <block>
           <c>    smallest = j; </c>
       </block>
       <block>
          <c>}</c>
       </block> 
        <block>
          <c>swap(arr, k, smallest);</c>
       </block>       
    </blocks>
   <hint></hint>
   <solution>
   <pre>
   smallest = k; 
   for (int i k+1; i&lt;arr.length; i++) {
      if (arr[i] &lt; arr[smallest])
        smallest = j;
   }
   swap(arr, k, smallest);  
   </pre>
   </solution>
</exercise>
</exercises>

  </subsection>
</section>