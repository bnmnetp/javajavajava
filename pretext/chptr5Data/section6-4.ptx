<section>
  <title>\terminology{From the Java Library}<c>java.lang.Math</c></title>
  <p>
    \tBOXseven{The}<c>java.lang.Math</c> class provides many common 
    <em>java.sun.com/j2se/1.5.0/docs/api/</em>} mathematical functions that will prove useful in performing numerical computations.
    As an element of the <c>java.lang</c> package,
    it is included implicitly in all Java programs.
    Table<nbsp/>5.11 lists some of the most commonly used <c>Math</c> class methods.
  </p>
  <table>
    \TBT{0pc}{A selection of <c>Math</c> class methods}
    
    <tabular>
      <row>
        <cell><c>__________</c></cell>
      </row>
      <row>
        <cell>{Method}</cell>
        <cell>{Description}</cell>
        <cell>{Examples}</cell>
      </row>
      <row>
        <cell><c>__________</c></cell>
      </row>
      <row>
        <cell><em>int abs(int  x)</em></cell>
        <cell><em>Absolute  value  of x</em></cell>
        <cell><em>if  x  <m>></m>=  0  abs(x)  is  x</em>\cr
          <em>long abs(long  x)</em></cell>
        <cell></cell>
        <cell><em>if  x  <m>\lt</m>  0  abs(x)  is  <m>-</m>x</em>\cr
          <em>float abs(float x)</em></cell>
        <cell></cell>
        <cell>\cr</cell>
        <cell></cell>
        <cell>\cr
          <em>int ceil(double  x)</em></cell>
        <cell><em>Rounds  x  to  the  smallest</em></cell>
        <cell><em>ceil(8.3)  is  9</em>\cr</cell>
        <cell><em>integer  not  less  than  x</em></cell>
        <cell><em>ceil(<m>-</m>8.3)  is  <m>-</m>8</em>\cr</cell>
        <cell></cell>
        <cell>\cr
          <em>int floor(double  x)</em></cell>
        <cell><em>Rounds  x  to  the  largest</em></cell>
        <cell><em>floor (8.9)  is  8</em>\cr</cell>
        <cell><em>integer  not  greater  than  x</em></cell>
        <cell><em>floor(<m>-</m>8.9)  is  <m>-</m>9</em>\cr</cell>
        <cell></cell>
        <cell>\cr
          <em>double log(double x)</em></cell>
        <cell><em>Natural  logarithm  of x</em></cell>
        <cell><em>log (2.718282)  is  1.0</em>\cr</cell>
        <cell></cell>
        <cell>\cr
          <em>double pow(double x, double  y)</em></cell>
        <cell><em>x  raised  to  the  y power  (<m>x^y</m>)</em></cell>
        <cell><em>pow(3, 4 )  is  81.0</em>\cr</cell>
        <cell></cell>
        <cell><em>pow(16.0, 0.5)  is  4.0</em>\cr</cell>
        <cell></cell>
        <cell>\cr
          <em>double random()</em></cell>
        <cell><em>Generates  a  random</em></cell>
        <cell><em>random()  is  0.5551</em>\cr</cell>
        <cell><em>number in  the  interval   [0,1)</em></cell>
        <cell><em>random() is 0.8712</em>\cr</cell>
        <cell></cell>
        <cell>\cr
          <em>long round(double  x)</em></cell>
        <cell><em>Rounds  x  to  an  integer</em></cell>
        <cell><em>round(26.51)  is  27</em>\cr</cell>
        <cell></cell>
        <cell><em>round (26.499)  is  26</em>\cr</cell>
        <cell></cell>
        <cell>\cr
          <em>double sqrt(double  x)</em></cell>
        <cell><em>Square root of x</em></cell>
        <cell><em>sqrt(4.0) is  2.0</em></cell>
      </row>
      <row>
        <cell><c>__________</c></cell>
      </row>
    </tabular>
    \endTB
  </table>
  <p>
    All <c>Math</c> methods are <c>static</c><em>class methods</em> and are,
    therefore,
    invoked through the class name.
    For example,
    we would calculate <m>2^4</m> as Math.pow(2,4) , which evaluates to 16.
    Similarly, we compute the square root of 225.0 as
<c>Math.sqrt(225.0)</c>, which evaluates to 15.0.
  </p>
  <p>
    Indeed, Java's <c>Math</c> class cannot be instantiated and cannot be subclassed.
    Its basic definition is
  </p>
 <program language="java"><input>
public final class Math    // Final, can't subclass
{   private Math() {}      // Private, can't invoke
    ...
    public static native double sqrt(double a)
           throws ArithmeticException;}
 </input></program>
  <p>
    By declaring the <c>Math</c> class <c>public final</c>, we indicate that it can be accessed (<c>public</c>) but it cannot be extended or subclassed (<c>final</c>).
    By declaring its default constructor to be <c>private</c>, we prevent this class from being instantiated.
    The idea of a class that cannot be subclassed and cannot be instantiated may seem a little strange at first.
    The justification for it here is that it provides a convenient and efficient way to introduce helpful math functions into the Java language.
  </p>
  <p>
    Defining the <c>Math</c> class in this way makes it easy to use its methods,
    because you don't have to create an instance of it.
    It is also a very efficient design because its methods are static elements of the <c>java.lang</c> package.
    This means they are loaded into memory at the beginning of your program's execution,
    and they persist in memory throughout your program's lifetime.
    Because <c>Math</c> class methods do not have to be loaded into memory each time they are invoked,
    their execution time will improve dramatically.
  </p>
  <principle>
    <title>EFFECTIVE DESIGN:Static Methods</title>
    <p>
      A method should be declared
<c>static</c> if it is intended to be used whether or not there is an instance of its class.
    </p>
  </principle>
</section>